/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.SC2APIProtocol = (function() {

    var SC2APIProtocol = {};

    SC2APIProtocol.Score = (function() {

        function Score(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Score.prototype.scoreType = 1;
        Score.prototype.score = 0;
        Score.prototype.scoreDetails = null;

        Score.create = function create(properties) {
            return new Score(properties);
        };

        Score.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.scoreType != null && Object.hasOwnProperty.call(m, "scoreType"))
                w.uint32(48).int32(m.scoreType);
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(56).int32(m.score);
            if (m.scoreDetails != null && Object.hasOwnProperty.call(m, "scoreDetails"))
                $root.SC2APIProtocol.ScoreDetails.encode(m.scoreDetails, w.uint32(66).fork()).ldelim();
            return w;
        };

        Score.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Score.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Score();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 6:
                    m.scoreType = r.int32();
                    break;
                case 7:
                    m.score = r.int32();
                    break;
                case 8:
                    m.scoreDetails = $root.SC2APIProtocol.ScoreDetails.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Score.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Score.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.scoreType != null && m.hasOwnProperty("scoreType")) {
                switch (m.scoreType) {
                default:
                    return "scoreType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                if (!$util.isInteger(m.score))
                    return "score: integer expected";
            }
            if (m.scoreDetails != null && m.hasOwnProperty("scoreDetails")) {
                {
                    var e = $root.SC2APIProtocol.ScoreDetails.verify(m.scoreDetails);
                    if (e)
                        return "scoreDetails." + e;
                }
            }
            return null;
        };

        Score.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Score)
                return d;
            var m = new $root.SC2APIProtocol.Score();
            switch (d.scoreType) {
            case "Curriculum":
            case 1:
                m.scoreType = 1;
                break;
            case "Melee":
            case 2:
                m.scoreType = 2;
                break;
            }
            if (d.score != null) {
                m.score = d.score | 0;
            }
            if (d.scoreDetails != null) {
                if (typeof d.scoreDetails !== "object")
                    throw TypeError(".SC2APIProtocol.Score.scoreDetails: object expected");
                m.scoreDetails = $root.SC2APIProtocol.ScoreDetails.fromObject(d.scoreDetails);
            }
            return m;
        };

        Score.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.scoreType = o.enums === String ? "Curriculum" : 1;
                d.score = 0;
                d.scoreDetails = null;
            }
            if (m.scoreType != null && m.hasOwnProperty("scoreType")) {
                d.scoreType = o.enums === String ? $root.SC2APIProtocol.Score.ScoreType[m.scoreType] : m.scoreType;
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                d.score = m.score;
            }
            if (m.scoreDetails != null && m.hasOwnProperty("scoreDetails")) {
                d.scoreDetails = $root.SC2APIProtocol.ScoreDetails.toObject(m.scoreDetails, o);
            }
            return d;
        };

        Score.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        Score.ScoreType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "Curriculum"] = 1;
            values[valuesById[2] = "Melee"] = 2;
            return values;
        })();

        return Score;
    })();

    SC2APIProtocol.CategoryScoreDetails = (function() {

        function CategoryScoreDetails(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        CategoryScoreDetails.prototype.none = 0;
        CategoryScoreDetails.prototype.army = 0;
        CategoryScoreDetails.prototype.economy = 0;
        CategoryScoreDetails.prototype.technology = 0;
        CategoryScoreDetails.prototype.upgrade = 0;

        CategoryScoreDetails.create = function create(properties) {
            return new CategoryScoreDetails(properties);
        };

        CategoryScoreDetails.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.none != null && Object.hasOwnProperty.call(m, "none"))
                w.uint32(13).float(m.none);
            if (m.army != null && Object.hasOwnProperty.call(m, "army"))
                w.uint32(21).float(m.army);
            if (m.economy != null && Object.hasOwnProperty.call(m, "economy"))
                w.uint32(29).float(m.economy);
            if (m.technology != null && Object.hasOwnProperty.call(m, "technology"))
                w.uint32(37).float(m.technology);
            if (m.upgrade != null && Object.hasOwnProperty.call(m, "upgrade"))
                w.uint32(45).float(m.upgrade);
            return w;
        };

        CategoryScoreDetails.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        CategoryScoreDetails.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.CategoryScoreDetails();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.none = r.float();
                    break;
                case 2:
                    m.army = r.float();
                    break;
                case 3:
                    m.economy = r.float();
                    break;
                case 4:
                    m.technology = r.float();
                    break;
                case 5:
                    m.upgrade = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        CategoryScoreDetails.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        CategoryScoreDetails.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.none != null && m.hasOwnProperty("none")) {
                if (typeof m.none !== "number")
                    return "none: number expected";
            }
            if (m.army != null && m.hasOwnProperty("army")) {
                if (typeof m.army !== "number")
                    return "army: number expected";
            }
            if (m.economy != null && m.hasOwnProperty("economy")) {
                if (typeof m.economy !== "number")
                    return "economy: number expected";
            }
            if (m.technology != null && m.hasOwnProperty("technology")) {
                if (typeof m.technology !== "number")
                    return "technology: number expected";
            }
            if (m.upgrade != null && m.hasOwnProperty("upgrade")) {
                if (typeof m.upgrade !== "number")
                    return "upgrade: number expected";
            }
            return null;
        };

        CategoryScoreDetails.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.CategoryScoreDetails)
                return d;
            var m = new $root.SC2APIProtocol.CategoryScoreDetails();
            if (d.none != null) {
                m.none = Number(d.none);
            }
            if (d.army != null) {
                m.army = Number(d.army);
            }
            if (d.economy != null) {
                m.economy = Number(d.economy);
            }
            if (d.technology != null) {
                m.technology = Number(d.technology);
            }
            if (d.upgrade != null) {
                m.upgrade = Number(d.upgrade);
            }
            return m;
        };

        CategoryScoreDetails.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.none = 0;
                d.army = 0;
                d.economy = 0;
                d.technology = 0;
                d.upgrade = 0;
            }
            if (m.none != null && m.hasOwnProperty("none")) {
                d.none = o.json && !isFinite(m.none) ? String(m.none) : m.none;
            }
            if (m.army != null && m.hasOwnProperty("army")) {
                d.army = o.json && !isFinite(m.army) ? String(m.army) : m.army;
            }
            if (m.economy != null && m.hasOwnProperty("economy")) {
                d.economy = o.json && !isFinite(m.economy) ? String(m.economy) : m.economy;
            }
            if (m.technology != null && m.hasOwnProperty("technology")) {
                d.technology = o.json && !isFinite(m.technology) ? String(m.technology) : m.technology;
            }
            if (m.upgrade != null && m.hasOwnProperty("upgrade")) {
                d.upgrade = o.json && !isFinite(m.upgrade) ? String(m.upgrade) : m.upgrade;
            }
            return d;
        };

        CategoryScoreDetails.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CategoryScoreDetails;
    })();

    SC2APIProtocol.VitalScoreDetails = (function() {

        function VitalScoreDetails(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        VitalScoreDetails.prototype.life = 0;
        VitalScoreDetails.prototype.shields = 0;
        VitalScoreDetails.prototype.energy = 0;

        VitalScoreDetails.create = function create(properties) {
            return new VitalScoreDetails(properties);
        };

        VitalScoreDetails.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.life != null && Object.hasOwnProperty.call(m, "life"))
                w.uint32(13).float(m.life);
            if (m.shields != null && Object.hasOwnProperty.call(m, "shields"))
                w.uint32(21).float(m.shields);
            if (m.energy != null && Object.hasOwnProperty.call(m, "energy"))
                w.uint32(29).float(m.energy);
            return w;
        };

        VitalScoreDetails.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        VitalScoreDetails.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.VitalScoreDetails();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.life = r.float();
                    break;
                case 2:
                    m.shields = r.float();
                    break;
                case 3:
                    m.energy = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        VitalScoreDetails.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        VitalScoreDetails.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.life != null && m.hasOwnProperty("life")) {
                if (typeof m.life !== "number")
                    return "life: number expected";
            }
            if (m.shields != null && m.hasOwnProperty("shields")) {
                if (typeof m.shields !== "number")
                    return "shields: number expected";
            }
            if (m.energy != null && m.hasOwnProperty("energy")) {
                if (typeof m.energy !== "number")
                    return "energy: number expected";
            }
            return null;
        };

        VitalScoreDetails.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.VitalScoreDetails)
                return d;
            var m = new $root.SC2APIProtocol.VitalScoreDetails();
            if (d.life != null) {
                m.life = Number(d.life);
            }
            if (d.shields != null) {
                m.shields = Number(d.shields);
            }
            if (d.energy != null) {
                m.energy = Number(d.energy);
            }
            return m;
        };

        VitalScoreDetails.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.life = 0;
                d.shields = 0;
                d.energy = 0;
            }
            if (m.life != null && m.hasOwnProperty("life")) {
                d.life = o.json && !isFinite(m.life) ? String(m.life) : m.life;
            }
            if (m.shields != null && m.hasOwnProperty("shields")) {
                d.shields = o.json && !isFinite(m.shields) ? String(m.shields) : m.shields;
            }
            if (m.energy != null && m.hasOwnProperty("energy")) {
                d.energy = o.json && !isFinite(m.energy) ? String(m.energy) : m.energy;
            }
            return d;
        };

        VitalScoreDetails.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VitalScoreDetails;
    })();

    SC2APIProtocol.ScoreDetails = (function() {

        function ScoreDetails(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ScoreDetails.prototype.idleProductionTime = 0;
        ScoreDetails.prototype.idleWorkerTime = 0;
        ScoreDetails.prototype.totalValueUnits = 0;
        ScoreDetails.prototype.totalValueStructures = 0;
        ScoreDetails.prototype.killedValueUnits = 0;
        ScoreDetails.prototype.killedValueStructures = 0;
        ScoreDetails.prototype.collectedMinerals = 0;
        ScoreDetails.prototype.collectedVespene = 0;
        ScoreDetails.prototype.collectionRateMinerals = 0;
        ScoreDetails.prototype.collectionRateVespene = 0;
        ScoreDetails.prototype.spentMinerals = 0;
        ScoreDetails.prototype.spentVespene = 0;
        ScoreDetails.prototype.foodUsed = null;
        ScoreDetails.prototype.killedMinerals = null;
        ScoreDetails.prototype.killedVespene = null;
        ScoreDetails.prototype.lostMinerals = null;
        ScoreDetails.prototype.lostVespene = null;
        ScoreDetails.prototype.friendlyFireMinerals = null;
        ScoreDetails.prototype.friendlyFireVespene = null;
        ScoreDetails.prototype.usedMinerals = null;
        ScoreDetails.prototype.usedVespene = null;
        ScoreDetails.prototype.totalUsedMinerals = null;
        ScoreDetails.prototype.totalUsedVespene = null;
        ScoreDetails.prototype.totalDamageDealt = null;
        ScoreDetails.prototype.totalDamageTaken = null;
        ScoreDetails.prototype.totalHealed = null;
        ScoreDetails.prototype.currentApm = 0;
        ScoreDetails.prototype.currentEffectiveApm = 0;

        ScoreDetails.create = function create(properties) {
            return new ScoreDetails(properties);
        };

        ScoreDetails.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.idleProductionTime != null && Object.hasOwnProperty.call(m, "idleProductionTime"))
                w.uint32(13).float(m.idleProductionTime);
            if (m.idleWorkerTime != null && Object.hasOwnProperty.call(m, "idleWorkerTime"))
                w.uint32(21).float(m.idleWorkerTime);
            if (m.totalValueUnits != null && Object.hasOwnProperty.call(m, "totalValueUnits"))
                w.uint32(29).float(m.totalValueUnits);
            if (m.totalValueStructures != null && Object.hasOwnProperty.call(m, "totalValueStructures"))
                w.uint32(37).float(m.totalValueStructures);
            if (m.killedValueUnits != null && Object.hasOwnProperty.call(m, "killedValueUnits"))
                w.uint32(45).float(m.killedValueUnits);
            if (m.killedValueStructures != null && Object.hasOwnProperty.call(m, "killedValueStructures"))
                w.uint32(53).float(m.killedValueStructures);
            if (m.collectedMinerals != null && Object.hasOwnProperty.call(m, "collectedMinerals"))
                w.uint32(61).float(m.collectedMinerals);
            if (m.collectedVespene != null && Object.hasOwnProperty.call(m, "collectedVespene"))
                w.uint32(69).float(m.collectedVespene);
            if (m.collectionRateMinerals != null && Object.hasOwnProperty.call(m, "collectionRateMinerals"))
                w.uint32(77).float(m.collectionRateMinerals);
            if (m.collectionRateVespene != null && Object.hasOwnProperty.call(m, "collectionRateVespene"))
                w.uint32(85).float(m.collectionRateVespene);
            if (m.spentMinerals != null && Object.hasOwnProperty.call(m, "spentMinerals"))
                w.uint32(93).float(m.spentMinerals);
            if (m.spentVespene != null && Object.hasOwnProperty.call(m, "spentVespene"))
                w.uint32(101).float(m.spentVespene);
            if (m.foodUsed != null && Object.hasOwnProperty.call(m, "foodUsed"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.foodUsed, w.uint32(106).fork()).ldelim();
            if (m.killedMinerals != null && Object.hasOwnProperty.call(m, "killedMinerals"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.killedMinerals, w.uint32(114).fork()).ldelim();
            if (m.killedVespene != null && Object.hasOwnProperty.call(m, "killedVespene"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.killedVespene, w.uint32(122).fork()).ldelim();
            if (m.lostMinerals != null && Object.hasOwnProperty.call(m, "lostMinerals"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.lostMinerals, w.uint32(130).fork()).ldelim();
            if (m.lostVespene != null && Object.hasOwnProperty.call(m, "lostVespene"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.lostVespene, w.uint32(138).fork()).ldelim();
            if (m.friendlyFireMinerals != null && Object.hasOwnProperty.call(m, "friendlyFireMinerals"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.friendlyFireMinerals, w.uint32(146).fork()).ldelim();
            if (m.friendlyFireVespene != null && Object.hasOwnProperty.call(m, "friendlyFireVespene"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.friendlyFireVespene, w.uint32(154).fork()).ldelim();
            if (m.usedMinerals != null && Object.hasOwnProperty.call(m, "usedMinerals"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.usedMinerals, w.uint32(162).fork()).ldelim();
            if (m.usedVespene != null && Object.hasOwnProperty.call(m, "usedVespene"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.usedVespene, w.uint32(170).fork()).ldelim();
            if (m.totalUsedMinerals != null && Object.hasOwnProperty.call(m, "totalUsedMinerals"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.totalUsedMinerals, w.uint32(178).fork()).ldelim();
            if (m.totalUsedVespene != null && Object.hasOwnProperty.call(m, "totalUsedVespene"))
                $root.SC2APIProtocol.CategoryScoreDetails.encode(m.totalUsedVespene, w.uint32(186).fork()).ldelim();
            if (m.totalDamageDealt != null && Object.hasOwnProperty.call(m, "totalDamageDealt"))
                $root.SC2APIProtocol.VitalScoreDetails.encode(m.totalDamageDealt, w.uint32(194).fork()).ldelim();
            if (m.totalDamageTaken != null && Object.hasOwnProperty.call(m, "totalDamageTaken"))
                $root.SC2APIProtocol.VitalScoreDetails.encode(m.totalDamageTaken, w.uint32(202).fork()).ldelim();
            if (m.totalHealed != null && Object.hasOwnProperty.call(m, "totalHealed"))
                $root.SC2APIProtocol.VitalScoreDetails.encode(m.totalHealed, w.uint32(210).fork()).ldelim();
            if (m.currentApm != null && Object.hasOwnProperty.call(m, "currentApm"))
                w.uint32(221).float(m.currentApm);
            if (m.currentEffectiveApm != null && Object.hasOwnProperty.call(m, "currentEffectiveApm"))
                w.uint32(229).float(m.currentEffectiveApm);
            return w;
        };

        ScoreDetails.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ScoreDetails.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ScoreDetails();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.idleProductionTime = r.float();
                    break;
                case 2:
                    m.idleWorkerTime = r.float();
                    break;
                case 3:
                    m.totalValueUnits = r.float();
                    break;
                case 4:
                    m.totalValueStructures = r.float();
                    break;
                case 5:
                    m.killedValueUnits = r.float();
                    break;
                case 6:
                    m.killedValueStructures = r.float();
                    break;
                case 7:
                    m.collectedMinerals = r.float();
                    break;
                case 8:
                    m.collectedVespene = r.float();
                    break;
                case 9:
                    m.collectionRateMinerals = r.float();
                    break;
                case 10:
                    m.collectionRateVespene = r.float();
                    break;
                case 11:
                    m.spentMinerals = r.float();
                    break;
                case 12:
                    m.spentVespene = r.float();
                    break;
                case 13:
                    m.foodUsed = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 14:
                    m.killedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 15:
                    m.killedVespene = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 16:
                    m.lostMinerals = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 17:
                    m.lostVespene = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 18:
                    m.friendlyFireMinerals = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 19:
                    m.friendlyFireVespene = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 20:
                    m.usedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 21:
                    m.usedVespene = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 22:
                    m.totalUsedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 23:
                    m.totalUsedVespene = $root.SC2APIProtocol.CategoryScoreDetails.decode(r, r.uint32());
                    break;
                case 24:
                    m.totalDamageDealt = $root.SC2APIProtocol.VitalScoreDetails.decode(r, r.uint32());
                    break;
                case 25:
                    m.totalDamageTaken = $root.SC2APIProtocol.VitalScoreDetails.decode(r, r.uint32());
                    break;
                case 26:
                    m.totalHealed = $root.SC2APIProtocol.VitalScoreDetails.decode(r, r.uint32());
                    break;
                case 27:
                    m.currentApm = r.float();
                    break;
                case 28:
                    m.currentEffectiveApm = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ScoreDetails.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ScoreDetails.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.idleProductionTime != null && m.hasOwnProperty("idleProductionTime")) {
                if (typeof m.idleProductionTime !== "number")
                    return "idleProductionTime: number expected";
            }
            if (m.idleWorkerTime != null && m.hasOwnProperty("idleWorkerTime")) {
                if (typeof m.idleWorkerTime !== "number")
                    return "idleWorkerTime: number expected";
            }
            if (m.totalValueUnits != null && m.hasOwnProperty("totalValueUnits")) {
                if (typeof m.totalValueUnits !== "number")
                    return "totalValueUnits: number expected";
            }
            if (m.totalValueStructures != null && m.hasOwnProperty("totalValueStructures")) {
                if (typeof m.totalValueStructures !== "number")
                    return "totalValueStructures: number expected";
            }
            if (m.killedValueUnits != null && m.hasOwnProperty("killedValueUnits")) {
                if (typeof m.killedValueUnits !== "number")
                    return "killedValueUnits: number expected";
            }
            if (m.killedValueStructures != null && m.hasOwnProperty("killedValueStructures")) {
                if (typeof m.killedValueStructures !== "number")
                    return "killedValueStructures: number expected";
            }
            if (m.collectedMinerals != null && m.hasOwnProperty("collectedMinerals")) {
                if (typeof m.collectedMinerals !== "number")
                    return "collectedMinerals: number expected";
            }
            if (m.collectedVespene != null && m.hasOwnProperty("collectedVespene")) {
                if (typeof m.collectedVespene !== "number")
                    return "collectedVespene: number expected";
            }
            if (m.collectionRateMinerals != null && m.hasOwnProperty("collectionRateMinerals")) {
                if (typeof m.collectionRateMinerals !== "number")
                    return "collectionRateMinerals: number expected";
            }
            if (m.collectionRateVespene != null && m.hasOwnProperty("collectionRateVespene")) {
                if (typeof m.collectionRateVespene !== "number")
                    return "collectionRateVespene: number expected";
            }
            if (m.spentMinerals != null && m.hasOwnProperty("spentMinerals")) {
                if (typeof m.spentMinerals !== "number")
                    return "spentMinerals: number expected";
            }
            if (m.spentVespene != null && m.hasOwnProperty("spentVespene")) {
                if (typeof m.spentVespene !== "number")
                    return "spentVespene: number expected";
            }
            if (m.foodUsed != null && m.hasOwnProperty("foodUsed")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.foodUsed);
                    if (e)
                        return "foodUsed." + e;
                }
            }
            if (m.killedMinerals != null && m.hasOwnProperty("killedMinerals")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.killedMinerals);
                    if (e)
                        return "killedMinerals." + e;
                }
            }
            if (m.killedVespene != null && m.hasOwnProperty("killedVespene")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.killedVespene);
                    if (e)
                        return "killedVespene." + e;
                }
            }
            if (m.lostMinerals != null && m.hasOwnProperty("lostMinerals")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.lostMinerals);
                    if (e)
                        return "lostMinerals." + e;
                }
            }
            if (m.lostVespene != null && m.hasOwnProperty("lostVespene")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.lostVespene);
                    if (e)
                        return "lostVespene." + e;
                }
            }
            if (m.friendlyFireMinerals != null && m.hasOwnProperty("friendlyFireMinerals")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.friendlyFireMinerals);
                    if (e)
                        return "friendlyFireMinerals." + e;
                }
            }
            if (m.friendlyFireVespene != null && m.hasOwnProperty("friendlyFireVespene")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.friendlyFireVespene);
                    if (e)
                        return "friendlyFireVespene." + e;
                }
            }
            if (m.usedMinerals != null && m.hasOwnProperty("usedMinerals")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.usedMinerals);
                    if (e)
                        return "usedMinerals." + e;
                }
            }
            if (m.usedVespene != null && m.hasOwnProperty("usedVespene")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.usedVespene);
                    if (e)
                        return "usedVespene." + e;
                }
            }
            if (m.totalUsedMinerals != null && m.hasOwnProperty("totalUsedMinerals")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.totalUsedMinerals);
                    if (e)
                        return "totalUsedMinerals." + e;
                }
            }
            if (m.totalUsedVespene != null && m.hasOwnProperty("totalUsedVespene")) {
                {
                    var e = $root.SC2APIProtocol.CategoryScoreDetails.verify(m.totalUsedVespene);
                    if (e)
                        return "totalUsedVespene." + e;
                }
            }
            if (m.totalDamageDealt != null && m.hasOwnProperty("totalDamageDealt")) {
                {
                    var e = $root.SC2APIProtocol.VitalScoreDetails.verify(m.totalDamageDealt);
                    if (e)
                        return "totalDamageDealt." + e;
                }
            }
            if (m.totalDamageTaken != null && m.hasOwnProperty("totalDamageTaken")) {
                {
                    var e = $root.SC2APIProtocol.VitalScoreDetails.verify(m.totalDamageTaken);
                    if (e)
                        return "totalDamageTaken." + e;
                }
            }
            if (m.totalHealed != null && m.hasOwnProperty("totalHealed")) {
                {
                    var e = $root.SC2APIProtocol.VitalScoreDetails.verify(m.totalHealed);
                    if (e)
                        return "totalHealed." + e;
                }
            }
            if (m.currentApm != null && m.hasOwnProperty("currentApm")) {
                if (typeof m.currentApm !== "number")
                    return "currentApm: number expected";
            }
            if (m.currentEffectiveApm != null && m.hasOwnProperty("currentEffectiveApm")) {
                if (typeof m.currentEffectiveApm !== "number")
                    return "currentEffectiveApm: number expected";
            }
            return null;
        };

        ScoreDetails.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ScoreDetails)
                return d;
            var m = new $root.SC2APIProtocol.ScoreDetails();
            if (d.idleProductionTime != null) {
                m.idleProductionTime = Number(d.idleProductionTime);
            }
            if (d.idleWorkerTime != null) {
                m.idleWorkerTime = Number(d.idleWorkerTime);
            }
            if (d.totalValueUnits != null) {
                m.totalValueUnits = Number(d.totalValueUnits);
            }
            if (d.totalValueStructures != null) {
                m.totalValueStructures = Number(d.totalValueStructures);
            }
            if (d.killedValueUnits != null) {
                m.killedValueUnits = Number(d.killedValueUnits);
            }
            if (d.killedValueStructures != null) {
                m.killedValueStructures = Number(d.killedValueStructures);
            }
            if (d.collectedMinerals != null) {
                m.collectedMinerals = Number(d.collectedMinerals);
            }
            if (d.collectedVespene != null) {
                m.collectedVespene = Number(d.collectedVespene);
            }
            if (d.collectionRateMinerals != null) {
                m.collectionRateMinerals = Number(d.collectionRateMinerals);
            }
            if (d.collectionRateVespene != null) {
                m.collectionRateVespene = Number(d.collectionRateVespene);
            }
            if (d.spentMinerals != null) {
                m.spentMinerals = Number(d.spentMinerals);
            }
            if (d.spentVespene != null) {
                m.spentVespene = Number(d.spentVespene);
            }
            if (d.foodUsed != null) {
                if (typeof d.foodUsed !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.foodUsed: object expected");
                m.foodUsed = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.foodUsed);
            }
            if (d.killedMinerals != null) {
                if (typeof d.killedMinerals !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.killedMinerals: object expected");
                m.killedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.killedMinerals);
            }
            if (d.killedVespene != null) {
                if (typeof d.killedVespene !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.killedVespene: object expected");
                m.killedVespene = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.killedVespene);
            }
            if (d.lostMinerals != null) {
                if (typeof d.lostMinerals !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.lostMinerals: object expected");
                m.lostMinerals = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.lostMinerals);
            }
            if (d.lostVespene != null) {
                if (typeof d.lostVespene !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.lostVespene: object expected");
                m.lostVespene = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.lostVespene);
            }
            if (d.friendlyFireMinerals != null) {
                if (typeof d.friendlyFireMinerals !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.friendlyFireMinerals: object expected");
                m.friendlyFireMinerals = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.friendlyFireMinerals);
            }
            if (d.friendlyFireVespene != null) {
                if (typeof d.friendlyFireVespene !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.friendlyFireVespene: object expected");
                m.friendlyFireVespene = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.friendlyFireVespene);
            }
            if (d.usedMinerals != null) {
                if (typeof d.usedMinerals !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.usedMinerals: object expected");
                m.usedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.usedMinerals);
            }
            if (d.usedVespene != null) {
                if (typeof d.usedVespene !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.usedVespene: object expected");
                m.usedVespene = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.usedVespene);
            }
            if (d.totalUsedMinerals != null) {
                if (typeof d.totalUsedMinerals !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.totalUsedMinerals: object expected");
                m.totalUsedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.totalUsedMinerals);
            }
            if (d.totalUsedVespene != null) {
                if (typeof d.totalUsedVespene !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.totalUsedVespene: object expected");
                m.totalUsedVespene = $root.SC2APIProtocol.CategoryScoreDetails.fromObject(d.totalUsedVespene);
            }
            if (d.totalDamageDealt != null) {
                if (typeof d.totalDamageDealt !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.totalDamageDealt: object expected");
                m.totalDamageDealt = $root.SC2APIProtocol.VitalScoreDetails.fromObject(d.totalDamageDealt);
            }
            if (d.totalDamageTaken != null) {
                if (typeof d.totalDamageTaken !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.totalDamageTaken: object expected");
                m.totalDamageTaken = $root.SC2APIProtocol.VitalScoreDetails.fromObject(d.totalDamageTaken);
            }
            if (d.totalHealed != null) {
                if (typeof d.totalHealed !== "object")
                    throw TypeError(".SC2APIProtocol.ScoreDetails.totalHealed: object expected");
                m.totalHealed = $root.SC2APIProtocol.VitalScoreDetails.fromObject(d.totalHealed);
            }
            if (d.currentApm != null) {
                m.currentApm = Number(d.currentApm);
            }
            if (d.currentEffectiveApm != null) {
                m.currentEffectiveApm = Number(d.currentEffectiveApm);
            }
            return m;
        };

        ScoreDetails.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.idleProductionTime = 0;
                d.idleWorkerTime = 0;
                d.totalValueUnits = 0;
                d.totalValueStructures = 0;
                d.killedValueUnits = 0;
                d.killedValueStructures = 0;
                d.collectedMinerals = 0;
                d.collectedVespene = 0;
                d.collectionRateMinerals = 0;
                d.collectionRateVespene = 0;
                d.spentMinerals = 0;
                d.spentVespene = 0;
                d.foodUsed = null;
                d.killedMinerals = null;
                d.killedVespene = null;
                d.lostMinerals = null;
                d.lostVespene = null;
                d.friendlyFireMinerals = null;
                d.friendlyFireVespene = null;
                d.usedMinerals = null;
                d.usedVespene = null;
                d.totalUsedMinerals = null;
                d.totalUsedVespene = null;
                d.totalDamageDealt = null;
                d.totalDamageTaken = null;
                d.totalHealed = null;
                d.currentApm = 0;
                d.currentEffectiveApm = 0;
            }
            if (m.idleProductionTime != null && m.hasOwnProperty("idleProductionTime")) {
                d.idleProductionTime = o.json && !isFinite(m.idleProductionTime) ? String(m.idleProductionTime) : m.idleProductionTime;
            }
            if (m.idleWorkerTime != null && m.hasOwnProperty("idleWorkerTime")) {
                d.idleWorkerTime = o.json && !isFinite(m.idleWorkerTime) ? String(m.idleWorkerTime) : m.idleWorkerTime;
            }
            if (m.totalValueUnits != null && m.hasOwnProperty("totalValueUnits")) {
                d.totalValueUnits = o.json && !isFinite(m.totalValueUnits) ? String(m.totalValueUnits) : m.totalValueUnits;
            }
            if (m.totalValueStructures != null && m.hasOwnProperty("totalValueStructures")) {
                d.totalValueStructures = o.json && !isFinite(m.totalValueStructures) ? String(m.totalValueStructures) : m.totalValueStructures;
            }
            if (m.killedValueUnits != null && m.hasOwnProperty("killedValueUnits")) {
                d.killedValueUnits = o.json && !isFinite(m.killedValueUnits) ? String(m.killedValueUnits) : m.killedValueUnits;
            }
            if (m.killedValueStructures != null && m.hasOwnProperty("killedValueStructures")) {
                d.killedValueStructures = o.json && !isFinite(m.killedValueStructures) ? String(m.killedValueStructures) : m.killedValueStructures;
            }
            if (m.collectedMinerals != null && m.hasOwnProperty("collectedMinerals")) {
                d.collectedMinerals = o.json && !isFinite(m.collectedMinerals) ? String(m.collectedMinerals) : m.collectedMinerals;
            }
            if (m.collectedVespene != null && m.hasOwnProperty("collectedVespene")) {
                d.collectedVespene = o.json && !isFinite(m.collectedVespene) ? String(m.collectedVespene) : m.collectedVespene;
            }
            if (m.collectionRateMinerals != null && m.hasOwnProperty("collectionRateMinerals")) {
                d.collectionRateMinerals = o.json && !isFinite(m.collectionRateMinerals) ? String(m.collectionRateMinerals) : m.collectionRateMinerals;
            }
            if (m.collectionRateVespene != null && m.hasOwnProperty("collectionRateVespene")) {
                d.collectionRateVespene = o.json && !isFinite(m.collectionRateVespene) ? String(m.collectionRateVespene) : m.collectionRateVespene;
            }
            if (m.spentMinerals != null && m.hasOwnProperty("spentMinerals")) {
                d.spentMinerals = o.json && !isFinite(m.spentMinerals) ? String(m.spentMinerals) : m.spentMinerals;
            }
            if (m.spentVespene != null && m.hasOwnProperty("spentVespene")) {
                d.spentVespene = o.json && !isFinite(m.spentVespene) ? String(m.spentVespene) : m.spentVespene;
            }
            if (m.foodUsed != null && m.hasOwnProperty("foodUsed")) {
                d.foodUsed = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.foodUsed, o);
            }
            if (m.killedMinerals != null && m.hasOwnProperty("killedMinerals")) {
                d.killedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.killedMinerals, o);
            }
            if (m.killedVespene != null && m.hasOwnProperty("killedVespene")) {
                d.killedVespene = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.killedVespene, o);
            }
            if (m.lostMinerals != null && m.hasOwnProperty("lostMinerals")) {
                d.lostMinerals = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.lostMinerals, o);
            }
            if (m.lostVespene != null && m.hasOwnProperty("lostVespene")) {
                d.lostVespene = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.lostVespene, o);
            }
            if (m.friendlyFireMinerals != null && m.hasOwnProperty("friendlyFireMinerals")) {
                d.friendlyFireMinerals = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.friendlyFireMinerals, o);
            }
            if (m.friendlyFireVespene != null && m.hasOwnProperty("friendlyFireVespene")) {
                d.friendlyFireVespene = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.friendlyFireVespene, o);
            }
            if (m.usedMinerals != null && m.hasOwnProperty("usedMinerals")) {
                d.usedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.usedMinerals, o);
            }
            if (m.usedVespene != null && m.hasOwnProperty("usedVespene")) {
                d.usedVespene = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.usedVespene, o);
            }
            if (m.totalUsedMinerals != null && m.hasOwnProperty("totalUsedMinerals")) {
                d.totalUsedMinerals = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.totalUsedMinerals, o);
            }
            if (m.totalUsedVespene != null && m.hasOwnProperty("totalUsedVespene")) {
                d.totalUsedVespene = $root.SC2APIProtocol.CategoryScoreDetails.toObject(m.totalUsedVespene, o);
            }
            if (m.totalDamageDealt != null && m.hasOwnProperty("totalDamageDealt")) {
                d.totalDamageDealt = $root.SC2APIProtocol.VitalScoreDetails.toObject(m.totalDamageDealt, o);
            }
            if (m.totalDamageTaken != null && m.hasOwnProperty("totalDamageTaken")) {
                d.totalDamageTaken = $root.SC2APIProtocol.VitalScoreDetails.toObject(m.totalDamageTaken, o);
            }
            if (m.totalHealed != null && m.hasOwnProperty("totalHealed")) {
                d.totalHealed = $root.SC2APIProtocol.VitalScoreDetails.toObject(m.totalHealed, o);
            }
            if (m.currentApm != null && m.hasOwnProperty("currentApm")) {
                d.currentApm = o.json && !isFinite(m.currentApm) ? String(m.currentApm) : m.currentApm;
            }
            if (m.currentEffectiveApm != null && m.hasOwnProperty("currentEffectiveApm")) {
                d.currentEffectiveApm = o.json && !isFinite(m.currentEffectiveApm) ? String(m.currentEffectiveApm) : m.currentEffectiveApm;
            }
            return d;
        };

        ScoreDetails.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ScoreDetails;
    })();

    SC2APIProtocol.ActionResult = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Success"] = 1;
        values[valuesById[2] = "NotSupported"] = 2;
        values[valuesById[3] = "Error"] = 3;
        values[valuesById[4] = "CantQueueThatOrder"] = 4;
        values[valuesById[5] = "Retry"] = 5;
        values[valuesById[6] = "Cooldown"] = 6;
        values[valuesById[7] = "QueueIsFull"] = 7;
        values[valuesById[8] = "RallyQueueIsFull"] = 8;
        values[valuesById[9] = "NotEnoughMinerals"] = 9;
        values[valuesById[10] = "NotEnoughVespene"] = 10;
        values[valuesById[11] = "NotEnoughTerrazine"] = 11;
        values[valuesById[12] = "NotEnoughCustom"] = 12;
        values[valuesById[13] = "NotEnoughFood"] = 13;
        values[valuesById[14] = "FoodUsageImpossible"] = 14;
        values[valuesById[15] = "NotEnoughLife"] = 15;
        values[valuesById[16] = "NotEnoughShields"] = 16;
        values[valuesById[17] = "NotEnoughEnergy"] = 17;
        values[valuesById[18] = "LifeSuppressed"] = 18;
        values[valuesById[19] = "ShieldsSuppressed"] = 19;
        values[valuesById[20] = "EnergySuppressed"] = 20;
        values[valuesById[21] = "NotEnoughCharges"] = 21;
        values[valuesById[22] = "CantAddMoreCharges"] = 22;
        values[valuesById[23] = "TooMuchMinerals"] = 23;
        values[valuesById[24] = "TooMuchVespene"] = 24;
        values[valuesById[25] = "TooMuchTerrazine"] = 25;
        values[valuesById[26] = "TooMuchCustom"] = 26;
        values[valuesById[27] = "TooMuchFood"] = 27;
        values[valuesById[28] = "TooMuchLife"] = 28;
        values[valuesById[29] = "TooMuchShields"] = 29;
        values[valuesById[30] = "TooMuchEnergy"] = 30;
        values[valuesById[31] = "MustTargetUnitWithLife"] = 31;
        values[valuesById[32] = "MustTargetUnitWithShields"] = 32;
        values[valuesById[33] = "MustTargetUnitWithEnergy"] = 33;
        values[valuesById[34] = "CantTrade"] = 34;
        values[valuesById[35] = "CantSpend"] = 35;
        values[valuesById[36] = "CantTargetThatUnit"] = 36;
        values[valuesById[37] = "CouldntAllocateUnit"] = 37;
        values[valuesById[38] = "UnitCantMove"] = 38;
        values[valuesById[39] = "TransportIsHoldingPosition"] = 39;
        values[valuesById[40] = "BuildTechRequirementsNotMet"] = 40;
        values[valuesById[41] = "CantFindPlacementLocation"] = 41;
        values[valuesById[42] = "CantBuildOnThat"] = 42;
        values[valuesById[43] = "CantBuildTooCloseToDropOff"] = 43;
        values[valuesById[44] = "CantBuildLocationInvalid"] = 44;
        values[valuesById[45] = "CantSeeBuildLocation"] = 45;
        values[valuesById[46] = "CantBuildTooCloseToCreepSource"] = 46;
        values[valuesById[47] = "CantBuildTooCloseToResources"] = 47;
        values[valuesById[48] = "CantBuildTooFarFromWater"] = 48;
        values[valuesById[49] = "CantBuildTooFarFromCreepSource"] = 49;
        values[valuesById[50] = "CantBuildTooFarFromBuildPowerSource"] = 50;
        values[valuesById[51] = "CantBuildOnDenseTerrain"] = 51;
        values[valuesById[52] = "CantTrainTooFarFromTrainPowerSource"] = 52;
        values[valuesById[53] = "CantLandLocationInvalid"] = 53;
        values[valuesById[54] = "CantSeeLandLocation"] = 54;
        values[valuesById[55] = "CantLandTooCloseToCreepSource"] = 55;
        values[valuesById[56] = "CantLandTooCloseToResources"] = 56;
        values[valuesById[57] = "CantLandTooFarFromWater"] = 57;
        values[valuesById[58] = "CantLandTooFarFromCreepSource"] = 58;
        values[valuesById[59] = "CantLandTooFarFromBuildPowerSource"] = 59;
        values[valuesById[60] = "CantLandTooFarFromTrainPowerSource"] = 60;
        values[valuesById[61] = "CantLandOnDenseTerrain"] = 61;
        values[valuesById[62] = "AddOnTooFarFromBuilding"] = 62;
        values[valuesById[63] = "MustBuildRefineryFirst"] = 63;
        values[valuesById[64] = "BuildingIsUnderConstruction"] = 64;
        values[valuesById[65] = "CantFindDropOff"] = 65;
        values[valuesById[66] = "CantLoadOtherPlayersUnits"] = 66;
        values[valuesById[67] = "NotEnoughRoomToLoadUnit"] = 67;
        values[valuesById[68] = "CantUnloadUnitsThere"] = 68;
        values[valuesById[69] = "CantWarpInUnitsThere"] = 69;
        values[valuesById[70] = "CantLoadImmobileUnits"] = 70;
        values[valuesById[71] = "CantRechargeImmobileUnits"] = 71;
        values[valuesById[72] = "CantRechargeUnderConstructionUnits"] = 72;
        values[valuesById[73] = "CantLoadThatUnit"] = 73;
        values[valuesById[74] = "NoCargoToUnload"] = 74;
        values[valuesById[75] = "LoadAllNoTargetsFound"] = 75;
        values[valuesById[76] = "NotWhileOccupied"] = 76;
        values[valuesById[77] = "CantAttackWithoutAmmo"] = 77;
        values[valuesById[78] = "CantHoldAnyMoreAmmo"] = 78;
        values[valuesById[79] = "TechRequirementsNotMet"] = 79;
        values[valuesById[80] = "MustLockdownUnitFirst"] = 80;
        values[valuesById[81] = "MustTargetUnit"] = 81;
        values[valuesById[82] = "MustTargetInventory"] = 82;
        values[valuesById[83] = "MustTargetVisibleUnit"] = 83;
        values[valuesById[84] = "MustTargetVisibleLocation"] = 84;
        values[valuesById[85] = "MustTargetWalkableLocation"] = 85;
        values[valuesById[86] = "MustTargetPawnableUnit"] = 86;
        values[valuesById[87] = "YouCantControlThatUnit"] = 87;
        values[valuesById[88] = "YouCantIssueCommandsToThatUnit"] = 88;
        values[valuesById[89] = "MustTargetResources"] = 89;
        values[valuesById[90] = "RequiresHealTarget"] = 90;
        values[valuesById[91] = "RequiresRepairTarget"] = 91;
        values[valuesById[92] = "NoItemsToDrop"] = 92;
        values[valuesById[93] = "CantHoldAnyMoreItems"] = 93;
        values[valuesById[94] = "CantHoldThat"] = 94;
        values[valuesById[95] = "TargetHasNoInventory"] = 95;
        values[valuesById[96] = "CantDropThisItem"] = 96;
        values[valuesById[97] = "CantMoveThisItem"] = 97;
        values[valuesById[98] = "CantPawnThisUnit"] = 98;
        values[valuesById[99] = "MustTargetCaster"] = 99;
        values[valuesById[100] = "CantTargetCaster"] = 100;
        values[valuesById[101] = "MustTargetOuter"] = 101;
        values[valuesById[102] = "CantTargetOuter"] = 102;
        values[valuesById[103] = "MustTargetYourOwnUnits"] = 103;
        values[valuesById[104] = "CantTargetYourOwnUnits"] = 104;
        values[valuesById[105] = "MustTargetFriendlyUnits"] = 105;
        values[valuesById[106] = "CantTargetFriendlyUnits"] = 106;
        values[valuesById[107] = "MustTargetNeutralUnits"] = 107;
        values[valuesById[108] = "CantTargetNeutralUnits"] = 108;
        values[valuesById[109] = "MustTargetEnemyUnits"] = 109;
        values[valuesById[110] = "CantTargetEnemyUnits"] = 110;
        values[valuesById[111] = "MustTargetAirUnits"] = 111;
        values[valuesById[112] = "CantTargetAirUnits"] = 112;
        values[valuesById[113] = "MustTargetGroundUnits"] = 113;
        values[valuesById[114] = "CantTargetGroundUnits"] = 114;
        values[valuesById[115] = "MustTargetStructures"] = 115;
        values[valuesById[116] = "CantTargetStructures"] = 116;
        values[valuesById[117] = "MustTargetLightUnits"] = 117;
        values[valuesById[118] = "CantTargetLightUnits"] = 118;
        values[valuesById[119] = "MustTargetArmoredUnits"] = 119;
        values[valuesById[120] = "CantTargetArmoredUnits"] = 120;
        values[valuesById[121] = "MustTargetBiologicalUnits"] = 121;
        values[valuesById[122] = "CantTargetBiologicalUnits"] = 122;
        values[valuesById[123] = "MustTargetHeroicUnits"] = 123;
        values[valuesById[124] = "CantTargetHeroicUnits"] = 124;
        values[valuesById[125] = "MustTargetRoboticUnits"] = 125;
        values[valuesById[126] = "CantTargetRoboticUnits"] = 126;
        values[valuesById[127] = "MustTargetMechanicalUnits"] = 127;
        values[valuesById[128] = "CantTargetMechanicalUnits"] = 128;
        values[valuesById[129] = "MustTargetPsionicUnits"] = 129;
        values[valuesById[130] = "CantTargetPsionicUnits"] = 130;
        values[valuesById[131] = "MustTargetMassiveUnits"] = 131;
        values[valuesById[132] = "CantTargetMassiveUnits"] = 132;
        values[valuesById[133] = "MustTargetMissile"] = 133;
        values[valuesById[134] = "CantTargetMissile"] = 134;
        values[valuesById[135] = "MustTargetWorkerUnits"] = 135;
        values[valuesById[136] = "CantTargetWorkerUnits"] = 136;
        values[valuesById[137] = "MustTargetEnergyCapableUnits"] = 137;
        values[valuesById[138] = "CantTargetEnergyCapableUnits"] = 138;
        values[valuesById[139] = "MustTargetShieldCapableUnits"] = 139;
        values[valuesById[140] = "CantTargetShieldCapableUnits"] = 140;
        values[valuesById[141] = "MustTargetFlyers"] = 141;
        values[valuesById[142] = "CantTargetFlyers"] = 142;
        values[valuesById[143] = "MustTargetBuriedUnits"] = 143;
        values[valuesById[144] = "CantTargetBuriedUnits"] = 144;
        values[valuesById[145] = "MustTargetCloakedUnits"] = 145;
        values[valuesById[146] = "CantTargetCloakedUnits"] = 146;
        values[valuesById[147] = "MustTargetUnitsInAStasisField"] = 147;
        values[valuesById[148] = "CantTargetUnitsInAStasisField"] = 148;
        values[valuesById[149] = "MustTargetUnderConstructionUnits"] = 149;
        values[valuesById[150] = "CantTargetUnderConstructionUnits"] = 150;
        values[valuesById[151] = "MustTargetDeadUnits"] = 151;
        values[valuesById[152] = "CantTargetDeadUnits"] = 152;
        values[valuesById[153] = "MustTargetRevivableUnits"] = 153;
        values[valuesById[154] = "CantTargetRevivableUnits"] = 154;
        values[valuesById[155] = "MustTargetHiddenUnits"] = 155;
        values[valuesById[156] = "CantTargetHiddenUnits"] = 156;
        values[valuesById[157] = "CantRechargeOtherPlayersUnits"] = 157;
        values[valuesById[158] = "MustTargetHallucinations"] = 158;
        values[valuesById[159] = "CantTargetHallucinations"] = 159;
        values[valuesById[160] = "MustTargetInvulnerableUnits"] = 160;
        values[valuesById[161] = "CantTargetInvulnerableUnits"] = 161;
        values[valuesById[162] = "MustTargetDetectedUnits"] = 162;
        values[valuesById[163] = "CantTargetDetectedUnits"] = 163;
        values[valuesById[164] = "CantTargetUnitWithEnergy"] = 164;
        values[valuesById[165] = "CantTargetUnitWithShields"] = 165;
        values[valuesById[166] = "MustTargetUncommandableUnits"] = 166;
        values[valuesById[167] = "CantTargetUncommandableUnits"] = 167;
        values[valuesById[168] = "MustTargetPreventDefeatUnits"] = 168;
        values[valuesById[169] = "CantTargetPreventDefeatUnits"] = 169;
        values[valuesById[170] = "MustTargetPreventRevealUnits"] = 170;
        values[valuesById[171] = "CantTargetPreventRevealUnits"] = 171;
        values[valuesById[172] = "MustTargetPassiveUnits"] = 172;
        values[valuesById[173] = "CantTargetPassiveUnits"] = 173;
        values[valuesById[174] = "MustTargetStunnedUnits"] = 174;
        values[valuesById[175] = "CantTargetStunnedUnits"] = 175;
        values[valuesById[176] = "MustTargetSummonedUnits"] = 176;
        values[valuesById[177] = "CantTargetSummonedUnits"] = 177;
        values[valuesById[178] = "MustTargetUser1"] = 178;
        values[valuesById[179] = "CantTargetUser1"] = 179;
        values[valuesById[180] = "MustTargetUnstoppableUnits"] = 180;
        values[valuesById[181] = "CantTargetUnstoppableUnits"] = 181;
        values[valuesById[182] = "MustTargetResistantUnits"] = 182;
        values[valuesById[183] = "CantTargetResistantUnits"] = 183;
        values[valuesById[184] = "MustTargetDazedUnits"] = 184;
        values[valuesById[185] = "CantTargetDazedUnits"] = 185;
        values[valuesById[186] = "CantLockdown"] = 186;
        values[valuesById[187] = "CantMindControl"] = 187;
        values[valuesById[188] = "MustTargetDestructibles"] = 188;
        values[valuesById[189] = "CantTargetDestructibles"] = 189;
        values[valuesById[190] = "MustTargetItems"] = 190;
        values[valuesById[191] = "CantTargetItems"] = 191;
        values[valuesById[192] = "NoCalldownAvailable"] = 192;
        values[valuesById[193] = "WaypointListFull"] = 193;
        values[valuesById[194] = "MustTargetRace"] = 194;
        values[valuesById[195] = "CantTargetRace"] = 195;
        values[valuesById[196] = "MustTargetSimilarUnits"] = 196;
        values[valuesById[197] = "CantTargetSimilarUnits"] = 197;
        values[valuesById[198] = "CantFindEnoughTargets"] = 198;
        values[valuesById[199] = "AlreadySpawningLarva"] = 199;
        values[valuesById[200] = "CantTargetExhaustedResources"] = 200;
        values[valuesById[201] = "CantUseMinimap"] = 201;
        values[valuesById[202] = "CantUseInfoPanel"] = 202;
        values[valuesById[203] = "OrderQueueIsFull"] = 203;
        values[valuesById[204] = "CantHarvestThatResource"] = 204;
        values[valuesById[205] = "HarvestersNotRequired"] = 205;
        values[valuesById[206] = "AlreadyTargeted"] = 206;
        values[valuesById[207] = "CantAttackWeaponsDisabled"] = 207;
        values[valuesById[208] = "CouldntReachTarget"] = 208;
        values[valuesById[209] = "TargetIsOutOfRange"] = 209;
        values[valuesById[210] = "TargetIsTooClose"] = 210;
        values[valuesById[211] = "TargetIsOutOfArc"] = 211;
        values[valuesById[212] = "CantFindTeleportLocation"] = 212;
        values[valuesById[213] = "InvalidItemClass"] = 213;
        values[valuesById[214] = "CantFindCancelOrder"] = 214;
        return values;
    })();

    SC2APIProtocol.DebugCommand = (function() {

        function DebugCommand(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugCommand.prototype.draw = null;
        DebugCommand.prototype.gameState = 1;
        DebugCommand.prototype.createUnit = null;
        DebugCommand.prototype.killUnit = null;
        DebugCommand.prototype.testProcess = null;
        DebugCommand.prototype.score = null;
        DebugCommand.prototype.endGame = null;
        DebugCommand.prototype.unitValue = null;

        var $oneOfFields;

        Object.defineProperty(DebugCommand.prototype, "command", {
            get: $util.oneOfGetter($oneOfFields = ["draw", "gameState", "createUnit", "killUnit", "testProcess", "score", "endGame", "unitValue"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        DebugCommand.create = function create(properties) {
            return new DebugCommand(properties);
        };

        DebugCommand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.draw != null && Object.hasOwnProperty.call(m, "draw"))
                $root.SC2APIProtocol.DebugDraw.encode(m.draw, w.uint32(10).fork()).ldelim();
            if (m.gameState != null && Object.hasOwnProperty.call(m, "gameState"))
                w.uint32(16).int32(m.gameState);
            if (m.createUnit != null && Object.hasOwnProperty.call(m, "createUnit"))
                $root.SC2APIProtocol.DebugCreateUnit.encode(m.createUnit, w.uint32(26).fork()).ldelim();
            if (m.killUnit != null && Object.hasOwnProperty.call(m, "killUnit"))
                $root.SC2APIProtocol.DebugKillUnit.encode(m.killUnit, w.uint32(34).fork()).ldelim();
            if (m.testProcess != null && Object.hasOwnProperty.call(m, "testProcess"))
                $root.SC2APIProtocol.DebugTestProcess.encode(m.testProcess, w.uint32(42).fork()).ldelim();
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                $root.SC2APIProtocol.DebugSetScore.encode(m.score, w.uint32(50).fork()).ldelim();
            if (m.endGame != null && Object.hasOwnProperty.call(m, "endGame"))
                $root.SC2APIProtocol.DebugEndGame.encode(m.endGame, w.uint32(58).fork()).ldelim();
            if (m.unitValue != null && Object.hasOwnProperty.call(m, "unitValue"))
                $root.SC2APIProtocol.DebugSetUnitValue.encode(m.unitValue, w.uint32(66).fork()).ldelim();
            return w;
        };

        DebugCommand.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugCommand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugCommand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.draw = $root.SC2APIProtocol.DebugDraw.decode(r, r.uint32());
                    break;
                case 2:
                    m.gameState = r.int32();
                    break;
                case 3:
                    m.createUnit = $root.SC2APIProtocol.DebugCreateUnit.decode(r, r.uint32());
                    break;
                case 4:
                    m.killUnit = $root.SC2APIProtocol.DebugKillUnit.decode(r, r.uint32());
                    break;
                case 5:
                    m.testProcess = $root.SC2APIProtocol.DebugTestProcess.decode(r, r.uint32());
                    break;
                case 6:
                    m.score = $root.SC2APIProtocol.DebugSetScore.decode(r, r.uint32());
                    break;
                case 7:
                    m.endGame = $root.SC2APIProtocol.DebugEndGame.decode(r, r.uint32());
                    break;
                case 8:
                    m.unitValue = $root.SC2APIProtocol.DebugSetUnitValue.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugCommand.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugCommand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.draw != null && m.hasOwnProperty("draw")) {
                p.command = 1;
                {
                    var e = $root.SC2APIProtocol.DebugDraw.verify(m.draw);
                    if (e)
                        return "draw." + e;
                }
            }
            if (m.gameState != null && m.hasOwnProperty("gameState")) {
                if (p.command === 1)
                    return "command: multiple values";
                p.command = 1;
                switch (m.gameState) {
                default:
                    return "gameState: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    break;
                }
            }
            if (m.createUnit != null && m.hasOwnProperty("createUnit")) {
                if (p.command === 1)
                    return "command: multiple values";
                p.command = 1;
                {
                    var e = $root.SC2APIProtocol.DebugCreateUnit.verify(m.createUnit);
                    if (e)
                        return "createUnit." + e;
                }
            }
            if (m.killUnit != null && m.hasOwnProperty("killUnit")) {
                if (p.command === 1)
                    return "command: multiple values";
                p.command = 1;
                {
                    var e = $root.SC2APIProtocol.DebugKillUnit.verify(m.killUnit);
                    if (e)
                        return "killUnit." + e;
                }
            }
            if (m.testProcess != null && m.hasOwnProperty("testProcess")) {
                if (p.command === 1)
                    return "command: multiple values";
                p.command = 1;
                {
                    var e = $root.SC2APIProtocol.DebugTestProcess.verify(m.testProcess);
                    if (e)
                        return "testProcess." + e;
                }
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                if (p.command === 1)
                    return "command: multiple values";
                p.command = 1;
                {
                    var e = $root.SC2APIProtocol.DebugSetScore.verify(m.score);
                    if (e)
                        return "score." + e;
                }
            }
            if (m.endGame != null && m.hasOwnProperty("endGame")) {
                if (p.command === 1)
                    return "command: multiple values";
                p.command = 1;
                {
                    var e = $root.SC2APIProtocol.DebugEndGame.verify(m.endGame);
                    if (e)
                        return "endGame." + e;
                }
            }
            if (m.unitValue != null && m.hasOwnProperty("unitValue")) {
                if (p.command === 1)
                    return "command: multiple values";
                p.command = 1;
                {
                    var e = $root.SC2APIProtocol.DebugSetUnitValue.verify(m.unitValue);
                    if (e)
                        return "unitValue." + e;
                }
            }
            return null;
        };

        DebugCommand.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugCommand)
                return d;
            var m = new $root.SC2APIProtocol.DebugCommand();
            if (d.draw != null) {
                if (typeof d.draw !== "object")
                    throw TypeError(".SC2APIProtocol.DebugCommand.draw: object expected");
                m.draw = $root.SC2APIProtocol.DebugDraw.fromObject(d.draw);
            }
            switch (d.gameState) {
            case "show_map":
            case 1:
                m.gameState = 1;
                break;
            case "control_enemy":
            case 2:
                m.gameState = 2;
                break;
            case "food":
            case 3:
                m.gameState = 3;
                break;
            case "free":
            case 4:
                m.gameState = 4;
                break;
            case "all_resources":
            case 5:
                m.gameState = 5;
                break;
            case "god":
            case 6:
                m.gameState = 6;
                break;
            case "minerals":
            case 7:
                m.gameState = 7;
                break;
            case "gas":
            case 8:
                m.gameState = 8;
                break;
            case "cooldown":
            case 9:
                m.gameState = 9;
                break;
            case "tech_tree":
            case 10:
                m.gameState = 10;
                break;
            case "upgrade":
            case 11:
                m.gameState = 11;
                break;
            case "fast_build":
            case 12:
                m.gameState = 12;
                break;
            }
            if (d.createUnit != null) {
                if (typeof d.createUnit !== "object")
                    throw TypeError(".SC2APIProtocol.DebugCommand.createUnit: object expected");
                m.createUnit = $root.SC2APIProtocol.DebugCreateUnit.fromObject(d.createUnit);
            }
            if (d.killUnit != null) {
                if (typeof d.killUnit !== "object")
                    throw TypeError(".SC2APIProtocol.DebugCommand.killUnit: object expected");
                m.killUnit = $root.SC2APIProtocol.DebugKillUnit.fromObject(d.killUnit);
            }
            if (d.testProcess != null) {
                if (typeof d.testProcess !== "object")
                    throw TypeError(".SC2APIProtocol.DebugCommand.testProcess: object expected");
                m.testProcess = $root.SC2APIProtocol.DebugTestProcess.fromObject(d.testProcess);
            }
            if (d.score != null) {
                if (typeof d.score !== "object")
                    throw TypeError(".SC2APIProtocol.DebugCommand.score: object expected");
                m.score = $root.SC2APIProtocol.DebugSetScore.fromObject(d.score);
            }
            if (d.endGame != null) {
                if (typeof d.endGame !== "object")
                    throw TypeError(".SC2APIProtocol.DebugCommand.endGame: object expected");
                m.endGame = $root.SC2APIProtocol.DebugEndGame.fromObject(d.endGame);
            }
            if (d.unitValue != null) {
                if (typeof d.unitValue !== "object")
                    throw TypeError(".SC2APIProtocol.DebugCommand.unitValue: object expected");
                m.unitValue = $root.SC2APIProtocol.DebugSetUnitValue.fromObject(d.unitValue);
            }
            return m;
        };

        DebugCommand.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (m.draw != null && m.hasOwnProperty("draw")) {
                d.draw = $root.SC2APIProtocol.DebugDraw.toObject(m.draw, o);
                if (o.oneofs)
                    d.command = "draw";
            }
            if (m.gameState != null && m.hasOwnProperty("gameState")) {
                d.gameState = o.enums === String ? $root.SC2APIProtocol.DebugGameState[m.gameState] : m.gameState;
                if (o.oneofs)
                    d.command = "gameState";
            }
            if (m.createUnit != null && m.hasOwnProperty("createUnit")) {
                d.createUnit = $root.SC2APIProtocol.DebugCreateUnit.toObject(m.createUnit, o);
                if (o.oneofs)
                    d.command = "createUnit";
            }
            if (m.killUnit != null && m.hasOwnProperty("killUnit")) {
                d.killUnit = $root.SC2APIProtocol.DebugKillUnit.toObject(m.killUnit, o);
                if (o.oneofs)
                    d.command = "killUnit";
            }
            if (m.testProcess != null && m.hasOwnProperty("testProcess")) {
                d.testProcess = $root.SC2APIProtocol.DebugTestProcess.toObject(m.testProcess, o);
                if (o.oneofs)
                    d.command = "testProcess";
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                d.score = $root.SC2APIProtocol.DebugSetScore.toObject(m.score, o);
                if (o.oneofs)
                    d.command = "score";
            }
            if (m.endGame != null && m.hasOwnProperty("endGame")) {
                d.endGame = $root.SC2APIProtocol.DebugEndGame.toObject(m.endGame, o);
                if (o.oneofs)
                    d.command = "endGame";
            }
            if (m.unitValue != null && m.hasOwnProperty("unitValue")) {
                d.unitValue = $root.SC2APIProtocol.DebugSetUnitValue.toObject(m.unitValue, o);
                if (o.oneofs)
                    d.command = "unitValue";
            }
            return d;
        };

        DebugCommand.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugCommand;
    })();

    SC2APIProtocol.DebugDraw = (function() {

        function DebugDraw(p) {
            this.text = [];
            this.lines = [];
            this.boxes = [];
            this.spheres = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugDraw.prototype.text = $util.emptyArray;
        DebugDraw.prototype.lines = $util.emptyArray;
        DebugDraw.prototype.boxes = $util.emptyArray;
        DebugDraw.prototype.spheres = $util.emptyArray;

        DebugDraw.create = function create(properties) {
            return new DebugDraw(properties);
        };

        DebugDraw.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.text != null && m.text.length) {
                for (var i = 0; i < m.text.length; ++i)
                    $root.SC2APIProtocol.DebugText.encode(m.text[i], w.uint32(10).fork()).ldelim();
            }
            if (m.lines != null && m.lines.length) {
                for (var i = 0; i < m.lines.length; ++i)
                    $root.SC2APIProtocol.DebugLine.encode(m.lines[i], w.uint32(18).fork()).ldelim();
            }
            if (m.boxes != null && m.boxes.length) {
                for (var i = 0; i < m.boxes.length; ++i)
                    $root.SC2APIProtocol.DebugBox.encode(m.boxes[i], w.uint32(26).fork()).ldelim();
            }
            if (m.spheres != null && m.spheres.length) {
                for (var i = 0; i < m.spheres.length; ++i)
                    $root.SC2APIProtocol.DebugSphere.encode(m.spheres[i], w.uint32(34).fork()).ldelim();
            }
            return w;
        };

        DebugDraw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugDraw.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugDraw();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.text && m.text.length))
                        m.text = [];
                    m.text.push($root.SC2APIProtocol.DebugText.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.lines && m.lines.length))
                        m.lines = [];
                    m.lines.push($root.SC2APIProtocol.DebugLine.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.boxes && m.boxes.length))
                        m.boxes = [];
                    m.boxes.push($root.SC2APIProtocol.DebugBox.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.spheres && m.spheres.length))
                        m.spheres = [];
                    m.spheres.push($root.SC2APIProtocol.DebugSphere.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugDraw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugDraw.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.text != null && m.hasOwnProperty("text")) {
                if (!Array.isArray(m.text))
                    return "text: array expected";
                for (var i = 0; i < m.text.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.DebugText.verify(m.text[i]);
                        if (e)
                            return "text." + e;
                    }
                }
            }
            if (m.lines != null && m.hasOwnProperty("lines")) {
                if (!Array.isArray(m.lines))
                    return "lines: array expected";
                for (var i = 0; i < m.lines.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.DebugLine.verify(m.lines[i]);
                        if (e)
                            return "lines." + e;
                    }
                }
            }
            if (m.boxes != null && m.hasOwnProperty("boxes")) {
                if (!Array.isArray(m.boxes))
                    return "boxes: array expected";
                for (var i = 0; i < m.boxes.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.DebugBox.verify(m.boxes[i]);
                        if (e)
                            return "boxes." + e;
                    }
                }
            }
            if (m.spheres != null && m.hasOwnProperty("spheres")) {
                if (!Array.isArray(m.spheres))
                    return "spheres: array expected";
                for (var i = 0; i < m.spheres.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.DebugSphere.verify(m.spheres[i]);
                        if (e)
                            return "spheres." + e;
                    }
                }
            }
            return null;
        };

        DebugDraw.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugDraw)
                return d;
            var m = new $root.SC2APIProtocol.DebugDraw();
            if (d.text) {
                if (!Array.isArray(d.text))
                    throw TypeError(".SC2APIProtocol.DebugDraw.text: array expected");
                m.text = [];
                for (var i = 0; i < d.text.length; ++i) {
                    if (typeof d.text[i] !== "object")
                        throw TypeError(".SC2APIProtocol.DebugDraw.text: object expected");
                    m.text[i] = $root.SC2APIProtocol.DebugText.fromObject(d.text[i]);
                }
            }
            if (d.lines) {
                if (!Array.isArray(d.lines))
                    throw TypeError(".SC2APIProtocol.DebugDraw.lines: array expected");
                m.lines = [];
                for (var i = 0; i < d.lines.length; ++i) {
                    if (typeof d.lines[i] !== "object")
                        throw TypeError(".SC2APIProtocol.DebugDraw.lines: object expected");
                    m.lines[i] = $root.SC2APIProtocol.DebugLine.fromObject(d.lines[i]);
                }
            }
            if (d.boxes) {
                if (!Array.isArray(d.boxes))
                    throw TypeError(".SC2APIProtocol.DebugDraw.boxes: array expected");
                m.boxes = [];
                for (var i = 0; i < d.boxes.length; ++i) {
                    if (typeof d.boxes[i] !== "object")
                        throw TypeError(".SC2APIProtocol.DebugDraw.boxes: object expected");
                    m.boxes[i] = $root.SC2APIProtocol.DebugBox.fromObject(d.boxes[i]);
                }
            }
            if (d.spheres) {
                if (!Array.isArray(d.spheres))
                    throw TypeError(".SC2APIProtocol.DebugDraw.spheres: array expected");
                m.spheres = [];
                for (var i = 0; i < d.spheres.length; ++i) {
                    if (typeof d.spheres[i] !== "object")
                        throw TypeError(".SC2APIProtocol.DebugDraw.spheres: object expected");
                    m.spheres[i] = $root.SC2APIProtocol.DebugSphere.fromObject(d.spheres[i]);
                }
            }
            return m;
        };

        DebugDraw.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.text = [];
                d.lines = [];
                d.boxes = [];
                d.spheres = [];
            }
            if (m.text && m.text.length) {
                d.text = [];
                for (var j = 0; j < m.text.length; ++j) {
                    d.text[j] = $root.SC2APIProtocol.DebugText.toObject(m.text[j], o);
                }
            }
            if (m.lines && m.lines.length) {
                d.lines = [];
                for (var j = 0; j < m.lines.length; ++j) {
                    d.lines[j] = $root.SC2APIProtocol.DebugLine.toObject(m.lines[j], o);
                }
            }
            if (m.boxes && m.boxes.length) {
                d.boxes = [];
                for (var j = 0; j < m.boxes.length; ++j) {
                    d.boxes[j] = $root.SC2APIProtocol.DebugBox.toObject(m.boxes[j], o);
                }
            }
            if (m.spheres && m.spheres.length) {
                d.spheres = [];
                for (var j = 0; j < m.spheres.length; ++j) {
                    d.spheres[j] = $root.SC2APIProtocol.DebugSphere.toObject(m.spheres[j], o);
                }
            }
            return d;
        };

        DebugDraw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugDraw;
    })();

    SC2APIProtocol.Line = (function() {

        function Line(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Line.prototype.p0 = null;
        Line.prototype.p1 = null;

        Line.create = function create(properties) {
            return new Line(properties);
        };

        Line.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.p0 != null && Object.hasOwnProperty.call(m, "p0"))
                $root.SC2APIProtocol.Point.encode(m.p0, w.uint32(10).fork()).ldelim();
            if (m.p1 != null && Object.hasOwnProperty.call(m, "p1"))
                $root.SC2APIProtocol.Point.encode(m.p1, w.uint32(18).fork()).ldelim();
            return w;
        };

        Line.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Line.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Line();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.p0 = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 2:
                    m.p1 = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Line.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Line.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.p0 != null && m.hasOwnProperty("p0")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.p0);
                    if (e)
                        return "p0." + e;
                }
            }
            if (m.p1 != null && m.hasOwnProperty("p1")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.p1);
                    if (e)
                        return "p1." + e;
                }
            }
            return null;
        };

        Line.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Line)
                return d;
            var m = new $root.SC2APIProtocol.Line();
            if (d.p0 != null) {
                if (typeof d.p0 !== "object")
                    throw TypeError(".SC2APIProtocol.Line.p0: object expected");
                m.p0 = $root.SC2APIProtocol.Point.fromObject(d.p0);
            }
            if (d.p1 != null) {
                if (typeof d.p1 !== "object")
                    throw TypeError(".SC2APIProtocol.Line.p1: object expected");
                m.p1 = $root.SC2APIProtocol.Point.fromObject(d.p1);
            }
            return m;
        };

        Line.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.p0 = null;
                d.p1 = null;
            }
            if (m.p0 != null && m.hasOwnProperty("p0")) {
                d.p0 = $root.SC2APIProtocol.Point.toObject(m.p0, o);
            }
            if (m.p1 != null && m.hasOwnProperty("p1")) {
                d.p1 = $root.SC2APIProtocol.Point.toObject(m.p1, o);
            }
            return d;
        };

        Line.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Line;
    })();

    SC2APIProtocol.Color = (function() {

        function Color(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Color.prototype.r = 0;
        Color.prototype.g = 0;
        Color.prototype.b = 0;

        Color.create = function create(properties) {
            return new Color(properties);
        };

        Color.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.r != null && Object.hasOwnProperty.call(m, "r"))
                w.uint32(8).uint32(m.r);
            if (m.g != null && Object.hasOwnProperty.call(m, "g"))
                w.uint32(16).uint32(m.g);
            if (m.b != null && Object.hasOwnProperty.call(m, "b"))
                w.uint32(24).uint32(m.b);
            return w;
        };

        Color.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Color.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Color();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.r = r.uint32();
                    break;
                case 2:
                    m.g = r.uint32();
                    break;
                case 3:
                    m.b = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Color.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Color.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.r != null && m.hasOwnProperty("r")) {
                if (!$util.isInteger(m.r))
                    return "r: integer expected";
            }
            if (m.g != null && m.hasOwnProperty("g")) {
                if (!$util.isInteger(m.g))
                    return "g: integer expected";
            }
            if (m.b != null && m.hasOwnProperty("b")) {
                if (!$util.isInteger(m.b))
                    return "b: integer expected";
            }
            return null;
        };

        Color.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Color)
                return d;
            var m = new $root.SC2APIProtocol.Color();
            if (d.r != null) {
                m.r = d.r >>> 0;
            }
            if (d.g != null) {
                m.g = d.g >>> 0;
            }
            if (d.b != null) {
                m.b = d.b >>> 0;
            }
            return m;
        };

        Color.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.r = 0;
                d.g = 0;
                d.b = 0;
            }
            if (m.r != null && m.hasOwnProperty("r")) {
                d.r = m.r;
            }
            if (m.g != null && m.hasOwnProperty("g")) {
                d.g = m.g;
            }
            if (m.b != null && m.hasOwnProperty("b")) {
                d.b = m.b;
            }
            return d;
        };

        Color.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Color;
    })();

    SC2APIProtocol.DebugText = (function() {

        function DebugText(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugText.prototype.color = null;
        DebugText.prototype.text = "";
        DebugText.prototype.virtualPos = null;
        DebugText.prototype.worldPos = null;
        DebugText.prototype.size = 0;

        DebugText.create = function create(properties) {
            return new DebugText(properties);
        };

        DebugText.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.color != null && Object.hasOwnProperty.call(m, "color"))
                $root.SC2APIProtocol.Color.encode(m.color, w.uint32(10).fork()).ldelim();
            if (m.text != null && Object.hasOwnProperty.call(m, "text"))
                w.uint32(18).string(m.text);
            if (m.virtualPos != null && Object.hasOwnProperty.call(m, "virtualPos"))
                $root.SC2APIProtocol.Point.encode(m.virtualPos, w.uint32(26).fork()).ldelim();
            if (m.worldPos != null && Object.hasOwnProperty.call(m, "worldPos"))
                $root.SC2APIProtocol.Point.encode(m.worldPos, w.uint32(34).fork()).ldelim();
            if (m.size != null && Object.hasOwnProperty.call(m, "size"))
                w.uint32(40).uint32(m.size);
            return w;
        };

        DebugText.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugText.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugText();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.color = $root.SC2APIProtocol.Color.decode(r, r.uint32());
                    break;
                case 2:
                    m.text = r.string();
                    break;
                case 3:
                    m.virtualPos = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 4:
                    m.worldPos = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 5:
                    m.size = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugText.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugText.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.color != null && m.hasOwnProperty("color")) {
                {
                    var e = $root.SC2APIProtocol.Color.verify(m.color);
                    if (e)
                        return "color." + e;
                }
            }
            if (m.text != null && m.hasOwnProperty("text")) {
                if (!$util.isString(m.text))
                    return "text: string expected";
            }
            if (m.virtualPos != null && m.hasOwnProperty("virtualPos")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.virtualPos);
                    if (e)
                        return "virtualPos." + e;
                }
            }
            if (m.worldPos != null && m.hasOwnProperty("worldPos")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.worldPos);
                    if (e)
                        return "worldPos." + e;
                }
            }
            if (m.size != null && m.hasOwnProperty("size")) {
                if (!$util.isInteger(m.size))
                    return "size: integer expected";
            }
            return null;
        };

        DebugText.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugText)
                return d;
            var m = new $root.SC2APIProtocol.DebugText();
            if (d.color != null) {
                if (typeof d.color !== "object")
                    throw TypeError(".SC2APIProtocol.DebugText.color: object expected");
                m.color = $root.SC2APIProtocol.Color.fromObject(d.color);
            }
            if (d.text != null) {
                m.text = String(d.text);
            }
            if (d.virtualPos != null) {
                if (typeof d.virtualPos !== "object")
                    throw TypeError(".SC2APIProtocol.DebugText.virtualPos: object expected");
                m.virtualPos = $root.SC2APIProtocol.Point.fromObject(d.virtualPos);
            }
            if (d.worldPos != null) {
                if (typeof d.worldPos !== "object")
                    throw TypeError(".SC2APIProtocol.DebugText.worldPos: object expected");
                m.worldPos = $root.SC2APIProtocol.Point.fromObject(d.worldPos);
            }
            if (d.size != null) {
                m.size = d.size >>> 0;
            }
            return m;
        };

        DebugText.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.color = null;
                d.text = "";
                d.virtualPos = null;
                d.worldPos = null;
                d.size = 0;
            }
            if (m.color != null && m.hasOwnProperty("color")) {
                d.color = $root.SC2APIProtocol.Color.toObject(m.color, o);
            }
            if (m.text != null && m.hasOwnProperty("text")) {
                d.text = m.text;
            }
            if (m.virtualPos != null && m.hasOwnProperty("virtualPos")) {
                d.virtualPos = $root.SC2APIProtocol.Point.toObject(m.virtualPos, o);
            }
            if (m.worldPos != null && m.hasOwnProperty("worldPos")) {
                d.worldPos = $root.SC2APIProtocol.Point.toObject(m.worldPos, o);
            }
            if (m.size != null && m.hasOwnProperty("size")) {
                d.size = m.size;
            }
            return d;
        };

        DebugText.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugText;
    })();

    SC2APIProtocol.DebugLine = (function() {

        function DebugLine(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugLine.prototype.color = null;
        DebugLine.prototype.line = null;

        DebugLine.create = function create(properties) {
            return new DebugLine(properties);
        };

        DebugLine.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.color != null && Object.hasOwnProperty.call(m, "color"))
                $root.SC2APIProtocol.Color.encode(m.color, w.uint32(10).fork()).ldelim();
            if (m.line != null && Object.hasOwnProperty.call(m, "line"))
                $root.SC2APIProtocol.Line.encode(m.line, w.uint32(18).fork()).ldelim();
            return w;
        };

        DebugLine.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugLine.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugLine();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.color = $root.SC2APIProtocol.Color.decode(r, r.uint32());
                    break;
                case 2:
                    m.line = $root.SC2APIProtocol.Line.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugLine.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugLine.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.color != null && m.hasOwnProperty("color")) {
                {
                    var e = $root.SC2APIProtocol.Color.verify(m.color);
                    if (e)
                        return "color." + e;
                }
            }
            if (m.line != null && m.hasOwnProperty("line")) {
                {
                    var e = $root.SC2APIProtocol.Line.verify(m.line);
                    if (e)
                        return "line." + e;
                }
            }
            return null;
        };

        DebugLine.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugLine)
                return d;
            var m = new $root.SC2APIProtocol.DebugLine();
            if (d.color != null) {
                if (typeof d.color !== "object")
                    throw TypeError(".SC2APIProtocol.DebugLine.color: object expected");
                m.color = $root.SC2APIProtocol.Color.fromObject(d.color);
            }
            if (d.line != null) {
                if (typeof d.line !== "object")
                    throw TypeError(".SC2APIProtocol.DebugLine.line: object expected");
                m.line = $root.SC2APIProtocol.Line.fromObject(d.line);
            }
            return m;
        };

        DebugLine.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.color = null;
                d.line = null;
            }
            if (m.color != null && m.hasOwnProperty("color")) {
                d.color = $root.SC2APIProtocol.Color.toObject(m.color, o);
            }
            if (m.line != null && m.hasOwnProperty("line")) {
                d.line = $root.SC2APIProtocol.Line.toObject(m.line, o);
            }
            return d;
        };

        DebugLine.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugLine;
    })();

    SC2APIProtocol.DebugBox = (function() {

        function DebugBox(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugBox.prototype.color = null;
        DebugBox.prototype.min = null;
        DebugBox.prototype.max = null;

        DebugBox.create = function create(properties) {
            return new DebugBox(properties);
        };

        DebugBox.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.color != null && Object.hasOwnProperty.call(m, "color"))
                $root.SC2APIProtocol.Color.encode(m.color, w.uint32(10).fork()).ldelim();
            if (m.min != null && Object.hasOwnProperty.call(m, "min"))
                $root.SC2APIProtocol.Point.encode(m.min, w.uint32(18).fork()).ldelim();
            if (m.max != null && Object.hasOwnProperty.call(m, "max"))
                $root.SC2APIProtocol.Point.encode(m.max, w.uint32(26).fork()).ldelim();
            return w;
        };

        DebugBox.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugBox.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugBox();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.color = $root.SC2APIProtocol.Color.decode(r, r.uint32());
                    break;
                case 2:
                    m.min = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 3:
                    m.max = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugBox.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugBox.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.color != null && m.hasOwnProperty("color")) {
                {
                    var e = $root.SC2APIProtocol.Color.verify(m.color);
                    if (e)
                        return "color." + e;
                }
            }
            if (m.min != null && m.hasOwnProperty("min")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.min);
                    if (e)
                        return "min." + e;
                }
            }
            if (m.max != null && m.hasOwnProperty("max")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.max);
                    if (e)
                        return "max." + e;
                }
            }
            return null;
        };

        DebugBox.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugBox)
                return d;
            var m = new $root.SC2APIProtocol.DebugBox();
            if (d.color != null) {
                if (typeof d.color !== "object")
                    throw TypeError(".SC2APIProtocol.DebugBox.color: object expected");
                m.color = $root.SC2APIProtocol.Color.fromObject(d.color);
            }
            if (d.min != null) {
                if (typeof d.min !== "object")
                    throw TypeError(".SC2APIProtocol.DebugBox.min: object expected");
                m.min = $root.SC2APIProtocol.Point.fromObject(d.min);
            }
            if (d.max != null) {
                if (typeof d.max !== "object")
                    throw TypeError(".SC2APIProtocol.DebugBox.max: object expected");
                m.max = $root.SC2APIProtocol.Point.fromObject(d.max);
            }
            return m;
        };

        DebugBox.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.color = null;
                d.min = null;
                d.max = null;
            }
            if (m.color != null && m.hasOwnProperty("color")) {
                d.color = $root.SC2APIProtocol.Color.toObject(m.color, o);
            }
            if (m.min != null && m.hasOwnProperty("min")) {
                d.min = $root.SC2APIProtocol.Point.toObject(m.min, o);
            }
            if (m.max != null && m.hasOwnProperty("max")) {
                d.max = $root.SC2APIProtocol.Point.toObject(m.max, o);
            }
            return d;
        };

        DebugBox.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugBox;
    })();

    SC2APIProtocol.DebugSphere = (function() {

        function DebugSphere(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugSphere.prototype.color = null;
        DebugSphere.prototype.p = null;
        DebugSphere.prototype.r = 0;

        DebugSphere.create = function create(properties) {
            return new DebugSphere(properties);
        };

        DebugSphere.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.color != null && Object.hasOwnProperty.call(m, "color"))
                $root.SC2APIProtocol.Color.encode(m.color, w.uint32(10).fork()).ldelim();
            if (m.p != null && Object.hasOwnProperty.call(m, "p"))
                $root.SC2APIProtocol.Point.encode(m.p, w.uint32(18).fork()).ldelim();
            if (m.r != null && Object.hasOwnProperty.call(m, "r"))
                w.uint32(29).float(m.r);
            return w;
        };

        DebugSphere.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugSphere.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugSphere();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.color = $root.SC2APIProtocol.Color.decode(r, r.uint32());
                    break;
                case 2:
                    m.p = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 3:
                    m.r = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugSphere.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugSphere.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.color != null && m.hasOwnProperty("color")) {
                {
                    var e = $root.SC2APIProtocol.Color.verify(m.color);
                    if (e)
                        return "color." + e;
                }
            }
            if (m.p != null && m.hasOwnProperty("p")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.p);
                    if (e)
                        return "p." + e;
                }
            }
            if (m.r != null && m.hasOwnProperty("r")) {
                if (typeof m.r !== "number")
                    return "r: number expected";
            }
            return null;
        };

        DebugSphere.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugSphere)
                return d;
            var m = new $root.SC2APIProtocol.DebugSphere();
            if (d.color != null) {
                if (typeof d.color !== "object")
                    throw TypeError(".SC2APIProtocol.DebugSphere.color: object expected");
                m.color = $root.SC2APIProtocol.Color.fromObject(d.color);
            }
            if (d.p != null) {
                if (typeof d.p !== "object")
                    throw TypeError(".SC2APIProtocol.DebugSphere.p: object expected");
                m.p = $root.SC2APIProtocol.Point.fromObject(d.p);
            }
            if (d.r != null) {
                m.r = Number(d.r);
            }
            return m;
        };

        DebugSphere.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.color = null;
                d.p = null;
                d.r = 0;
            }
            if (m.color != null && m.hasOwnProperty("color")) {
                d.color = $root.SC2APIProtocol.Color.toObject(m.color, o);
            }
            if (m.p != null && m.hasOwnProperty("p")) {
                d.p = $root.SC2APIProtocol.Point.toObject(m.p, o);
            }
            if (m.r != null && m.hasOwnProperty("r")) {
                d.r = o.json && !isFinite(m.r) ? String(m.r) : m.r;
            }
            return d;
        };

        DebugSphere.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugSphere;
    })();

    SC2APIProtocol.DebugGameState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "show_map"] = 1;
        values[valuesById[2] = "control_enemy"] = 2;
        values[valuesById[3] = "food"] = 3;
        values[valuesById[4] = "free"] = 4;
        values[valuesById[5] = "all_resources"] = 5;
        values[valuesById[6] = "god"] = 6;
        values[valuesById[7] = "minerals"] = 7;
        values[valuesById[8] = "gas"] = 8;
        values[valuesById[9] = "cooldown"] = 9;
        values[valuesById[10] = "tech_tree"] = 10;
        values[valuesById[11] = "upgrade"] = 11;
        values[valuesById[12] = "fast_build"] = 12;
        return values;
    })();

    SC2APIProtocol.DebugCreateUnit = (function() {

        function DebugCreateUnit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugCreateUnit.prototype.unitType = 0;
        DebugCreateUnit.prototype.owner = 0;
        DebugCreateUnit.prototype.pos = null;
        DebugCreateUnit.prototype.quantity = 0;

        DebugCreateUnit.create = function create(properties) {
            return new DebugCreateUnit(properties);
        };

        DebugCreateUnit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitType != null && Object.hasOwnProperty.call(m, "unitType"))
                w.uint32(8).uint32(m.unitType);
            if (m.owner != null && Object.hasOwnProperty.call(m, "owner"))
                w.uint32(16).int32(m.owner);
            if (m.pos != null && Object.hasOwnProperty.call(m, "pos"))
                $root.SC2APIProtocol.Point2D.encode(m.pos, w.uint32(26).fork()).ldelim();
            if (m.quantity != null && Object.hasOwnProperty.call(m, "quantity"))
                w.uint32(32).uint32(m.quantity);
            return w;
        };

        DebugCreateUnit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugCreateUnit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugCreateUnit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitType = r.uint32();
                    break;
                case 2:
                    m.owner = r.int32();
                    break;
                case 3:
                    m.pos = $root.SC2APIProtocol.Point2D.decode(r, r.uint32());
                    break;
                case 4:
                    m.quantity = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugCreateUnit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugCreateUnit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                if (!$util.isInteger(m.unitType))
                    return "unitType: integer expected";
            }
            if (m.owner != null && m.hasOwnProperty("owner")) {
                if (!$util.isInteger(m.owner))
                    return "owner: integer expected";
            }
            if (m.pos != null && m.hasOwnProperty("pos")) {
                {
                    var e = $root.SC2APIProtocol.Point2D.verify(m.pos);
                    if (e)
                        return "pos." + e;
                }
            }
            if (m.quantity != null && m.hasOwnProperty("quantity")) {
                if (!$util.isInteger(m.quantity))
                    return "quantity: integer expected";
            }
            return null;
        };

        DebugCreateUnit.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugCreateUnit)
                return d;
            var m = new $root.SC2APIProtocol.DebugCreateUnit();
            if (d.unitType != null) {
                m.unitType = d.unitType >>> 0;
            }
            if (d.owner != null) {
                m.owner = d.owner | 0;
            }
            if (d.pos != null) {
                if (typeof d.pos !== "object")
                    throw TypeError(".SC2APIProtocol.DebugCreateUnit.pos: object expected");
                m.pos = $root.SC2APIProtocol.Point2D.fromObject(d.pos);
            }
            if (d.quantity != null) {
                m.quantity = d.quantity >>> 0;
            }
            return m;
        };

        DebugCreateUnit.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.unitType = 0;
                d.owner = 0;
                d.pos = null;
                d.quantity = 0;
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                d.unitType = m.unitType;
            }
            if (m.owner != null && m.hasOwnProperty("owner")) {
                d.owner = m.owner;
            }
            if (m.pos != null && m.hasOwnProperty("pos")) {
                d.pos = $root.SC2APIProtocol.Point2D.toObject(m.pos, o);
            }
            if (m.quantity != null && m.hasOwnProperty("quantity")) {
                d.quantity = m.quantity;
            }
            return d;
        };

        DebugCreateUnit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugCreateUnit;
    })();

    SC2APIProtocol.DebugKillUnit = (function() {

        function DebugKillUnit(p) {
            this.tag = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugKillUnit.prototype.tag = $util.emptyArray;

        DebugKillUnit.create = function create(properties) {
            return new DebugKillUnit(properties);
        };

        DebugKillUnit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.tag != null && m.tag.length) {
                for (var i = 0; i < m.tag.length; ++i)
                    w.uint32(8).uint64(m.tag[i]);
            }
            return w;
        };

        DebugKillUnit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugKillUnit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugKillUnit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.tag && m.tag.length))
                        m.tag = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.tag.push(r.uint64());
                    } else
                        m.tag.push(r.uint64());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugKillUnit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugKillUnit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (!Array.isArray(m.tag))
                    return "tag: array expected";
                for (var i = 0; i < m.tag.length; ++i) {
                    if (!$util.isInteger(m.tag[i]) && !(m.tag[i] && $util.isInteger(m.tag[i].low) && $util.isInteger(m.tag[i].high)))
                        return "tag: integer|Long[] expected";
                }
            }
            return null;
        };

        DebugKillUnit.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugKillUnit)
                return d;
            var m = new $root.SC2APIProtocol.DebugKillUnit();
            if (d.tag) {
                if (!Array.isArray(d.tag))
                    throw TypeError(".SC2APIProtocol.DebugKillUnit.tag: array expected");
                m.tag = [];
                for (var i = 0; i < d.tag.length; ++i) {
                    if ($util.Long)
                        (m.tag[i] = $util.Long.fromValue(d.tag[i])).unsigned = true;
                    else if (typeof d.tag[i] === "string")
                        m.tag[i] = parseInt(d.tag[i], 10);
                    else if (typeof d.tag[i] === "number")
                        m.tag[i] = d.tag[i];
                    else if (typeof d.tag[i] === "object")
                        m.tag[i] = new $util.LongBits(d.tag[i].low >>> 0, d.tag[i].high >>> 0).toNumber(true);
                }
            }
            return m;
        };

        DebugKillUnit.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.tag = [];
            }
            if (m.tag && m.tag.length) {
                d.tag = [];
                for (var j = 0; j < m.tag.length; ++j) {
                    if (typeof m.tag[j] === "number")
                        d.tag[j] = o.longs === String ? String(m.tag[j]) : m.tag[j];
                    else
                        d.tag[j] = o.longs === String ? $util.Long.prototype.toString.call(m.tag[j]) : o.longs === Number ? new $util.LongBits(m.tag[j].low >>> 0, m.tag[j].high >>> 0).toNumber(true) : m.tag[j];
                }
            }
            return d;
        };

        DebugKillUnit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugKillUnit;
    })();

    SC2APIProtocol.DebugTestProcess = (function() {

        function DebugTestProcess(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugTestProcess.prototype.test = 1;
        DebugTestProcess.prototype.delayMs = 0;

        DebugTestProcess.create = function create(properties) {
            return new DebugTestProcess(properties);
        };

        DebugTestProcess.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.test != null && Object.hasOwnProperty.call(m, "test"))
                w.uint32(8).int32(m.test);
            if (m.delayMs != null && Object.hasOwnProperty.call(m, "delayMs"))
                w.uint32(16).int32(m.delayMs);
            return w;
        };

        DebugTestProcess.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugTestProcess.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugTestProcess();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.test = r.int32();
                    break;
                case 2:
                    m.delayMs = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugTestProcess.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugTestProcess.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.test != null && m.hasOwnProperty("test")) {
                switch (m.test) {
                default:
                    return "test: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            if (m.delayMs != null && m.hasOwnProperty("delayMs")) {
                if (!$util.isInteger(m.delayMs))
                    return "delayMs: integer expected";
            }
            return null;
        };

        DebugTestProcess.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugTestProcess)
                return d;
            var m = new $root.SC2APIProtocol.DebugTestProcess();
            switch (d.test) {
            case "hang":
            case 1:
                m.test = 1;
                break;
            case "crash":
            case 2:
                m.test = 2;
                break;
            case "exit":
            case 3:
                m.test = 3;
                break;
            }
            if (d.delayMs != null) {
                m.delayMs = d.delayMs | 0;
            }
            return m;
        };

        DebugTestProcess.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.test = o.enums === String ? "hang" : 1;
                d.delayMs = 0;
            }
            if (m.test != null && m.hasOwnProperty("test")) {
                d.test = o.enums === String ? $root.SC2APIProtocol.DebugTestProcess.Test[m.test] : m.test;
            }
            if (m.delayMs != null && m.hasOwnProperty("delayMs")) {
                d.delayMs = m.delayMs;
            }
            return d;
        };

        DebugTestProcess.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        DebugTestProcess.Test = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "hang"] = 1;
            values[valuesById[2] = "crash"] = 2;
            values[valuesById[3] = "exit"] = 3;
            return values;
        })();

        return DebugTestProcess;
    })();

    SC2APIProtocol.DebugSetScore = (function() {

        function DebugSetScore(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugSetScore.prototype.score = 0;

        DebugSetScore.create = function create(properties) {
            return new DebugSetScore(properties);
        };

        DebugSetScore.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(13).float(m.score);
            return w;
        };

        DebugSetScore.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugSetScore.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugSetScore();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.score = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugSetScore.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugSetScore.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.score != null && m.hasOwnProperty("score")) {
                if (typeof m.score !== "number")
                    return "score: number expected";
            }
            return null;
        };

        DebugSetScore.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugSetScore)
                return d;
            var m = new $root.SC2APIProtocol.DebugSetScore();
            if (d.score != null) {
                m.score = Number(d.score);
            }
            return m;
        };

        DebugSetScore.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.score = 0;
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                d.score = o.json && !isFinite(m.score) ? String(m.score) : m.score;
            }
            return d;
        };

        DebugSetScore.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DebugSetScore;
    })();

    SC2APIProtocol.DebugEndGame = (function() {

        function DebugEndGame(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugEndGame.prototype.endResult = 1;

        DebugEndGame.create = function create(properties) {
            return new DebugEndGame(properties);
        };

        DebugEndGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.endResult != null && Object.hasOwnProperty.call(m, "endResult"))
                w.uint32(8).int32(m.endResult);
            return w;
        };

        DebugEndGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugEndGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugEndGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.endResult = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugEndGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugEndGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.endResult != null && m.hasOwnProperty("endResult")) {
                switch (m.endResult) {
                default:
                    return "endResult: enum value expected";
                case 1:
                case 2:
                    break;
                }
            }
            return null;
        };

        DebugEndGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugEndGame)
                return d;
            var m = new $root.SC2APIProtocol.DebugEndGame();
            switch (d.endResult) {
            case "Surrender":
            case 1:
                m.endResult = 1;
                break;
            case "DeclareVictory":
            case 2:
                m.endResult = 2;
                break;
            }
            return m;
        };

        DebugEndGame.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.endResult = o.enums === String ? "Surrender" : 1;
            }
            if (m.endResult != null && m.hasOwnProperty("endResult")) {
                d.endResult = o.enums === String ? $root.SC2APIProtocol.DebugEndGame.EndResult[m.endResult] : m.endResult;
            }
            return d;
        };

        DebugEndGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        DebugEndGame.EndResult = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "Surrender"] = 1;
            values[valuesById[2] = "DeclareVictory"] = 2;
            return values;
        })();

        return DebugEndGame;
    })();

    SC2APIProtocol.DebugSetUnitValue = (function() {

        function DebugSetUnitValue(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DebugSetUnitValue.prototype.unitValue = 1;
        DebugSetUnitValue.prototype.value = 0;
        DebugSetUnitValue.prototype.unitTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        DebugSetUnitValue.create = function create(properties) {
            return new DebugSetUnitValue(properties);
        };

        DebugSetUnitValue.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitValue != null && Object.hasOwnProperty.call(m, "unitValue"))
                w.uint32(8).int32(m.unitValue);
            if (m.value != null && Object.hasOwnProperty.call(m, "value"))
                w.uint32(21).float(m.value);
            if (m.unitTag != null && Object.hasOwnProperty.call(m, "unitTag"))
                w.uint32(24).uint64(m.unitTag);
            return w;
        };

        DebugSetUnitValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DebugSetUnitValue.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DebugSetUnitValue();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitValue = r.int32();
                    break;
                case 2:
                    m.value = r.float();
                    break;
                case 3:
                    m.unitTag = r.uint64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DebugSetUnitValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DebugSetUnitValue.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitValue != null && m.hasOwnProperty("unitValue")) {
                switch (m.unitValue) {
                default:
                    return "unitValue: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            if (m.value != null && m.hasOwnProperty("value")) {
                if (typeof m.value !== "number")
                    return "value: number expected";
            }
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (!$util.isInteger(m.unitTag) && !(m.unitTag && $util.isInteger(m.unitTag.low) && $util.isInteger(m.unitTag.high)))
                    return "unitTag: integer|Long expected";
            }
            return null;
        };

        DebugSetUnitValue.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DebugSetUnitValue)
                return d;
            var m = new $root.SC2APIProtocol.DebugSetUnitValue();
            switch (d.unitValue) {
            case "Energy":
            case 1:
                m.unitValue = 1;
                break;
            case "Life":
            case 2:
                m.unitValue = 2;
                break;
            case "Shields":
            case 3:
                m.unitValue = 3;
                break;
            }
            if (d.value != null) {
                m.value = Number(d.value);
            }
            if (d.unitTag != null) {
                if ($util.Long)
                    (m.unitTag = $util.Long.fromValue(d.unitTag)).unsigned = true;
                else if (typeof d.unitTag === "string")
                    m.unitTag = parseInt(d.unitTag, 10);
                else if (typeof d.unitTag === "number")
                    m.unitTag = d.unitTag;
                else if (typeof d.unitTag === "object")
                    m.unitTag = new $util.LongBits(d.unitTag.low >>> 0, d.unitTag.high >>> 0).toNumber(true);
            }
            return m;
        };

        DebugSetUnitValue.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.unitValue = o.enums === String ? "Energy" : 1;
                d.value = 0;
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.unitTag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.unitTag = o.longs === String ? "0" : 0;
            }
            if (m.unitValue != null && m.hasOwnProperty("unitValue")) {
                d.unitValue = o.enums === String ? $root.SC2APIProtocol.DebugSetUnitValue.UnitValue[m.unitValue] : m.unitValue;
            }
            if (m.value != null && m.hasOwnProperty("value")) {
                d.value = o.json && !isFinite(m.value) ? String(m.value) : m.value;
            }
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (typeof m.unitTag === "number")
                    d.unitTag = o.longs === String ? String(m.unitTag) : m.unitTag;
                else
                    d.unitTag = o.longs === String ? $util.Long.prototype.toString.call(m.unitTag) : o.longs === Number ? new $util.LongBits(m.unitTag.low >>> 0, m.unitTag.high >>> 0).toNumber(true) : m.unitTag;
            }
            return d;
        };

        DebugSetUnitValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        DebugSetUnitValue.UnitValue = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "Energy"] = 1;
            values[valuesById[2] = "Life"] = 2;
            values[valuesById[3] = "Shields"] = 3;
            return values;
        })();

        return DebugSetUnitValue;
    })();

    SC2APIProtocol.ObservationFeatureLayer = (function() {

        function ObservationFeatureLayer(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ObservationFeatureLayer.prototype.renders = null;
        ObservationFeatureLayer.prototype.minimapRenders = null;

        ObservationFeatureLayer.create = function create(properties) {
            return new ObservationFeatureLayer(properties);
        };

        ObservationFeatureLayer.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.renders != null && Object.hasOwnProperty.call(m, "renders"))
                $root.SC2APIProtocol.FeatureLayers.encode(m.renders, w.uint32(10).fork()).ldelim();
            if (m.minimapRenders != null && Object.hasOwnProperty.call(m, "minimapRenders"))
                $root.SC2APIProtocol.FeatureLayersMinimap.encode(m.minimapRenders, w.uint32(18).fork()).ldelim();
            return w;
        };

        ObservationFeatureLayer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ObservationFeatureLayer.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ObservationFeatureLayer();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.renders = $root.SC2APIProtocol.FeatureLayers.decode(r, r.uint32());
                    break;
                case 2:
                    m.minimapRenders = $root.SC2APIProtocol.FeatureLayersMinimap.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ObservationFeatureLayer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ObservationFeatureLayer.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.renders != null && m.hasOwnProperty("renders")) {
                {
                    var e = $root.SC2APIProtocol.FeatureLayers.verify(m.renders);
                    if (e)
                        return "renders." + e;
                }
            }
            if (m.minimapRenders != null && m.hasOwnProperty("minimapRenders")) {
                {
                    var e = $root.SC2APIProtocol.FeatureLayersMinimap.verify(m.minimapRenders);
                    if (e)
                        return "minimapRenders." + e;
                }
            }
            return null;
        };

        ObservationFeatureLayer.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ObservationFeatureLayer)
                return d;
            var m = new $root.SC2APIProtocol.ObservationFeatureLayer();
            if (d.renders != null) {
                if (typeof d.renders !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationFeatureLayer.renders: object expected");
                m.renders = $root.SC2APIProtocol.FeatureLayers.fromObject(d.renders);
            }
            if (d.minimapRenders != null) {
                if (typeof d.minimapRenders !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationFeatureLayer.minimapRenders: object expected");
                m.minimapRenders = $root.SC2APIProtocol.FeatureLayersMinimap.fromObject(d.minimapRenders);
            }
            return m;
        };

        ObservationFeatureLayer.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.renders = null;
                d.minimapRenders = null;
            }
            if (m.renders != null && m.hasOwnProperty("renders")) {
                d.renders = $root.SC2APIProtocol.FeatureLayers.toObject(m.renders, o);
            }
            if (m.minimapRenders != null && m.hasOwnProperty("minimapRenders")) {
                d.minimapRenders = $root.SC2APIProtocol.FeatureLayersMinimap.toObject(m.minimapRenders, o);
            }
            return d;
        };

        ObservationFeatureLayer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ObservationFeatureLayer;
    })();

    SC2APIProtocol.FeatureLayers = (function() {

        function FeatureLayers(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        FeatureLayers.prototype.heightMap = null;
        FeatureLayers.prototype.visibilityMap = null;
        FeatureLayers.prototype.creep = null;
        FeatureLayers.prototype.power = null;
        FeatureLayers.prototype.playerId = null;
        FeatureLayers.prototype.unitType = null;
        FeatureLayers.prototype.selected = null;
        FeatureLayers.prototype.unitHitPoints = null;
        FeatureLayers.prototype.unitHitPointsRatio = null;
        FeatureLayers.prototype.unitEnergy = null;
        FeatureLayers.prototype.unitEnergyRatio = null;
        FeatureLayers.prototype.unitShields = null;
        FeatureLayers.prototype.unitShieldsRatio = null;
        FeatureLayers.prototype.playerRelative = null;
        FeatureLayers.prototype.unitDensityAa = null;
        FeatureLayers.prototype.unitDensity = null;
        FeatureLayers.prototype.effects = null;
        FeatureLayers.prototype.hallucinations = null;
        FeatureLayers.prototype.cloaked = null;
        FeatureLayers.prototype.blip = null;
        FeatureLayers.prototype.buffs = null;
        FeatureLayers.prototype.buffDuration = null;
        FeatureLayers.prototype.active = null;
        FeatureLayers.prototype.buildProgress = null;
        FeatureLayers.prototype.buildable = null;
        FeatureLayers.prototype.pathable = null;
        FeatureLayers.prototype.placeholder = null;

        FeatureLayers.create = function create(properties) {
            return new FeatureLayers(properties);
        };

        FeatureLayers.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.heightMap != null && Object.hasOwnProperty.call(m, "heightMap"))
                $root.SC2APIProtocol.ImageData.encode(m.heightMap, w.uint32(10).fork()).ldelim();
            if (m.visibilityMap != null && Object.hasOwnProperty.call(m, "visibilityMap"))
                $root.SC2APIProtocol.ImageData.encode(m.visibilityMap, w.uint32(18).fork()).ldelim();
            if (m.creep != null && Object.hasOwnProperty.call(m, "creep"))
                $root.SC2APIProtocol.ImageData.encode(m.creep, w.uint32(26).fork()).ldelim();
            if (m.power != null && Object.hasOwnProperty.call(m, "power"))
                $root.SC2APIProtocol.ImageData.encode(m.power, w.uint32(34).fork()).ldelim();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                $root.SC2APIProtocol.ImageData.encode(m.playerId, w.uint32(42).fork()).ldelim();
            if (m.unitType != null && Object.hasOwnProperty.call(m, "unitType"))
                $root.SC2APIProtocol.ImageData.encode(m.unitType, w.uint32(50).fork()).ldelim();
            if (m.selected != null && Object.hasOwnProperty.call(m, "selected"))
                $root.SC2APIProtocol.ImageData.encode(m.selected, w.uint32(58).fork()).ldelim();
            if (m.unitHitPoints != null && Object.hasOwnProperty.call(m, "unitHitPoints"))
                $root.SC2APIProtocol.ImageData.encode(m.unitHitPoints, w.uint32(66).fork()).ldelim();
            if (m.unitEnergy != null && Object.hasOwnProperty.call(m, "unitEnergy"))
                $root.SC2APIProtocol.ImageData.encode(m.unitEnergy, w.uint32(74).fork()).ldelim();
            if (m.unitShields != null && Object.hasOwnProperty.call(m, "unitShields"))
                $root.SC2APIProtocol.ImageData.encode(m.unitShields, w.uint32(82).fork()).ldelim();
            if (m.playerRelative != null && Object.hasOwnProperty.call(m, "playerRelative"))
                $root.SC2APIProtocol.ImageData.encode(m.playerRelative, w.uint32(90).fork()).ldelim();
            if (m.unitDensityAa != null && Object.hasOwnProperty.call(m, "unitDensityAa"))
                $root.SC2APIProtocol.ImageData.encode(m.unitDensityAa, w.uint32(114).fork()).ldelim();
            if (m.unitDensity != null && Object.hasOwnProperty.call(m, "unitDensity"))
                $root.SC2APIProtocol.ImageData.encode(m.unitDensity, w.uint32(122).fork()).ldelim();
            if (m.unitHitPointsRatio != null && Object.hasOwnProperty.call(m, "unitHitPointsRatio"))
                $root.SC2APIProtocol.ImageData.encode(m.unitHitPointsRatio, w.uint32(138).fork()).ldelim();
            if (m.unitEnergyRatio != null && Object.hasOwnProperty.call(m, "unitEnergyRatio"))
                $root.SC2APIProtocol.ImageData.encode(m.unitEnergyRatio, w.uint32(146).fork()).ldelim();
            if (m.unitShieldsRatio != null && Object.hasOwnProperty.call(m, "unitShieldsRatio"))
                $root.SC2APIProtocol.ImageData.encode(m.unitShieldsRatio, w.uint32(154).fork()).ldelim();
            if (m.effects != null && Object.hasOwnProperty.call(m, "effects"))
                $root.SC2APIProtocol.ImageData.encode(m.effects, w.uint32(162).fork()).ldelim();
            if (m.hallucinations != null && Object.hasOwnProperty.call(m, "hallucinations"))
                $root.SC2APIProtocol.ImageData.encode(m.hallucinations, w.uint32(170).fork()).ldelim();
            if (m.cloaked != null && Object.hasOwnProperty.call(m, "cloaked"))
                $root.SC2APIProtocol.ImageData.encode(m.cloaked, w.uint32(178).fork()).ldelim();
            if (m.blip != null && Object.hasOwnProperty.call(m, "blip"))
                $root.SC2APIProtocol.ImageData.encode(m.blip, w.uint32(186).fork()).ldelim();
            if (m.buffs != null && Object.hasOwnProperty.call(m, "buffs"))
                $root.SC2APIProtocol.ImageData.encode(m.buffs, w.uint32(194).fork()).ldelim();
            if (m.active != null && Object.hasOwnProperty.call(m, "active"))
                $root.SC2APIProtocol.ImageData.encode(m.active, w.uint32(202).fork()).ldelim();
            if (m.buffDuration != null && Object.hasOwnProperty.call(m, "buffDuration"))
                $root.SC2APIProtocol.ImageData.encode(m.buffDuration, w.uint32(210).fork()).ldelim();
            if (m.buildProgress != null && Object.hasOwnProperty.call(m, "buildProgress"))
                $root.SC2APIProtocol.ImageData.encode(m.buildProgress, w.uint32(218).fork()).ldelim();
            if (m.buildable != null && Object.hasOwnProperty.call(m, "buildable"))
                $root.SC2APIProtocol.ImageData.encode(m.buildable, w.uint32(226).fork()).ldelim();
            if (m.pathable != null && Object.hasOwnProperty.call(m, "pathable"))
                $root.SC2APIProtocol.ImageData.encode(m.pathable, w.uint32(234).fork()).ldelim();
            if (m.placeholder != null && Object.hasOwnProperty.call(m, "placeholder"))
                $root.SC2APIProtocol.ImageData.encode(m.placeholder, w.uint32(242).fork()).ldelim();
            return w;
        };

        FeatureLayers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        FeatureLayers.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.FeatureLayers();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.heightMap = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 2:
                    m.visibilityMap = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 3:
                    m.creep = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 4:
                    m.power = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 5:
                    m.playerId = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 6:
                    m.unitType = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 7:
                    m.selected = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 8:
                    m.unitHitPoints = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 17:
                    m.unitHitPointsRatio = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 9:
                    m.unitEnergy = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 18:
                    m.unitEnergyRatio = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 10:
                    m.unitShields = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 19:
                    m.unitShieldsRatio = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 11:
                    m.playerRelative = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 14:
                    m.unitDensityAa = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 15:
                    m.unitDensity = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 20:
                    m.effects = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 21:
                    m.hallucinations = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 22:
                    m.cloaked = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 23:
                    m.blip = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 24:
                    m.buffs = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 26:
                    m.buffDuration = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 25:
                    m.active = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 27:
                    m.buildProgress = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 28:
                    m.buildable = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 29:
                    m.pathable = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 30:
                    m.placeholder = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        FeatureLayers.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        FeatureLayers.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.heightMap != null && m.hasOwnProperty("heightMap")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.heightMap);
                    if (e)
                        return "heightMap." + e;
                }
            }
            if (m.visibilityMap != null && m.hasOwnProperty("visibilityMap")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.visibilityMap);
                    if (e)
                        return "visibilityMap." + e;
                }
            }
            if (m.creep != null && m.hasOwnProperty("creep")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.creep);
                    if (e)
                        return "creep." + e;
                }
            }
            if (m.power != null && m.hasOwnProperty("power")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.power);
                    if (e)
                        return "power." + e;
                }
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.playerId);
                    if (e)
                        return "playerId." + e;
                }
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitType);
                    if (e)
                        return "unitType." + e;
                }
            }
            if (m.selected != null && m.hasOwnProperty("selected")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.selected);
                    if (e)
                        return "selected." + e;
                }
            }
            if (m.unitHitPoints != null && m.hasOwnProperty("unitHitPoints")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitHitPoints);
                    if (e)
                        return "unitHitPoints." + e;
                }
            }
            if (m.unitHitPointsRatio != null && m.hasOwnProperty("unitHitPointsRatio")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitHitPointsRatio);
                    if (e)
                        return "unitHitPointsRatio." + e;
                }
            }
            if (m.unitEnergy != null && m.hasOwnProperty("unitEnergy")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitEnergy);
                    if (e)
                        return "unitEnergy." + e;
                }
            }
            if (m.unitEnergyRatio != null && m.hasOwnProperty("unitEnergyRatio")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitEnergyRatio);
                    if (e)
                        return "unitEnergyRatio." + e;
                }
            }
            if (m.unitShields != null && m.hasOwnProperty("unitShields")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitShields);
                    if (e)
                        return "unitShields." + e;
                }
            }
            if (m.unitShieldsRatio != null && m.hasOwnProperty("unitShieldsRatio")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitShieldsRatio);
                    if (e)
                        return "unitShieldsRatio." + e;
                }
            }
            if (m.playerRelative != null && m.hasOwnProperty("playerRelative")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.playerRelative);
                    if (e)
                        return "playerRelative." + e;
                }
            }
            if (m.unitDensityAa != null && m.hasOwnProperty("unitDensityAa")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitDensityAa);
                    if (e)
                        return "unitDensityAa." + e;
                }
            }
            if (m.unitDensity != null && m.hasOwnProperty("unitDensity")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitDensity);
                    if (e)
                        return "unitDensity." + e;
                }
            }
            if (m.effects != null && m.hasOwnProperty("effects")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.effects);
                    if (e)
                        return "effects." + e;
                }
            }
            if (m.hallucinations != null && m.hasOwnProperty("hallucinations")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.hallucinations);
                    if (e)
                        return "hallucinations." + e;
                }
            }
            if (m.cloaked != null && m.hasOwnProperty("cloaked")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.cloaked);
                    if (e)
                        return "cloaked." + e;
                }
            }
            if (m.blip != null && m.hasOwnProperty("blip")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.blip);
                    if (e)
                        return "blip." + e;
                }
            }
            if (m.buffs != null && m.hasOwnProperty("buffs")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.buffs);
                    if (e)
                        return "buffs." + e;
                }
            }
            if (m.buffDuration != null && m.hasOwnProperty("buffDuration")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.buffDuration);
                    if (e)
                        return "buffDuration." + e;
                }
            }
            if (m.active != null && m.hasOwnProperty("active")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.active);
                    if (e)
                        return "active." + e;
                }
            }
            if (m.buildProgress != null && m.hasOwnProperty("buildProgress")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.buildProgress);
                    if (e)
                        return "buildProgress." + e;
                }
            }
            if (m.buildable != null && m.hasOwnProperty("buildable")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.buildable);
                    if (e)
                        return "buildable." + e;
                }
            }
            if (m.pathable != null && m.hasOwnProperty("pathable")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.pathable);
                    if (e)
                        return "pathable." + e;
                }
            }
            if (m.placeholder != null && m.hasOwnProperty("placeholder")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.placeholder);
                    if (e)
                        return "placeholder." + e;
                }
            }
            return null;
        };

        FeatureLayers.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.FeatureLayers)
                return d;
            var m = new $root.SC2APIProtocol.FeatureLayers();
            if (d.heightMap != null) {
                if (typeof d.heightMap !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.heightMap: object expected");
                m.heightMap = $root.SC2APIProtocol.ImageData.fromObject(d.heightMap);
            }
            if (d.visibilityMap != null) {
                if (typeof d.visibilityMap !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.visibilityMap: object expected");
                m.visibilityMap = $root.SC2APIProtocol.ImageData.fromObject(d.visibilityMap);
            }
            if (d.creep != null) {
                if (typeof d.creep !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.creep: object expected");
                m.creep = $root.SC2APIProtocol.ImageData.fromObject(d.creep);
            }
            if (d.power != null) {
                if (typeof d.power !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.power: object expected");
                m.power = $root.SC2APIProtocol.ImageData.fromObject(d.power);
            }
            if (d.playerId != null) {
                if (typeof d.playerId !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.playerId: object expected");
                m.playerId = $root.SC2APIProtocol.ImageData.fromObject(d.playerId);
            }
            if (d.unitType != null) {
                if (typeof d.unitType !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitType: object expected");
                m.unitType = $root.SC2APIProtocol.ImageData.fromObject(d.unitType);
            }
            if (d.selected != null) {
                if (typeof d.selected !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.selected: object expected");
                m.selected = $root.SC2APIProtocol.ImageData.fromObject(d.selected);
            }
            if (d.unitHitPoints != null) {
                if (typeof d.unitHitPoints !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitHitPoints: object expected");
                m.unitHitPoints = $root.SC2APIProtocol.ImageData.fromObject(d.unitHitPoints);
            }
            if (d.unitHitPointsRatio != null) {
                if (typeof d.unitHitPointsRatio !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitHitPointsRatio: object expected");
                m.unitHitPointsRatio = $root.SC2APIProtocol.ImageData.fromObject(d.unitHitPointsRatio);
            }
            if (d.unitEnergy != null) {
                if (typeof d.unitEnergy !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitEnergy: object expected");
                m.unitEnergy = $root.SC2APIProtocol.ImageData.fromObject(d.unitEnergy);
            }
            if (d.unitEnergyRatio != null) {
                if (typeof d.unitEnergyRatio !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitEnergyRatio: object expected");
                m.unitEnergyRatio = $root.SC2APIProtocol.ImageData.fromObject(d.unitEnergyRatio);
            }
            if (d.unitShields != null) {
                if (typeof d.unitShields !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitShields: object expected");
                m.unitShields = $root.SC2APIProtocol.ImageData.fromObject(d.unitShields);
            }
            if (d.unitShieldsRatio != null) {
                if (typeof d.unitShieldsRatio !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitShieldsRatio: object expected");
                m.unitShieldsRatio = $root.SC2APIProtocol.ImageData.fromObject(d.unitShieldsRatio);
            }
            if (d.playerRelative != null) {
                if (typeof d.playerRelative !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.playerRelative: object expected");
                m.playerRelative = $root.SC2APIProtocol.ImageData.fromObject(d.playerRelative);
            }
            if (d.unitDensityAa != null) {
                if (typeof d.unitDensityAa !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitDensityAa: object expected");
                m.unitDensityAa = $root.SC2APIProtocol.ImageData.fromObject(d.unitDensityAa);
            }
            if (d.unitDensity != null) {
                if (typeof d.unitDensity !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.unitDensity: object expected");
                m.unitDensity = $root.SC2APIProtocol.ImageData.fromObject(d.unitDensity);
            }
            if (d.effects != null) {
                if (typeof d.effects !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.effects: object expected");
                m.effects = $root.SC2APIProtocol.ImageData.fromObject(d.effects);
            }
            if (d.hallucinations != null) {
                if (typeof d.hallucinations !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.hallucinations: object expected");
                m.hallucinations = $root.SC2APIProtocol.ImageData.fromObject(d.hallucinations);
            }
            if (d.cloaked != null) {
                if (typeof d.cloaked !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.cloaked: object expected");
                m.cloaked = $root.SC2APIProtocol.ImageData.fromObject(d.cloaked);
            }
            if (d.blip != null) {
                if (typeof d.blip !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.blip: object expected");
                m.blip = $root.SC2APIProtocol.ImageData.fromObject(d.blip);
            }
            if (d.buffs != null) {
                if (typeof d.buffs !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.buffs: object expected");
                m.buffs = $root.SC2APIProtocol.ImageData.fromObject(d.buffs);
            }
            if (d.buffDuration != null) {
                if (typeof d.buffDuration !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.buffDuration: object expected");
                m.buffDuration = $root.SC2APIProtocol.ImageData.fromObject(d.buffDuration);
            }
            if (d.active != null) {
                if (typeof d.active !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.active: object expected");
                m.active = $root.SC2APIProtocol.ImageData.fromObject(d.active);
            }
            if (d.buildProgress != null) {
                if (typeof d.buildProgress !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.buildProgress: object expected");
                m.buildProgress = $root.SC2APIProtocol.ImageData.fromObject(d.buildProgress);
            }
            if (d.buildable != null) {
                if (typeof d.buildable !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.buildable: object expected");
                m.buildable = $root.SC2APIProtocol.ImageData.fromObject(d.buildable);
            }
            if (d.pathable != null) {
                if (typeof d.pathable !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.pathable: object expected");
                m.pathable = $root.SC2APIProtocol.ImageData.fromObject(d.pathable);
            }
            if (d.placeholder != null) {
                if (typeof d.placeholder !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayers.placeholder: object expected");
                m.placeholder = $root.SC2APIProtocol.ImageData.fromObject(d.placeholder);
            }
            return m;
        };

        FeatureLayers.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.heightMap = null;
                d.visibilityMap = null;
                d.creep = null;
                d.power = null;
                d.playerId = null;
                d.unitType = null;
                d.selected = null;
                d.unitHitPoints = null;
                d.unitEnergy = null;
                d.unitShields = null;
                d.playerRelative = null;
                d.unitDensityAa = null;
                d.unitDensity = null;
                d.unitHitPointsRatio = null;
                d.unitEnergyRatio = null;
                d.unitShieldsRatio = null;
                d.effects = null;
                d.hallucinations = null;
                d.cloaked = null;
                d.blip = null;
                d.buffs = null;
                d.active = null;
                d.buffDuration = null;
                d.buildProgress = null;
                d.buildable = null;
                d.pathable = null;
                d.placeholder = null;
            }
            if (m.heightMap != null && m.hasOwnProperty("heightMap")) {
                d.heightMap = $root.SC2APIProtocol.ImageData.toObject(m.heightMap, o);
            }
            if (m.visibilityMap != null && m.hasOwnProperty("visibilityMap")) {
                d.visibilityMap = $root.SC2APIProtocol.ImageData.toObject(m.visibilityMap, o);
            }
            if (m.creep != null && m.hasOwnProperty("creep")) {
                d.creep = $root.SC2APIProtocol.ImageData.toObject(m.creep, o);
            }
            if (m.power != null && m.hasOwnProperty("power")) {
                d.power = $root.SC2APIProtocol.ImageData.toObject(m.power, o);
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = $root.SC2APIProtocol.ImageData.toObject(m.playerId, o);
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                d.unitType = $root.SC2APIProtocol.ImageData.toObject(m.unitType, o);
            }
            if (m.selected != null && m.hasOwnProperty("selected")) {
                d.selected = $root.SC2APIProtocol.ImageData.toObject(m.selected, o);
            }
            if (m.unitHitPoints != null && m.hasOwnProperty("unitHitPoints")) {
                d.unitHitPoints = $root.SC2APIProtocol.ImageData.toObject(m.unitHitPoints, o);
            }
            if (m.unitEnergy != null && m.hasOwnProperty("unitEnergy")) {
                d.unitEnergy = $root.SC2APIProtocol.ImageData.toObject(m.unitEnergy, o);
            }
            if (m.unitShields != null && m.hasOwnProperty("unitShields")) {
                d.unitShields = $root.SC2APIProtocol.ImageData.toObject(m.unitShields, o);
            }
            if (m.playerRelative != null && m.hasOwnProperty("playerRelative")) {
                d.playerRelative = $root.SC2APIProtocol.ImageData.toObject(m.playerRelative, o);
            }
            if (m.unitDensityAa != null && m.hasOwnProperty("unitDensityAa")) {
                d.unitDensityAa = $root.SC2APIProtocol.ImageData.toObject(m.unitDensityAa, o);
            }
            if (m.unitDensity != null && m.hasOwnProperty("unitDensity")) {
                d.unitDensity = $root.SC2APIProtocol.ImageData.toObject(m.unitDensity, o);
            }
            if (m.unitHitPointsRatio != null && m.hasOwnProperty("unitHitPointsRatio")) {
                d.unitHitPointsRatio = $root.SC2APIProtocol.ImageData.toObject(m.unitHitPointsRatio, o);
            }
            if (m.unitEnergyRatio != null && m.hasOwnProperty("unitEnergyRatio")) {
                d.unitEnergyRatio = $root.SC2APIProtocol.ImageData.toObject(m.unitEnergyRatio, o);
            }
            if (m.unitShieldsRatio != null && m.hasOwnProperty("unitShieldsRatio")) {
                d.unitShieldsRatio = $root.SC2APIProtocol.ImageData.toObject(m.unitShieldsRatio, o);
            }
            if (m.effects != null && m.hasOwnProperty("effects")) {
                d.effects = $root.SC2APIProtocol.ImageData.toObject(m.effects, o);
            }
            if (m.hallucinations != null && m.hasOwnProperty("hallucinations")) {
                d.hallucinations = $root.SC2APIProtocol.ImageData.toObject(m.hallucinations, o);
            }
            if (m.cloaked != null && m.hasOwnProperty("cloaked")) {
                d.cloaked = $root.SC2APIProtocol.ImageData.toObject(m.cloaked, o);
            }
            if (m.blip != null && m.hasOwnProperty("blip")) {
                d.blip = $root.SC2APIProtocol.ImageData.toObject(m.blip, o);
            }
            if (m.buffs != null && m.hasOwnProperty("buffs")) {
                d.buffs = $root.SC2APIProtocol.ImageData.toObject(m.buffs, o);
            }
            if (m.active != null && m.hasOwnProperty("active")) {
                d.active = $root.SC2APIProtocol.ImageData.toObject(m.active, o);
            }
            if (m.buffDuration != null && m.hasOwnProperty("buffDuration")) {
                d.buffDuration = $root.SC2APIProtocol.ImageData.toObject(m.buffDuration, o);
            }
            if (m.buildProgress != null && m.hasOwnProperty("buildProgress")) {
                d.buildProgress = $root.SC2APIProtocol.ImageData.toObject(m.buildProgress, o);
            }
            if (m.buildable != null && m.hasOwnProperty("buildable")) {
                d.buildable = $root.SC2APIProtocol.ImageData.toObject(m.buildable, o);
            }
            if (m.pathable != null && m.hasOwnProperty("pathable")) {
                d.pathable = $root.SC2APIProtocol.ImageData.toObject(m.pathable, o);
            }
            if (m.placeholder != null && m.hasOwnProperty("placeholder")) {
                d.placeholder = $root.SC2APIProtocol.ImageData.toObject(m.placeholder, o);
            }
            return d;
        };

        FeatureLayers.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FeatureLayers;
    })();

    SC2APIProtocol.FeatureLayersMinimap = (function() {

        function FeatureLayersMinimap(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        FeatureLayersMinimap.prototype.heightMap = null;
        FeatureLayersMinimap.prototype.visibilityMap = null;
        FeatureLayersMinimap.prototype.creep = null;
        FeatureLayersMinimap.prototype.camera = null;
        FeatureLayersMinimap.prototype.playerId = null;
        FeatureLayersMinimap.prototype.playerRelative = null;
        FeatureLayersMinimap.prototype.selected = null;
        FeatureLayersMinimap.prototype.alerts = null;
        FeatureLayersMinimap.prototype.buildable = null;
        FeatureLayersMinimap.prototype.pathable = null;
        FeatureLayersMinimap.prototype.unitType = null;

        FeatureLayersMinimap.create = function create(properties) {
            return new FeatureLayersMinimap(properties);
        };

        FeatureLayersMinimap.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.heightMap != null && Object.hasOwnProperty.call(m, "heightMap"))
                $root.SC2APIProtocol.ImageData.encode(m.heightMap, w.uint32(10).fork()).ldelim();
            if (m.visibilityMap != null && Object.hasOwnProperty.call(m, "visibilityMap"))
                $root.SC2APIProtocol.ImageData.encode(m.visibilityMap, w.uint32(18).fork()).ldelim();
            if (m.creep != null && Object.hasOwnProperty.call(m, "creep"))
                $root.SC2APIProtocol.ImageData.encode(m.creep, w.uint32(26).fork()).ldelim();
            if (m.camera != null && Object.hasOwnProperty.call(m, "camera"))
                $root.SC2APIProtocol.ImageData.encode(m.camera, w.uint32(34).fork()).ldelim();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                $root.SC2APIProtocol.ImageData.encode(m.playerId, w.uint32(42).fork()).ldelim();
            if (m.playerRelative != null && Object.hasOwnProperty.call(m, "playerRelative"))
                $root.SC2APIProtocol.ImageData.encode(m.playerRelative, w.uint32(50).fork()).ldelim();
            if (m.selected != null && Object.hasOwnProperty.call(m, "selected"))
                $root.SC2APIProtocol.ImageData.encode(m.selected, w.uint32(58).fork()).ldelim();
            if (m.unitType != null && Object.hasOwnProperty.call(m, "unitType"))
                $root.SC2APIProtocol.ImageData.encode(m.unitType, w.uint32(66).fork()).ldelim();
            if (m.alerts != null && Object.hasOwnProperty.call(m, "alerts"))
                $root.SC2APIProtocol.ImageData.encode(m.alerts, w.uint32(74).fork()).ldelim();
            if (m.buildable != null && Object.hasOwnProperty.call(m, "buildable"))
                $root.SC2APIProtocol.ImageData.encode(m.buildable, w.uint32(82).fork()).ldelim();
            if (m.pathable != null && Object.hasOwnProperty.call(m, "pathable"))
                $root.SC2APIProtocol.ImageData.encode(m.pathable, w.uint32(90).fork()).ldelim();
            return w;
        };

        FeatureLayersMinimap.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        FeatureLayersMinimap.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.FeatureLayersMinimap();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.heightMap = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 2:
                    m.visibilityMap = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 3:
                    m.creep = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 4:
                    m.camera = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 5:
                    m.playerId = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 6:
                    m.playerRelative = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 7:
                    m.selected = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 9:
                    m.alerts = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 10:
                    m.buildable = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 11:
                    m.pathable = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 8:
                    m.unitType = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        FeatureLayersMinimap.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        FeatureLayersMinimap.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.heightMap != null && m.hasOwnProperty("heightMap")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.heightMap);
                    if (e)
                        return "heightMap." + e;
                }
            }
            if (m.visibilityMap != null && m.hasOwnProperty("visibilityMap")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.visibilityMap);
                    if (e)
                        return "visibilityMap." + e;
                }
            }
            if (m.creep != null && m.hasOwnProperty("creep")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.creep);
                    if (e)
                        return "creep." + e;
                }
            }
            if (m.camera != null && m.hasOwnProperty("camera")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.camera);
                    if (e)
                        return "camera." + e;
                }
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.playerId);
                    if (e)
                        return "playerId." + e;
                }
            }
            if (m.playerRelative != null && m.hasOwnProperty("playerRelative")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.playerRelative);
                    if (e)
                        return "playerRelative." + e;
                }
            }
            if (m.selected != null && m.hasOwnProperty("selected")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.selected);
                    if (e)
                        return "selected." + e;
                }
            }
            if (m.alerts != null && m.hasOwnProperty("alerts")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.alerts);
                    if (e)
                        return "alerts." + e;
                }
            }
            if (m.buildable != null && m.hasOwnProperty("buildable")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.buildable);
                    if (e)
                        return "buildable." + e;
                }
            }
            if (m.pathable != null && m.hasOwnProperty("pathable")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.pathable);
                    if (e)
                        return "pathable." + e;
                }
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.unitType);
                    if (e)
                        return "unitType." + e;
                }
            }
            return null;
        };

        FeatureLayersMinimap.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.FeatureLayersMinimap)
                return d;
            var m = new $root.SC2APIProtocol.FeatureLayersMinimap();
            if (d.heightMap != null) {
                if (typeof d.heightMap !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.heightMap: object expected");
                m.heightMap = $root.SC2APIProtocol.ImageData.fromObject(d.heightMap);
            }
            if (d.visibilityMap != null) {
                if (typeof d.visibilityMap !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.visibilityMap: object expected");
                m.visibilityMap = $root.SC2APIProtocol.ImageData.fromObject(d.visibilityMap);
            }
            if (d.creep != null) {
                if (typeof d.creep !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.creep: object expected");
                m.creep = $root.SC2APIProtocol.ImageData.fromObject(d.creep);
            }
            if (d.camera != null) {
                if (typeof d.camera !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.camera: object expected");
                m.camera = $root.SC2APIProtocol.ImageData.fromObject(d.camera);
            }
            if (d.playerId != null) {
                if (typeof d.playerId !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.playerId: object expected");
                m.playerId = $root.SC2APIProtocol.ImageData.fromObject(d.playerId);
            }
            if (d.playerRelative != null) {
                if (typeof d.playerRelative !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.playerRelative: object expected");
                m.playerRelative = $root.SC2APIProtocol.ImageData.fromObject(d.playerRelative);
            }
            if (d.selected != null) {
                if (typeof d.selected !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.selected: object expected");
                m.selected = $root.SC2APIProtocol.ImageData.fromObject(d.selected);
            }
            if (d.alerts != null) {
                if (typeof d.alerts !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.alerts: object expected");
                m.alerts = $root.SC2APIProtocol.ImageData.fromObject(d.alerts);
            }
            if (d.buildable != null) {
                if (typeof d.buildable !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.buildable: object expected");
                m.buildable = $root.SC2APIProtocol.ImageData.fromObject(d.buildable);
            }
            if (d.pathable != null) {
                if (typeof d.pathable !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.pathable: object expected");
                m.pathable = $root.SC2APIProtocol.ImageData.fromObject(d.pathable);
            }
            if (d.unitType != null) {
                if (typeof d.unitType !== "object")
                    throw TypeError(".SC2APIProtocol.FeatureLayersMinimap.unitType: object expected");
                m.unitType = $root.SC2APIProtocol.ImageData.fromObject(d.unitType);
            }
            return m;
        };

        FeatureLayersMinimap.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.heightMap = null;
                d.visibilityMap = null;
                d.creep = null;
                d.camera = null;
                d.playerId = null;
                d.playerRelative = null;
                d.selected = null;
                d.unitType = null;
                d.alerts = null;
                d.buildable = null;
                d.pathable = null;
            }
            if (m.heightMap != null && m.hasOwnProperty("heightMap")) {
                d.heightMap = $root.SC2APIProtocol.ImageData.toObject(m.heightMap, o);
            }
            if (m.visibilityMap != null && m.hasOwnProperty("visibilityMap")) {
                d.visibilityMap = $root.SC2APIProtocol.ImageData.toObject(m.visibilityMap, o);
            }
            if (m.creep != null && m.hasOwnProperty("creep")) {
                d.creep = $root.SC2APIProtocol.ImageData.toObject(m.creep, o);
            }
            if (m.camera != null && m.hasOwnProperty("camera")) {
                d.camera = $root.SC2APIProtocol.ImageData.toObject(m.camera, o);
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = $root.SC2APIProtocol.ImageData.toObject(m.playerId, o);
            }
            if (m.playerRelative != null && m.hasOwnProperty("playerRelative")) {
                d.playerRelative = $root.SC2APIProtocol.ImageData.toObject(m.playerRelative, o);
            }
            if (m.selected != null && m.hasOwnProperty("selected")) {
                d.selected = $root.SC2APIProtocol.ImageData.toObject(m.selected, o);
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                d.unitType = $root.SC2APIProtocol.ImageData.toObject(m.unitType, o);
            }
            if (m.alerts != null && m.hasOwnProperty("alerts")) {
                d.alerts = $root.SC2APIProtocol.ImageData.toObject(m.alerts, o);
            }
            if (m.buildable != null && m.hasOwnProperty("buildable")) {
                d.buildable = $root.SC2APIProtocol.ImageData.toObject(m.buildable, o);
            }
            if (m.pathable != null && m.hasOwnProperty("pathable")) {
                d.pathable = $root.SC2APIProtocol.ImageData.toObject(m.pathable, o);
            }
            return d;
        };

        FeatureLayersMinimap.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FeatureLayersMinimap;
    })();

    SC2APIProtocol.ObservationRender = (function() {

        function ObservationRender(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ObservationRender.prototype.map = null;
        ObservationRender.prototype.minimap = null;

        ObservationRender.create = function create(properties) {
            return new ObservationRender(properties);
        };

        ObservationRender.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.map != null && Object.hasOwnProperty.call(m, "map"))
                $root.SC2APIProtocol.ImageData.encode(m.map, w.uint32(10).fork()).ldelim();
            if (m.minimap != null && Object.hasOwnProperty.call(m, "minimap"))
                $root.SC2APIProtocol.ImageData.encode(m.minimap, w.uint32(18).fork()).ldelim();
            return w;
        };

        ObservationRender.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ObservationRender.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ObservationRender();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.map = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 2:
                    m.minimap = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ObservationRender.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ObservationRender.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.map != null && m.hasOwnProperty("map")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.map);
                    if (e)
                        return "map." + e;
                }
            }
            if (m.minimap != null && m.hasOwnProperty("minimap")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.minimap);
                    if (e)
                        return "minimap." + e;
                }
            }
            return null;
        };

        ObservationRender.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ObservationRender)
                return d;
            var m = new $root.SC2APIProtocol.ObservationRender();
            if (d.map != null) {
                if (typeof d.map !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationRender.map: object expected");
                m.map = $root.SC2APIProtocol.ImageData.fromObject(d.map);
            }
            if (d.minimap != null) {
                if (typeof d.minimap !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationRender.minimap: object expected");
                m.minimap = $root.SC2APIProtocol.ImageData.fromObject(d.minimap);
            }
            return m;
        };

        ObservationRender.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.map = null;
                d.minimap = null;
            }
            if (m.map != null && m.hasOwnProperty("map")) {
                d.map = $root.SC2APIProtocol.ImageData.toObject(m.map, o);
            }
            if (m.minimap != null && m.hasOwnProperty("minimap")) {
                d.minimap = $root.SC2APIProtocol.ImageData.toObject(m.minimap, o);
            }
            return d;
        };

        ObservationRender.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ObservationRender;
    })();

    SC2APIProtocol.ActionSpatial = (function() {

        function ActionSpatial(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSpatial.prototype.unitCommand = null;
        ActionSpatial.prototype.cameraMove = null;
        ActionSpatial.prototype.unitSelectionPoint = null;
        ActionSpatial.prototype.unitSelectionRect = null;

        var $oneOfFields;

        Object.defineProperty(ActionSpatial.prototype, "action", {
            get: $util.oneOfGetter($oneOfFields = ["unitCommand", "cameraMove", "unitSelectionPoint", "unitSelectionRect"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        ActionSpatial.create = function create(properties) {
            return new ActionSpatial(properties);
        };

        ActionSpatial.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitCommand != null && Object.hasOwnProperty.call(m, "unitCommand"))
                $root.SC2APIProtocol.ActionSpatialUnitCommand.encode(m.unitCommand, w.uint32(10).fork()).ldelim();
            if (m.cameraMove != null && Object.hasOwnProperty.call(m, "cameraMove"))
                $root.SC2APIProtocol.ActionSpatialCameraMove.encode(m.cameraMove, w.uint32(18).fork()).ldelim();
            if (m.unitSelectionPoint != null && Object.hasOwnProperty.call(m, "unitSelectionPoint"))
                $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint.encode(m.unitSelectionPoint, w.uint32(26).fork()).ldelim();
            if (m.unitSelectionRect != null && Object.hasOwnProperty.call(m, "unitSelectionRect"))
                $root.SC2APIProtocol.ActionSpatialUnitSelectionRect.encode(m.unitSelectionRect, w.uint32(34).fork()).ldelim();
            return w;
        };

        ActionSpatial.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSpatial.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSpatial();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitCommand = $root.SC2APIProtocol.ActionSpatialUnitCommand.decode(r, r.uint32());
                    break;
                case 2:
                    m.cameraMove = $root.SC2APIProtocol.ActionSpatialCameraMove.decode(r, r.uint32());
                    break;
                case 3:
                    m.unitSelectionPoint = $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint.decode(r, r.uint32());
                    break;
                case 4:
                    m.unitSelectionRect = $root.SC2APIProtocol.ActionSpatialUnitSelectionRect.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSpatial.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSpatial.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.unitCommand != null && m.hasOwnProperty("unitCommand")) {
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionSpatialUnitCommand.verify(m.unitCommand);
                    if (e)
                        return "unitCommand." + e;
                }
            }
            if (m.cameraMove != null && m.hasOwnProperty("cameraMove")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionSpatialCameraMove.verify(m.cameraMove);
                    if (e)
                        return "cameraMove." + e;
                }
            }
            if (m.unitSelectionPoint != null && m.hasOwnProperty("unitSelectionPoint")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint.verify(m.unitSelectionPoint);
                    if (e)
                        return "unitSelectionPoint." + e;
                }
            }
            if (m.unitSelectionRect != null && m.hasOwnProperty("unitSelectionRect")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionSpatialUnitSelectionRect.verify(m.unitSelectionRect);
                    if (e)
                        return "unitSelectionRect." + e;
                }
            }
            return null;
        };

        ActionSpatial.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSpatial)
                return d;
            var m = new $root.SC2APIProtocol.ActionSpatial();
            if (d.unitCommand != null) {
                if (typeof d.unitCommand !== "object")
                    throw TypeError(".SC2APIProtocol.ActionSpatial.unitCommand: object expected");
                m.unitCommand = $root.SC2APIProtocol.ActionSpatialUnitCommand.fromObject(d.unitCommand);
            }
            if (d.cameraMove != null) {
                if (typeof d.cameraMove !== "object")
                    throw TypeError(".SC2APIProtocol.ActionSpatial.cameraMove: object expected");
                m.cameraMove = $root.SC2APIProtocol.ActionSpatialCameraMove.fromObject(d.cameraMove);
            }
            if (d.unitSelectionPoint != null) {
                if (typeof d.unitSelectionPoint !== "object")
                    throw TypeError(".SC2APIProtocol.ActionSpatial.unitSelectionPoint: object expected");
                m.unitSelectionPoint = $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint.fromObject(d.unitSelectionPoint);
            }
            if (d.unitSelectionRect != null) {
                if (typeof d.unitSelectionRect !== "object")
                    throw TypeError(".SC2APIProtocol.ActionSpatial.unitSelectionRect: object expected");
                m.unitSelectionRect = $root.SC2APIProtocol.ActionSpatialUnitSelectionRect.fromObject(d.unitSelectionRect);
            }
            return m;
        };

        ActionSpatial.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (m.unitCommand != null && m.hasOwnProperty("unitCommand")) {
                d.unitCommand = $root.SC2APIProtocol.ActionSpatialUnitCommand.toObject(m.unitCommand, o);
                if (o.oneofs)
                    d.action = "unitCommand";
            }
            if (m.cameraMove != null && m.hasOwnProperty("cameraMove")) {
                d.cameraMove = $root.SC2APIProtocol.ActionSpatialCameraMove.toObject(m.cameraMove, o);
                if (o.oneofs)
                    d.action = "cameraMove";
            }
            if (m.unitSelectionPoint != null && m.hasOwnProperty("unitSelectionPoint")) {
                d.unitSelectionPoint = $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint.toObject(m.unitSelectionPoint, o);
                if (o.oneofs)
                    d.action = "unitSelectionPoint";
            }
            if (m.unitSelectionRect != null && m.hasOwnProperty("unitSelectionRect")) {
                d.unitSelectionRect = $root.SC2APIProtocol.ActionSpatialUnitSelectionRect.toObject(m.unitSelectionRect, o);
                if (o.oneofs)
                    d.action = "unitSelectionRect";
            }
            return d;
        };

        ActionSpatial.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionSpatial;
    })();

    SC2APIProtocol.ActionSpatialUnitCommand = (function() {

        function ActionSpatialUnitCommand(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSpatialUnitCommand.prototype.abilityId = 0;
        ActionSpatialUnitCommand.prototype.targetScreenCoord = null;
        ActionSpatialUnitCommand.prototype.targetMinimapCoord = null;
        ActionSpatialUnitCommand.prototype.queueCommand = false;

        var $oneOfFields;

        Object.defineProperty(ActionSpatialUnitCommand.prototype, "target", {
            get: $util.oneOfGetter($oneOfFields = ["targetScreenCoord", "targetMinimapCoord"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        ActionSpatialUnitCommand.create = function create(properties) {
            return new ActionSpatialUnitCommand(properties);
        };

        ActionSpatialUnitCommand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).int32(m.abilityId);
            if (m.targetScreenCoord != null && Object.hasOwnProperty.call(m, "targetScreenCoord"))
                $root.SC2APIProtocol.PointI.encode(m.targetScreenCoord, w.uint32(18).fork()).ldelim();
            if (m.targetMinimapCoord != null && Object.hasOwnProperty.call(m, "targetMinimapCoord"))
                $root.SC2APIProtocol.PointI.encode(m.targetMinimapCoord, w.uint32(26).fork()).ldelim();
            if (m.queueCommand != null && Object.hasOwnProperty.call(m, "queueCommand"))
                w.uint32(32).bool(m.queueCommand);
            return w;
        };

        ActionSpatialUnitCommand.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSpatialUnitCommand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSpatialUnitCommand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.int32();
                    break;
                case 2:
                    m.targetScreenCoord = $root.SC2APIProtocol.PointI.decode(r, r.uint32());
                    break;
                case 3:
                    m.targetMinimapCoord = $root.SC2APIProtocol.PointI.decode(r, r.uint32());
                    break;
                case 4:
                    m.queueCommand = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSpatialUnitCommand.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSpatialUnitCommand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.targetScreenCoord != null && m.hasOwnProperty("targetScreenCoord")) {
                p.target = 1;
                {
                    var e = $root.SC2APIProtocol.PointI.verify(m.targetScreenCoord);
                    if (e)
                        return "targetScreenCoord." + e;
                }
            }
            if (m.targetMinimapCoord != null && m.hasOwnProperty("targetMinimapCoord")) {
                if (p.target === 1)
                    return "target: multiple values";
                p.target = 1;
                {
                    var e = $root.SC2APIProtocol.PointI.verify(m.targetMinimapCoord);
                    if (e)
                        return "targetMinimapCoord." + e;
                }
            }
            if (m.queueCommand != null && m.hasOwnProperty("queueCommand")) {
                if (typeof m.queueCommand !== "boolean")
                    return "queueCommand: boolean expected";
            }
            return null;
        };

        ActionSpatialUnitCommand.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSpatialUnitCommand)
                return d;
            var m = new $root.SC2APIProtocol.ActionSpatialUnitCommand();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId | 0;
            }
            if (d.targetScreenCoord != null) {
                if (typeof d.targetScreenCoord !== "object")
                    throw TypeError(".SC2APIProtocol.ActionSpatialUnitCommand.targetScreenCoord: object expected");
                m.targetScreenCoord = $root.SC2APIProtocol.PointI.fromObject(d.targetScreenCoord);
            }
            if (d.targetMinimapCoord != null) {
                if (typeof d.targetMinimapCoord !== "object")
                    throw TypeError(".SC2APIProtocol.ActionSpatialUnitCommand.targetMinimapCoord: object expected");
                m.targetMinimapCoord = $root.SC2APIProtocol.PointI.fromObject(d.targetMinimapCoord);
            }
            if (d.queueCommand != null) {
                m.queueCommand = Boolean(d.queueCommand);
            }
            return m;
        };

        ActionSpatialUnitCommand.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.abilityId = 0;
                d.queueCommand = false;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.targetScreenCoord != null && m.hasOwnProperty("targetScreenCoord")) {
                d.targetScreenCoord = $root.SC2APIProtocol.PointI.toObject(m.targetScreenCoord, o);
                if (o.oneofs)
                    d.target = "targetScreenCoord";
            }
            if (m.targetMinimapCoord != null && m.hasOwnProperty("targetMinimapCoord")) {
                d.targetMinimapCoord = $root.SC2APIProtocol.PointI.toObject(m.targetMinimapCoord, o);
                if (o.oneofs)
                    d.target = "targetMinimapCoord";
            }
            if (m.queueCommand != null && m.hasOwnProperty("queueCommand")) {
                d.queueCommand = m.queueCommand;
            }
            return d;
        };

        ActionSpatialUnitCommand.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionSpatialUnitCommand;
    })();

    SC2APIProtocol.ActionSpatialCameraMove = (function() {

        function ActionSpatialCameraMove(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSpatialCameraMove.prototype.centerMinimap = null;

        ActionSpatialCameraMove.create = function create(properties) {
            return new ActionSpatialCameraMove(properties);
        };

        ActionSpatialCameraMove.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.centerMinimap != null && Object.hasOwnProperty.call(m, "centerMinimap"))
                $root.SC2APIProtocol.PointI.encode(m.centerMinimap, w.uint32(10).fork()).ldelim();
            return w;
        };

        ActionSpatialCameraMove.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSpatialCameraMove.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSpatialCameraMove();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.centerMinimap = $root.SC2APIProtocol.PointI.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSpatialCameraMove.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSpatialCameraMove.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.centerMinimap != null && m.hasOwnProperty("centerMinimap")) {
                {
                    var e = $root.SC2APIProtocol.PointI.verify(m.centerMinimap);
                    if (e)
                        return "centerMinimap." + e;
                }
            }
            return null;
        };

        ActionSpatialCameraMove.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSpatialCameraMove)
                return d;
            var m = new $root.SC2APIProtocol.ActionSpatialCameraMove();
            if (d.centerMinimap != null) {
                if (typeof d.centerMinimap !== "object")
                    throw TypeError(".SC2APIProtocol.ActionSpatialCameraMove.centerMinimap: object expected");
                m.centerMinimap = $root.SC2APIProtocol.PointI.fromObject(d.centerMinimap);
            }
            return m;
        };

        ActionSpatialCameraMove.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.centerMinimap = null;
            }
            if (m.centerMinimap != null && m.hasOwnProperty("centerMinimap")) {
                d.centerMinimap = $root.SC2APIProtocol.PointI.toObject(m.centerMinimap, o);
            }
            return d;
        };

        ActionSpatialCameraMove.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionSpatialCameraMove;
    })();

    SC2APIProtocol.ActionSpatialUnitSelectionPoint = (function() {

        function ActionSpatialUnitSelectionPoint(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSpatialUnitSelectionPoint.prototype.selectionScreenCoord = null;
        ActionSpatialUnitSelectionPoint.prototype.type = 1;

        ActionSpatialUnitSelectionPoint.create = function create(properties) {
            return new ActionSpatialUnitSelectionPoint(properties);
        };

        ActionSpatialUnitSelectionPoint.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.selectionScreenCoord != null && Object.hasOwnProperty.call(m, "selectionScreenCoord"))
                $root.SC2APIProtocol.PointI.encode(m.selectionScreenCoord, w.uint32(10).fork()).ldelim();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(16).int32(m.type);
            return w;
        };

        ActionSpatialUnitSelectionPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSpatialUnitSelectionPoint.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.selectionScreenCoord = $root.SC2APIProtocol.PointI.decode(r, r.uint32());
                    break;
                case 2:
                    m.type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSpatialUnitSelectionPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSpatialUnitSelectionPoint.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.selectionScreenCoord != null && m.hasOwnProperty("selectionScreenCoord")) {
                {
                    var e = $root.SC2APIProtocol.PointI.verify(m.selectionScreenCoord);
                    if (e)
                        return "selectionScreenCoord." + e;
                }
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                switch (m.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            return null;
        };

        ActionSpatialUnitSelectionPoint.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint)
                return d;
            var m = new $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint();
            if (d.selectionScreenCoord != null) {
                if (typeof d.selectionScreenCoord !== "object")
                    throw TypeError(".SC2APIProtocol.ActionSpatialUnitSelectionPoint.selectionScreenCoord: object expected");
                m.selectionScreenCoord = $root.SC2APIProtocol.PointI.fromObject(d.selectionScreenCoord);
            }
            switch (d.type) {
            case "Select":
            case 1:
                m.type = 1;
                break;
            case "Toggle":
            case 2:
                m.type = 2;
                break;
            case "AllType":
            case 3:
                m.type = 3;
                break;
            case "AddAllType":
            case 4:
                m.type = 4;
                break;
            }
            return m;
        };

        ActionSpatialUnitSelectionPoint.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.selectionScreenCoord = null;
                d.type = o.enums === String ? "Select" : 1;
            }
            if (m.selectionScreenCoord != null && m.hasOwnProperty("selectionScreenCoord")) {
                d.selectionScreenCoord = $root.SC2APIProtocol.PointI.toObject(m.selectionScreenCoord, o);
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                d.type = o.enums === String ? $root.SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type[m.type] : m.type;
            }
            return d;
        };

        ActionSpatialUnitSelectionPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ActionSpatialUnitSelectionPoint.Type = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "Select"] = 1;
            values[valuesById[2] = "Toggle"] = 2;
            values[valuesById[3] = "AllType"] = 3;
            values[valuesById[4] = "AddAllType"] = 4;
            return values;
        })();

        return ActionSpatialUnitSelectionPoint;
    })();

    SC2APIProtocol.ActionSpatialUnitSelectionRect = (function() {

        function ActionSpatialUnitSelectionRect(p) {
            this.selectionScreenCoord = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSpatialUnitSelectionRect.prototype.selectionScreenCoord = $util.emptyArray;
        ActionSpatialUnitSelectionRect.prototype.selectionAdd = false;

        ActionSpatialUnitSelectionRect.create = function create(properties) {
            return new ActionSpatialUnitSelectionRect(properties);
        };

        ActionSpatialUnitSelectionRect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.selectionScreenCoord != null && m.selectionScreenCoord.length) {
                for (var i = 0; i < m.selectionScreenCoord.length; ++i)
                    $root.SC2APIProtocol.RectangleI.encode(m.selectionScreenCoord[i], w.uint32(10).fork()).ldelim();
            }
            if (m.selectionAdd != null && Object.hasOwnProperty.call(m, "selectionAdd"))
                w.uint32(16).bool(m.selectionAdd);
            return w;
        };

        ActionSpatialUnitSelectionRect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSpatialUnitSelectionRect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSpatialUnitSelectionRect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.selectionScreenCoord && m.selectionScreenCoord.length))
                        m.selectionScreenCoord = [];
                    m.selectionScreenCoord.push($root.SC2APIProtocol.RectangleI.decode(r, r.uint32()));
                    break;
                case 2:
                    m.selectionAdd = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSpatialUnitSelectionRect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSpatialUnitSelectionRect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.selectionScreenCoord != null && m.hasOwnProperty("selectionScreenCoord")) {
                if (!Array.isArray(m.selectionScreenCoord))
                    return "selectionScreenCoord: array expected";
                for (var i = 0; i < m.selectionScreenCoord.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.RectangleI.verify(m.selectionScreenCoord[i]);
                        if (e)
                            return "selectionScreenCoord." + e;
                    }
                }
            }
            if (m.selectionAdd != null && m.hasOwnProperty("selectionAdd")) {
                if (typeof m.selectionAdd !== "boolean")
                    return "selectionAdd: boolean expected";
            }
            return null;
        };

        ActionSpatialUnitSelectionRect.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSpatialUnitSelectionRect)
                return d;
            var m = new $root.SC2APIProtocol.ActionSpatialUnitSelectionRect();
            if (d.selectionScreenCoord) {
                if (!Array.isArray(d.selectionScreenCoord))
                    throw TypeError(".SC2APIProtocol.ActionSpatialUnitSelectionRect.selectionScreenCoord: array expected");
                m.selectionScreenCoord = [];
                for (var i = 0; i < d.selectionScreenCoord.length; ++i) {
                    if (typeof d.selectionScreenCoord[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ActionSpatialUnitSelectionRect.selectionScreenCoord: object expected");
                    m.selectionScreenCoord[i] = $root.SC2APIProtocol.RectangleI.fromObject(d.selectionScreenCoord[i]);
                }
            }
            if (d.selectionAdd != null) {
                m.selectionAdd = Boolean(d.selectionAdd);
            }
            return m;
        };

        ActionSpatialUnitSelectionRect.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.selectionScreenCoord = [];
            }
            if (o.defaults) {
                d.selectionAdd = false;
            }
            if (m.selectionScreenCoord && m.selectionScreenCoord.length) {
                d.selectionScreenCoord = [];
                for (var j = 0; j < m.selectionScreenCoord.length; ++j) {
                    d.selectionScreenCoord[j] = $root.SC2APIProtocol.RectangleI.toObject(m.selectionScreenCoord[j], o);
                }
            }
            if (m.selectionAdd != null && m.hasOwnProperty("selectionAdd")) {
                d.selectionAdd = m.selectionAdd;
            }
            return d;
        };

        ActionSpatialUnitSelectionRect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionSpatialUnitSelectionRect;
    })();

    SC2APIProtocol.AvailableAbility = (function() {

        function AvailableAbility(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        AvailableAbility.prototype.abilityId = 0;
        AvailableAbility.prototype.requiresPoint = false;

        AvailableAbility.create = function create(properties) {
            return new AvailableAbility(properties);
        };

        AvailableAbility.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).int32(m.abilityId);
            if (m.requiresPoint != null && Object.hasOwnProperty.call(m, "requiresPoint"))
                w.uint32(16).bool(m.requiresPoint);
            return w;
        };

        AvailableAbility.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        AvailableAbility.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.AvailableAbility();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.int32();
                    break;
                case 2:
                    m.requiresPoint = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        AvailableAbility.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        AvailableAbility.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.requiresPoint != null && m.hasOwnProperty("requiresPoint")) {
                if (typeof m.requiresPoint !== "boolean")
                    return "requiresPoint: boolean expected";
            }
            return null;
        };

        AvailableAbility.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.AvailableAbility)
                return d;
            var m = new $root.SC2APIProtocol.AvailableAbility();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId | 0;
            }
            if (d.requiresPoint != null) {
                m.requiresPoint = Boolean(d.requiresPoint);
            }
            return m;
        };

        AvailableAbility.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.abilityId = 0;
                d.requiresPoint = false;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.requiresPoint != null && m.hasOwnProperty("requiresPoint")) {
                d.requiresPoint = m.requiresPoint;
            }
            return d;
        };

        AvailableAbility.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AvailableAbility;
    })();

    SC2APIProtocol.ImageData = (function() {

        function ImageData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ImageData.prototype.bitsPerPixel = 0;
        ImageData.prototype.size = null;
        ImageData.prototype.data = $util.newBuffer([]);

        ImageData.create = function create(properties) {
            return new ImageData(properties);
        };

        ImageData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.bitsPerPixel != null && Object.hasOwnProperty.call(m, "bitsPerPixel"))
                w.uint32(8).int32(m.bitsPerPixel);
            if (m.size != null && Object.hasOwnProperty.call(m, "size"))
                $root.SC2APIProtocol.Size2DI.encode(m.size, w.uint32(18).fork()).ldelim();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                w.uint32(26).bytes(m.data);
            return w;
        };

        ImageData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ImageData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ImageData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.bitsPerPixel = r.int32();
                    break;
                case 2:
                    m.size = $root.SC2APIProtocol.Size2DI.decode(r, r.uint32());
                    break;
                case 3:
                    m.data = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ImageData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ImageData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.bitsPerPixel != null && m.hasOwnProperty("bitsPerPixel")) {
                if (!$util.isInteger(m.bitsPerPixel))
                    return "bitsPerPixel: integer expected";
            }
            if (m.size != null && m.hasOwnProperty("size")) {
                {
                    var e = $root.SC2APIProtocol.Size2DI.verify(m.size);
                    if (e)
                        return "size." + e;
                }
            }
            if (m.data != null && m.hasOwnProperty("data")) {
                if (!(m.data && typeof m.data.length === "number" || $util.isString(m.data)))
                    return "data: buffer expected";
            }
            return null;
        };

        ImageData.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ImageData)
                return d;
            var m = new $root.SC2APIProtocol.ImageData();
            if (d.bitsPerPixel != null) {
                m.bitsPerPixel = d.bitsPerPixel | 0;
            }
            if (d.size != null) {
                if (typeof d.size !== "object")
                    throw TypeError(".SC2APIProtocol.ImageData.size: object expected");
                m.size = $root.SC2APIProtocol.Size2DI.fromObject(d.size);
            }
            if (d.data != null) {
                if (typeof d.data === "string")
                    $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);
                else if (d.data.length)
                    m.data = d.data;
            }
            return m;
        };

        ImageData.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.bitsPerPixel = 0;
                d.size = null;
                if (o.bytes === String)
                    d.data = "";
                else {
                    d.data = [];
                    if (o.bytes !== Array)
                        d.data = $util.newBuffer(d.data);
                }
            }
            if (m.bitsPerPixel != null && m.hasOwnProperty("bitsPerPixel")) {
                d.bitsPerPixel = m.bitsPerPixel;
            }
            if (m.size != null && m.hasOwnProperty("size")) {
                d.size = $root.SC2APIProtocol.Size2DI.toObject(m.size, o);
            }
            if (m.data != null && m.hasOwnProperty("data")) {
                d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
            }
            return d;
        };

        ImageData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ImageData;
    })();

    SC2APIProtocol.PointI = (function() {

        function PointI(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PointI.prototype.x = 0;
        PointI.prototype.y = 0;

        PointI.create = function create(properties) {
            return new PointI(properties);
        };

        PointI.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.x != null && Object.hasOwnProperty.call(m, "x"))
                w.uint32(8).int32(m.x);
            if (m.y != null && Object.hasOwnProperty.call(m, "y"))
                w.uint32(16).int32(m.y);
            return w;
        };

        PointI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PointI.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PointI();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.x = r.int32();
                    break;
                case 2:
                    m.y = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PointI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PointI.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.x != null && m.hasOwnProperty("x")) {
                if (!$util.isInteger(m.x))
                    return "x: integer expected";
            }
            if (m.y != null && m.hasOwnProperty("y")) {
                if (!$util.isInteger(m.y))
                    return "y: integer expected";
            }
            return null;
        };

        PointI.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PointI)
                return d;
            var m = new $root.SC2APIProtocol.PointI();
            if (d.x != null) {
                m.x = d.x | 0;
            }
            if (d.y != null) {
                m.y = d.y | 0;
            }
            return m;
        };

        PointI.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.x = 0;
                d.y = 0;
            }
            if (m.x != null && m.hasOwnProperty("x")) {
                d.x = m.x;
            }
            if (m.y != null && m.hasOwnProperty("y")) {
                d.y = m.y;
            }
            return d;
        };

        PointI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PointI;
    })();

    SC2APIProtocol.RectangleI = (function() {

        function RectangleI(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RectangleI.prototype.p0 = null;
        RectangleI.prototype.p1 = null;

        RectangleI.create = function create(properties) {
            return new RectangleI(properties);
        };

        RectangleI.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.p0 != null && Object.hasOwnProperty.call(m, "p0"))
                $root.SC2APIProtocol.PointI.encode(m.p0, w.uint32(10).fork()).ldelim();
            if (m.p1 != null && Object.hasOwnProperty.call(m, "p1"))
                $root.SC2APIProtocol.PointI.encode(m.p1, w.uint32(18).fork()).ldelim();
            return w;
        };

        RectangleI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RectangleI.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RectangleI();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.p0 = $root.SC2APIProtocol.PointI.decode(r, r.uint32());
                    break;
                case 2:
                    m.p1 = $root.SC2APIProtocol.PointI.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RectangleI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RectangleI.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.p0 != null && m.hasOwnProperty("p0")) {
                {
                    var e = $root.SC2APIProtocol.PointI.verify(m.p0);
                    if (e)
                        return "p0." + e;
                }
            }
            if (m.p1 != null && m.hasOwnProperty("p1")) {
                {
                    var e = $root.SC2APIProtocol.PointI.verify(m.p1);
                    if (e)
                        return "p1." + e;
                }
            }
            return null;
        };

        RectangleI.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RectangleI)
                return d;
            var m = new $root.SC2APIProtocol.RectangleI();
            if (d.p0 != null) {
                if (typeof d.p0 !== "object")
                    throw TypeError(".SC2APIProtocol.RectangleI.p0: object expected");
                m.p0 = $root.SC2APIProtocol.PointI.fromObject(d.p0);
            }
            if (d.p1 != null) {
                if (typeof d.p1 !== "object")
                    throw TypeError(".SC2APIProtocol.RectangleI.p1: object expected");
                m.p1 = $root.SC2APIProtocol.PointI.fromObject(d.p1);
            }
            return m;
        };

        RectangleI.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.p0 = null;
                d.p1 = null;
            }
            if (m.p0 != null && m.hasOwnProperty("p0")) {
                d.p0 = $root.SC2APIProtocol.PointI.toObject(m.p0, o);
            }
            if (m.p1 != null && m.hasOwnProperty("p1")) {
                d.p1 = $root.SC2APIProtocol.PointI.toObject(m.p1, o);
            }
            return d;
        };

        RectangleI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RectangleI;
    })();

    SC2APIProtocol.Point2D = (function() {

        function Point2D(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Point2D.prototype.x = 0;
        Point2D.prototype.y = 0;

        Point2D.create = function create(properties) {
            return new Point2D(properties);
        };

        Point2D.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.x != null && Object.hasOwnProperty.call(m, "x"))
                w.uint32(13).float(m.x);
            if (m.y != null && Object.hasOwnProperty.call(m, "y"))
                w.uint32(21).float(m.y);
            return w;
        };

        Point2D.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Point2D.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Point2D();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.x = r.float();
                    break;
                case 2:
                    m.y = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Point2D.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Point2D.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.x != null && m.hasOwnProperty("x")) {
                if (typeof m.x !== "number")
                    return "x: number expected";
            }
            if (m.y != null && m.hasOwnProperty("y")) {
                if (typeof m.y !== "number")
                    return "y: number expected";
            }
            return null;
        };

        Point2D.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Point2D)
                return d;
            var m = new $root.SC2APIProtocol.Point2D();
            if (d.x != null) {
                m.x = Number(d.x);
            }
            if (d.y != null) {
                m.y = Number(d.y);
            }
            return m;
        };

        Point2D.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.x = 0;
                d.y = 0;
            }
            if (m.x != null && m.hasOwnProperty("x")) {
                d.x = o.json && !isFinite(m.x) ? String(m.x) : m.x;
            }
            if (m.y != null && m.hasOwnProperty("y")) {
                d.y = o.json && !isFinite(m.y) ? String(m.y) : m.y;
            }
            return d;
        };

        Point2D.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Point2D;
    })();

    SC2APIProtocol.Point = (function() {

        function Point(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Point.prototype.x = 0;
        Point.prototype.y = 0;
        Point.prototype.z = 0;

        Point.create = function create(properties) {
            return new Point(properties);
        };

        Point.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.x != null && Object.hasOwnProperty.call(m, "x"))
                w.uint32(13).float(m.x);
            if (m.y != null && Object.hasOwnProperty.call(m, "y"))
                w.uint32(21).float(m.y);
            if (m.z != null && Object.hasOwnProperty.call(m, "z"))
                w.uint32(29).float(m.z);
            return w;
        };

        Point.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Point.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Point();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.x = r.float();
                    break;
                case 2:
                    m.y = r.float();
                    break;
                case 3:
                    m.z = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Point.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Point.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.x != null && m.hasOwnProperty("x")) {
                if (typeof m.x !== "number")
                    return "x: number expected";
            }
            if (m.y != null && m.hasOwnProperty("y")) {
                if (typeof m.y !== "number")
                    return "y: number expected";
            }
            if (m.z != null && m.hasOwnProperty("z")) {
                if (typeof m.z !== "number")
                    return "z: number expected";
            }
            return null;
        };

        Point.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Point)
                return d;
            var m = new $root.SC2APIProtocol.Point();
            if (d.x != null) {
                m.x = Number(d.x);
            }
            if (d.y != null) {
                m.y = Number(d.y);
            }
            if (d.z != null) {
                m.z = Number(d.z);
            }
            return m;
        };

        Point.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.x = 0;
                d.y = 0;
                d.z = 0;
            }
            if (m.x != null && m.hasOwnProperty("x")) {
                d.x = o.json && !isFinite(m.x) ? String(m.x) : m.x;
            }
            if (m.y != null && m.hasOwnProperty("y")) {
                d.y = o.json && !isFinite(m.y) ? String(m.y) : m.y;
            }
            if (m.z != null && m.hasOwnProperty("z")) {
                d.z = o.json && !isFinite(m.z) ? String(m.z) : m.z;
            }
            return d;
        };

        Point.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Point;
    })();

    SC2APIProtocol.Size2DI = (function() {

        function Size2DI(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Size2DI.prototype.x = 0;
        Size2DI.prototype.y = 0;

        Size2DI.create = function create(properties) {
            return new Size2DI(properties);
        };

        Size2DI.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.x != null && Object.hasOwnProperty.call(m, "x"))
                w.uint32(8).int32(m.x);
            if (m.y != null && Object.hasOwnProperty.call(m, "y"))
                w.uint32(16).int32(m.y);
            return w;
        };

        Size2DI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Size2DI.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Size2DI();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.x = r.int32();
                    break;
                case 2:
                    m.y = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Size2DI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Size2DI.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.x != null && m.hasOwnProperty("x")) {
                if (!$util.isInteger(m.x))
                    return "x: integer expected";
            }
            if (m.y != null && m.hasOwnProperty("y")) {
                if (!$util.isInteger(m.y))
                    return "y: integer expected";
            }
            return null;
        };

        Size2DI.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Size2DI)
                return d;
            var m = new $root.SC2APIProtocol.Size2DI();
            if (d.x != null) {
                m.x = d.x | 0;
            }
            if (d.y != null) {
                m.y = d.y | 0;
            }
            return m;
        };

        Size2DI.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.x = 0;
                d.y = 0;
            }
            if (m.x != null && m.hasOwnProperty("x")) {
                d.x = m.x;
            }
            if (m.y != null && m.hasOwnProperty("y")) {
                d.y = m.y;
            }
            return d;
        };

        Size2DI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Size2DI;
    })();

    SC2APIProtocol.Race = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NoRace"] = 0;
        values[valuesById[1] = "Terran"] = 1;
        values[valuesById[2] = "Zerg"] = 2;
        values[valuesById[3] = "Protoss"] = 3;
        values[valuesById[4] = "Random"] = 4;
        return values;
    })();

    SC2APIProtocol.AbilityData = (function() {

        function AbilityData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        AbilityData.prototype.abilityId = 0;
        AbilityData.prototype.linkName = "";
        AbilityData.prototype.linkIndex = 0;
        AbilityData.prototype.buttonName = "";
        AbilityData.prototype.friendlyName = "";
        AbilityData.prototype.hotkey = "";
        AbilityData.prototype.remapsToAbilityId = 0;
        AbilityData.prototype.available = false;
        AbilityData.prototype.target = 1;
        AbilityData.prototype.allowMinimap = false;
        AbilityData.prototype.allowAutocast = false;
        AbilityData.prototype.isBuilding = false;
        AbilityData.prototype.footprintRadius = 0;
        AbilityData.prototype.isInstantPlacement = false;
        AbilityData.prototype.castRange = 0;

        AbilityData.create = function create(properties) {
            return new AbilityData(properties);
        };

        AbilityData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).uint32(m.abilityId);
            if (m.linkName != null && Object.hasOwnProperty.call(m, "linkName"))
                w.uint32(18).string(m.linkName);
            if (m.linkIndex != null && Object.hasOwnProperty.call(m, "linkIndex"))
                w.uint32(24).uint32(m.linkIndex);
            if (m.buttonName != null && Object.hasOwnProperty.call(m, "buttonName"))
                w.uint32(34).string(m.buttonName);
            if (m.friendlyName != null && Object.hasOwnProperty.call(m, "friendlyName"))
                w.uint32(42).string(m.friendlyName);
            if (m.hotkey != null && Object.hasOwnProperty.call(m, "hotkey"))
                w.uint32(50).string(m.hotkey);
            if (m.remapsToAbilityId != null && Object.hasOwnProperty.call(m, "remapsToAbilityId"))
                w.uint32(56).uint32(m.remapsToAbilityId);
            if (m.available != null && Object.hasOwnProperty.call(m, "available"))
                w.uint32(64).bool(m.available);
            if (m.target != null && Object.hasOwnProperty.call(m, "target"))
                w.uint32(72).int32(m.target);
            if (m.allowMinimap != null && Object.hasOwnProperty.call(m, "allowMinimap"))
                w.uint32(80).bool(m.allowMinimap);
            if (m.allowAutocast != null && Object.hasOwnProperty.call(m, "allowAutocast"))
                w.uint32(88).bool(m.allowAutocast);
            if (m.isBuilding != null && Object.hasOwnProperty.call(m, "isBuilding"))
                w.uint32(96).bool(m.isBuilding);
            if (m.footprintRadius != null && Object.hasOwnProperty.call(m, "footprintRadius"))
                w.uint32(109).float(m.footprintRadius);
            if (m.isInstantPlacement != null && Object.hasOwnProperty.call(m, "isInstantPlacement"))
                w.uint32(112).bool(m.isInstantPlacement);
            if (m.castRange != null && Object.hasOwnProperty.call(m, "castRange"))
                w.uint32(125).float(m.castRange);
            return w;
        };

        AbilityData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        AbilityData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.AbilityData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.uint32();
                    break;
                case 2:
                    m.linkName = r.string();
                    break;
                case 3:
                    m.linkIndex = r.uint32();
                    break;
                case 4:
                    m.buttonName = r.string();
                    break;
                case 5:
                    m.friendlyName = r.string();
                    break;
                case 6:
                    m.hotkey = r.string();
                    break;
                case 7:
                    m.remapsToAbilityId = r.uint32();
                    break;
                case 8:
                    m.available = r.bool();
                    break;
                case 9:
                    m.target = r.int32();
                    break;
                case 10:
                    m.allowMinimap = r.bool();
                    break;
                case 11:
                    m.allowAutocast = r.bool();
                    break;
                case 12:
                    m.isBuilding = r.bool();
                    break;
                case 13:
                    m.footprintRadius = r.float();
                    break;
                case 14:
                    m.isInstantPlacement = r.bool();
                    break;
                case 15:
                    m.castRange = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        AbilityData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        AbilityData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.linkName != null && m.hasOwnProperty("linkName")) {
                if (!$util.isString(m.linkName))
                    return "linkName: string expected";
            }
            if (m.linkIndex != null && m.hasOwnProperty("linkIndex")) {
                if (!$util.isInteger(m.linkIndex))
                    return "linkIndex: integer expected";
            }
            if (m.buttonName != null && m.hasOwnProperty("buttonName")) {
                if (!$util.isString(m.buttonName))
                    return "buttonName: string expected";
            }
            if (m.friendlyName != null && m.hasOwnProperty("friendlyName")) {
                if (!$util.isString(m.friendlyName))
                    return "friendlyName: string expected";
            }
            if (m.hotkey != null && m.hasOwnProperty("hotkey")) {
                if (!$util.isString(m.hotkey))
                    return "hotkey: string expected";
            }
            if (m.remapsToAbilityId != null && m.hasOwnProperty("remapsToAbilityId")) {
                if (!$util.isInteger(m.remapsToAbilityId))
                    return "remapsToAbilityId: integer expected";
            }
            if (m.available != null && m.hasOwnProperty("available")) {
                if (typeof m.available !== "boolean")
                    return "available: boolean expected";
            }
            if (m.target != null && m.hasOwnProperty("target")) {
                switch (m.target) {
                default:
                    return "target: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.allowMinimap != null && m.hasOwnProperty("allowMinimap")) {
                if (typeof m.allowMinimap !== "boolean")
                    return "allowMinimap: boolean expected";
            }
            if (m.allowAutocast != null && m.hasOwnProperty("allowAutocast")) {
                if (typeof m.allowAutocast !== "boolean")
                    return "allowAutocast: boolean expected";
            }
            if (m.isBuilding != null && m.hasOwnProperty("isBuilding")) {
                if (typeof m.isBuilding !== "boolean")
                    return "isBuilding: boolean expected";
            }
            if (m.footprintRadius != null && m.hasOwnProperty("footprintRadius")) {
                if (typeof m.footprintRadius !== "number")
                    return "footprintRadius: number expected";
            }
            if (m.isInstantPlacement != null && m.hasOwnProperty("isInstantPlacement")) {
                if (typeof m.isInstantPlacement !== "boolean")
                    return "isInstantPlacement: boolean expected";
            }
            if (m.castRange != null && m.hasOwnProperty("castRange")) {
                if (typeof m.castRange !== "number")
                    return "castRange: number expected";
            }
            return null;
        };

        AbilityData.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.AbilityData)
                return d;
            var m = new $root.SC2APIProtocol.AbilityData();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId >>> 0;
            }
            if (d.linkName != null) {
                m.linkName = String(d.linkName);
            }
            if (d.linkIndex != null) {
                m.linkIndex = d.linkIndex >>> 0;
            }
            if (d.buttonName != null) {
                m.buttonName = String(d.buttonName);
            }
            if (d.friendlyName != null) {
                m.friendlyName = String(d.friendlyName);
            }
            if (d.hotkey != null) {
                m.hotkey = String(d.hotkey);
            }
            if (d.remapsToAbilityId != null) {
                m.remapsToAbilityId = d.remapsToAbilityId >>> 0;
            }
            if (d.available != null) {
                m.available = Boolean(d.available);
            }
            switch (d.target) {
            case "None":
            case 1:
                m.target = 1;
                break;
            case "Point":
            case 2:
                m.target = 2;
                break;
            case "Unit":
            case 3:
                m.target = 3;
                break;
            case "PointOrUnit":
            case 4:
                m.target = 4;
                break;
            case "PointOrNone":
            case 5:
                m.target = 5;
                break;
            }
            if (d.allowMinimap != null) {
                m.allowMinimap = Boolean(d.allowMinimap);
            }
            if (d.allowAutocast != null) {
                m.allowAutocast = Boolean(d.allowAutocast);
            }
            if (d.isBuilding != null) {
                m.isBuilding = Boolean(d.isBuilding);
            }
            if (d.footprintRadius != null) {
                m.footprintRadius = Number(d.footprintRadius);
            }
            if (d.isInstantPlacement != null) {
                m.isInstantPlacement = Boolean(d.isInstantPlacement);
            }
            if (d.castRange != null) {
                m.castRange = Number(d.castRange);
            }
            return m;
        };

        AbilityData.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.abilityId = 0;
                d.linkName = "";
                d.linkIndex = 0;
                d.buttonName = "";
                d.friendlyName = "";
                d.hotkey = "";
                d.remapsToAbilityId = 0;
                d.available = false;
                d.target = o.enums === String ? "None" : 1;
                d.allowMinimap = false;
                d.allowAutocast = false;
                d.isBuilding = false;
                d.footprintRadius = 0;
                d.isInstantPlacement = false;
                d.castRange = 0;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.linkName != null && m.hasOwnProperty("linkName")) {
                d.linkName = m.linkName;
            }
            if (m.linkIndex != null && m.hasOwnProperty("linkIndex")) {
                d.linkIndex = m.linkIndex;
            }
            if (m.buttonName != null && m.hasOwnProperty("buttonName")) {
                d.buttonName = m.buttonName;
            }
            if (m.friendlyName != null && m.hasOwnProperty("friendlyName")) {
                d.friendlyName = m.friendlyName;
            }
            if (m.hotkey != null && m.hasOwnProperty("hotkey")) {
                d.hotkey = m.hotkey;
            }
            if (m.remapsToAbilityId != null && m.hasOwnProperty("remapsToAbilityId")) {
                d.remapsToAbilityId = m.remapsToAbilityId;
            }
            if (m.available != null && m.hasOwnProperty("available")) {
                d.available = m.available;
            }
            if (m.target != null && m.hasOwnProperty("target")) {
                d.target = o.enums === String ? $root.SC2APIProtocol.AbilityData.Target[m.target] : m.target;
            }
            if (m.allowMinimap != null && m.hasOwnProperty("allowMinimap")) {
                d.allowMinimap = m.allowMinimap;
            }
            if (m.allowAutocast != null && m.hasOwnProperty("allowAutocast")) {
                d.allowAutocast = m.allowAutocast;
            }
            if (m.isBuilding != null && m.hasOwnProperty("isBuilding")) {
                d.isBuilding = m.isBuilding;
            }
            if (m.footprintRadius != null && m.hasOwnProperty("footprintRadius")) {
                d.footprintRadius = o.json && !isFinite(m.footprintRadius) ? String(m.footprintRadius) : m.footprintRadius;
            }
            if (m.isInstantPlacement != null && m.hasOwnProperty("isInstantPlacement")) {
                d.isInstantPlacement = m.isInstantPlacement;
            }
            if (m.castRange != null && m.hasOwnProperty("castRange")) {
                d.castRange = o.json && !isFinite(m.castRange) ? String(m.castRange) : m.castRange;
            }
            return d;
        };

        AbilityData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        AbilityData.Target = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "None"] = 1;
            values[valuesById[2] = "Point"] = 2;
            values[valuesById[3] = "Unit"] = 3;
            values[valuesById[4] = "PointOrUnit"] = 4;
            values[valuesById[5] = "PointOrNone"] = 5;
            return values;
        })();

        return AbilityData;
    })();

    SC2APIProtocol.Attribute = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Light"] = 1;
        values[valuesById[2] = "Armored"] = 2;
        values[valuesById[3] = "Biological"] = 3;
        values[valuesById[4] = "Mechanical"] = 4;
        values[valuesById[5] = "Robotic"] = 5;
        values[valuesById[6] = "Psionic"] = 6;
        values[valuesById[7] = "Massive"] = 7;
        values[valuesById[8] = "Structure"] = 8;
        values[valuesById[9] = "Hover"] = 9;
        values[valuesById[10] = "Heroic"] = 10;
        values[valuesById[11] = "Summoned"] = 11;
        return values;
    })();

    SC2APIProtocol.DamageBonus = (function() {

        function DamageBonus(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DamageBonus.prototype.attribute = 1;
        DamageBonus.prototype.bonus = 0;

        DamageBonus.create = function create(properties) {
            return new DamageBonus(properties);
        };

        DamageBonus.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.attribute != null && Object.hasOwnProperty.call(m, "attribute"))
                w.uint32(8).int32(m.attribute);
            if (m.bonus != null && Object.hasOwnProperty.call(m, "bonus"))
                w.uint32(21).float(m.bonus);
            return w;
        };

        DamageBonus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        DamageBonus.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.DamageBonus();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.attribute = r.int32();
                    break;
                case 2:
                    m.bonus = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DamageBonus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        DamageBonus.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.attribute != null && m.hasOwnProperty("attribute")) {
                switch (m.attribute) {
                default:
                    return "attribute: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
            }
            if (m.bonus != null && m.hasOwnProperty("bonus")) {
                if (typeof m.bonus !== "number")
                    return "bonus: number expected";
            }
            return null;
        };

        DamageBonus.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.DamageBonus)
                return d;
            var m = new $root.SC2APIProtocol.DamageBonus();
            switch (d.attribute) {
            case "Light":
            case 1:
                m.attribute = 1;
                break;
            case "Armored":
            case 2:
                m.attribute = 2;
                break;
            case "Biological":
            case 3:
                m.attribute = 3;
                break;
            case "Mechanical":
            case 4:
                m.attribute = 4;
                break;
            case "Robotic":
            case 5:
                m.attribute = 5;
                break;
            case "Psionic":
            case 6:
                m.attribute = 6;
                break;
            case "Massive":
            case 7:
                m.attribute = 7;
                break;
            case "Structure":
            case 8:
                m.attribute = 8;
                break;
            case "Hover":
            case 9:
                m.attribute = 9;
                break;
            case "Heroic":
            case 10:
                m.attribute = 10;
                break;
            case "Summoned":
            case 11:
                m.attribute = 11;
                break;
            }
            if (d.bonus != null) {
                m.bonus = Number(d.bonus);
            }
            return m;
        };

        DamageBonus.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.attribute = o.enums === String ? "Light" : 1;
                d.bonus = 0;
            }
            if (m.attribute != null && m.hasOwnProperty("attribute")) {
                d.attribute = o.enums === String ? $root.SC2APIProtocol.Attribute[m.attribute] : m.attribute;
            }
            if (m.bonus != null && m.hasOwnProperty("bonus")) {
                d.bonus = o.json && !isFinite(m.bonus) ? String(m.bonus) : m.bonus;
            }
            return d;
        };

        DamageBonus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DamageBonus;
    })();

    SC2APIProtocol.Weapon = (function() {

        function Weapon(p) {
            this.damageBonus = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Weapon.prototype.type = 1;
        Weapon.prototype.damage = 0;
        Weapon.prototype.damageBonus = $util.emptyArray;
        Weapon.prototype.attacks = 0;
        Weapon.prototype.range = 0;
        Weapon.prototype.speed = 0;

        Weapon.create = function create(properties) {
            return new Weapon(properties);
        };

        Weapon.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.damage != null && Object.hasOwnProperty.call(m, "damage"))
                w.uint32(21).float(m.damage);
            if (m.damageBonus != null && m.damageBonus.length) {
                for (var i = 0; i < m.damageBonus.length; ++i)
                    $root.SC2APIProtocol.DamageBonus.encode(m.damageBonus[i], w.uint32(26).fork()).ldelim();
            }
            if (m.attacks != null && Object.hasOwnProperty.call(m, "attacks"))
                w.uint32(32).uint32(m.attacks);
            if (m.range != null && Object.hasOwnProperty.call(m, "range"))
                w.uint32(45).float(m.range);
            if (m.speed != null && Object.hasOwnProperty.call(m, "speed"))
                w.uint32(53).float(m.speed);
            return w;
        };

        Weapon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Weapon.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Weapon();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.damage = r.float();
                    break;
                case 3:
                    if (!(m.damageBonus && m.damageBonus.length))
                        m.damageBonus = [];
                    m.damageBonus.push($root.SC2APIProtocol.DamageBonus.decode(r, r.uint32()));
                    break;
                case 4:
                    m.attacks = r.uint32();
                    break;
                case 5:
                    m.range = r.float();
                    break;
                case 6:
                    m.speed = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Weapon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Weapon.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.type != null && m.hasOwnProperty("type")) {
                switch (m.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            if (m.damage != null && m.hasOwnProperty("damage")) {
                if (typeof m.damage !== "number")
                    return "damage: number expected";
            }
            if (m.damageBonus != null && m.hasOwnProperty("damageBonus")) {
                if (!Array.isArray(m.damageBonus))
                    return "damageBonus: array expected";
                for (var i = 0; i < m.damageBonus.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.DamageBonus.verify(m.damageBonus[i]);
                        if (e)
                            return "damageBonus." + e;
                    }
                }
            }
            if (m.attacks != null && m.hasOwnProperty("attacks")) {
                if (!$util.isInteger(m.attacks))
                    return "attacks: integer expected";
            }
            if (m.range != null && m.hasOwnProperty("range")) {
                if (typeof m.range !== "number")
                    return "range: number expected";
            }
            if (m.speed != null && m.hasOwnProperty("speed")) {
                if (typeof m.speed !== "number")
                    return "speed: number expected";
            }
            return null;
        };

        Weapon.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Weapon)
                return d;
            var m = new $root.SC2APIProtocol.Weapon();
            switch (d.type) {
            case "Ground":
            case 1:
                m.type = 1;
                break;
            case "Air":
            case 2:
                m.type = 2;
                break;
            case "Any":
            case 3:
                m.type = 3;
                break;
            }
            if (d.damage != null) {
                m.damage = Number(d.damage);
            }
            if (d.damageBonus) {
                if (!Array.isArray(d.damageBonus))
                    throw TypeError(".SC2APIProtocol.Weapon.damageBonus: array expected");
                m.damageBonus = [];
                for (var i = 0; i < d.damageBonus.length; ++i) {
                    if (typeof d.damageBonus[i] !== "object")
                        throw TypeError(".SC2APIProtocol.Weapon.damageBonus: object expected");
                    m.damageBonus[i] = $root.SC2APIProtocol.DamageBonus.fromObject(d.damageBonus[i]);
                }
            }
            if (d.attacks != null) {
                m.attacks = d.attacks >>> 0;
            }
            if (d.range != null) {
                m.range = Number(d.range);
            }
            if (d.speed != null) {
                m.speed = Number(d.speed);
            }
            return m;
        };

        Weapon.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.damageBonus = [];
            }
            if (o.defaults) {
                d.type = o.enums === String ? "Ground" : 1;
                d.damage = 0;
                d.attacks = 0;
                d.range = 0;
                d.speed = 0;
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                d.type = o.enums === String ? $root.SC2APIProtocol.Weapon.TargetType[m.type] : m.type;
            }
            if (m.damage != null && m.hasOwnProperty("damage")) {
                d.damage = o.json && !isFinite(m.damage) ? String(m.damage) : m.damage;
            }
            if (m.damageBonus && m.damageBonus.length) {
                d.damageBonus = [];
                for (var j = 0; j < m.damageBonus.length; ++j) {
                    d.damageBonus[j] = $root.SC2APIProtocol.DamageBonus.toObject(m.damageBonus[j], o);
                }
            }
            if (m.attacks != null && m.hasOwnProperty("attacks")) {
                d.attacks = m.attacks;
            }
            if (m.range != null && m.hasOwnProperty("range")) {
                d.range = o.json && !isFinite(m.range) ? String(m.range) : m.range;
            }
            if (m.speed != null && m.hasOwnProperty("speed")) {
                d.speed = o.json && !isFinite(m.speed) ? String(m.speed) : m.speed;
            }
            return d;
        };

        Weapon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        Weapon.TargetType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "Ground"] = 1;
            values[valuesById[2] = "Air"] = 2;
            values[valuesById[3] = "Any"] = 3;
            return values;
        })();

        return Weapon;
    })();

    SC2APIProtocol.UnitTypeData = (function() {

        function UnitTypeData(p) {
            this.techAlias = [];
            this.attributes = [];
            this.weapons = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        UnitTypeData.prototype.unitId = 0;
        UnitTypeData.prototype.name = "";
        UnitTypeData.prototype.available = false;
        UnitTypeData.prototype.cargoSize = 0;
        UnitTypeData.prototype.mineralCost = 0;
        UnitTypeData.prototype.vespeneCost = 0;
        UnitTypeData.prototype.foodRequired = 0;
        UnitTypeData.prototype.foodProvided = 0;
        UnitTypeData.prototype.abilityId = 0;
        UnitTypeData.prototype.race = 0;
        UnitTypeData.prototype.buildTime = 0;
        UnitTypeData.prototype.hasVespene = false;
        UnitTypeData.prototype.hasMinerals = false;
        UnitTypeData.prototype.sightRange = 0;
        UnitTypeData.prototype.techAlias = $util.emptyArray;
        UnitTypeData.prototype.unitAlias = 0;
        UnitTypeData.prototype.techRequirement = 0;
        UnitTypeData.prototype.requireAttached = false;
        UnitTypeData.prototype.attributes = $util.emptyArray;
        UnitTypeData.prototype.movementSpeed = 0;
        UnitTypeData.prototype.armor = 0;
        UnitTypeData.prototype.weapons = $util.emptyArray;

        UnitTypeData.create = function create(properties) {
            return new UnitTypeData(properties);
        };

        UnitTypeData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitId != null && Object.hasOwnProperty.call(m, "unitId"))
                w.uint32(8).uint32(m.unitId);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.available != null && Object.hasOwnProperty.call(m, "available"))
                w.uint32(24).bool(m.available);
            if (m.cargoSize != null && Object.hasOwnProperty.call(m, "cargoSize"))
                w.uint32(32).uint32(m.cargoSize);
            if (m.attributes != null && m.attributes.length) {
                for (var i = 0; i < m.attributes.length; ++i)
                    w.uint32(64).int32(m.attributes[i]);
            }
            if (m.movementSpeed != null && Object.hasOwnProperty.call(m, "movementSpeed"))
                w.uint32(77).float(m.movementSpeed);
            if (m.armor != null && Object.hasOwnProperty.call(m, "armor"))
                w.uint32(85).float(m.armor);
            if (m.weapons != null && m.weapons.length) {
                for (var i = 0; i < m.weapons.length; ++i)
                    $root.SC2APIProtocol.Weapon.encode(m.weapons[i], w.uint32(90).fork()).ldelim();
            }
            if (m.mineralCost != null && Object.hasOwnProperty.call(m, "mineralCost"))
                w.uint32(96).uint32(m.mineralCost);
            if (m.vespeneCost != null && Object.hasOwnProperty.call(m, "vespeneCost"))
                w.uint32(104).uint32(m.vespeneCost);
            if (m.foodRequired != null && Object.hasOwnProperty.call(m, "foodRequired"))
                w.uint32(117).float(m.foodRequired);
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(120).uint32(m.abilityId);
            if (m.race != null && Object.hasOwnProperty.call(m, "race"))
                w.uint32(128).int32(m.race);
            if (m.buildTime != null && Object.hasOwnProperty.call(m, "buildTime"))
                w.uint32(141).float(m.buildTime);
            if (m.foodProvided != null && Object.hasOwnProperty.call(m, "foodProvided"))
                w.uint32(149).float(m.foodProvided);
            if (m.hasVespene != null && Object.hasOwnProperty.call(m, "hasVespene"))
                w.uint32(152).bool(m.hasVespene);
            if (m.hasMinerals != null && Object.hasOwnProperty.call(m, "hasMinerals"))
                w.uint32(160).bool(m.hasMinerals);
            if (m.techAlias != null && m.techAlias.length) {
                for (var i = 0; i < m.techAlias.length; ++i)
                    w.uint32(168).uint32(m.techAlias[i]);
            }
            if (m.unitAlias != null && Object.hasOwnProperty.call(m, "unitAlias"))
                w.uint32(176).uint32(m.unitAlias);
            if (m.techRequirement != null && Object.hasOwnProperty.call(m, "techRequirement"))
                w.uint32(184).uint32(m.techRequirement);
            if (m.requireAttached != null && Object.hasOwnProperty.call(m, "requireAttached"))
                w.uint32(192).bool(m.requireAttached);
            if (m.sightRange != null && Object.hasOwnProperty.call(m, "sightRange"))
                w.uint32(205).float(m.sightRange);
            return w;
        };

        UnitTypeData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        UnitTypeData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.UnitTypeData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitId = r.uint32();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    m.available = r.bool();
                    break;
                case 4:
                    m.cargoSize = r.uint32();
                    break;
                case 12:
                    m.mineralCost = r.uint32();
                    break;
                case 13:
                    m.vespeneCost = r.uint32();
                    break;
                case 14:
                    m.foodRequired = r.float();
                    break;
                case 18:
                    m.foodProvided = r.float();
                    break;
                case 15:
                    m.abilityId = r.uint32();
                    break;
                case 16:
                    m.race = r.int32();
                    break;
                case 17:
                    m.buildTime = r.float();
                    break;
                case 19:
                    m.hasVespene = r.bool();
                    break;
                case 20:
                    m.hasMinerals = r.bool();
                    break;
                case 25:
                    m.sightRange = r.float();
                    break;
                case 21:
                    if (!(m.techAlias && m.techAlias.length))
                        m.techAlias = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.techAlias.push(r.uint32());
                    } else
                        m.techAlias.push(r.uint32());
                    break;
                case 22:
                    m.unitAlias = r.uint32();
                    break;
                case 23:
                    m.techRequirement = r.uint32();
                    break;
                case 24:
                    m.requireAttached = r.bool();
                    break;
                case 8:
                    if (!(m.attributes && m.attributes.length))
                        m.attributes = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.attributes.push(r.int32());
                    } else
                        m.attributes.push(r.int32());
                    break;
                case 9:
                    m.movementSpeed = r.float();
                    break;
                case 10:
                    m.armor = r.float();
                    break;
                case 11:
                    if (!(m.weapons && m.weapons.length))
                        m.weapons = [];
                    m.weapons.push($root.SC2APIProtocol.Weapon.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        UnitTypeData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        UnitTypeData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitId != null && m.hasOwnProperty("unitId")) {
                if (!$util.isInteger(m.unitId))
                    return "unitId: integer expected";
            }
            if (m.name != null && m.hasOwnProperty("name")) {
                if (!$util.isString(m.name))
                    return "name: string expected";
            }
            if (m.available != null && m.hasOwnProperty("available")) {
                if (typeof m.available !== "boolean")
                    return "available: boolean expected";
            }
            if (m.cargoSize != null && m.hasOwnProperty("cargoSize")) {
                if (!$util.isInteger(m.cargoSize))
                    return "cargoSize: integer expected";
            }
            if (m.mineralCost != null && m.hasOwnProperty("mineralCost")) {
                if (!$util.isInteger(m.mineralCost))
                    return "mineralCost: integer expected";
            }
            if (m.vespeneCost != null && m.hasOwnProperty("vespeneCost")) {
                if (!$util.isInteger(m.vespeneCost))
                    return "vespeneCost: integer expected";
            }
            if (m.foodRequired != null && m.hasOwnProperty("foodRequired")) {
                if (typeof m.foodRequired !== "number")
                    return "foodRequired: number expected";
            }
            if (m.foodProvided != null && m.hasOwnProperty("foodProvided")) {
                if (typeof m.foodProvided !== "number")
                    return "foodProvided: number expected";
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.race != null && m.hasOwnProperty("race")) {
                switch (m.race) {
                default:
                    return "race: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.buildTime != null && m.hasOwnProperty("buildTime")) {
                if (typeof m.buildTime !== "number")
                    return "buildTime: number expected";
            }
            if (m.hasVespene != null && m.hasOwnProperty("hasVespene")) {
                if (typeof m.hasVespene !== "boolean")
                    return "hasVespene: boolean expected";
            }
            if (m.hasMinerals != null && m.hasOwnProperty("hasMinerals")) {
                if (typeof m.hasMinerals !== "boolean")
                    return "hasMinerals: boolean expected";
            }
            if (m.sightRange != null && m.hasOwnProperty("sightRange")) {
                if (typeof m.sightRange !== "number")
                    return "sightRange: number expected";
            }
            if (m.techAlias != null && m.hasOwnProperty("techAlias")) {
                if (!Array.isArray(m.techAlias))
                    return "techAlias: array expected";
                for (var i = 0; i < m.techAlias.length; ++i) {
                    if (!$util.isInteger(m.techAlias[i]))
                        return "techAlias: integer[] expected";
                }
            }
            if (m.unitAlias != null && m.hasOwnProperty("unitAlias")) {
                if (!$util.isInteger(m.unitAlias))
                    return "unitAlias: integer expected";
            }
            if (m.techRequirement != null && m.hasOwnProperty("techRequirement")) {
                if (!$util.isInteger(m.techRequirement))
                    return "techRequirement: integer expected";
            }
            if (m.requireAttached != null && m.hasOwnProperty("requireAttached")) {
                if (typeof m.requireAttached !== "boolean")
                    return "requireAttached: boolean expected";
            }
            if (m.attributes != null && m.hasOwnProperty("attributes")) {
                if (!Array.isArray(m.attributes))
                    return "attributes: array expected";
                for (var i = 0; i < m.attributes.length; ++i) {
                    switch (m.attributes[i]) {
                    default:
                        return "attributes: enum value[] expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                        break;
                    }
                }
            }
            if (m.movementSpeed != null && m.hasOwnProperty("movementSpeed")) {
                if (typeof m.movementSpeed !== "number")
                    return "movementSpeed: number expected";
            }
            if (m.armor != null && m.hasOwnProperty("armor")) {
                if (typeof m.armor !== "number")
                    return "armor: number expected";
            }
            if (m.weapons != null && m.hasOwnProperty("weapons")) {
                if (!Array.isArray(m.weapons))
                    return "weapons: array expected";
                for (var i = 0; i < m.weapons.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.Weapon.verify(m.weapons[i]);
                        if (e)
                            return "weapons." + e;
                    }
                }
            }
            return null;
        };

        UnitTypeData.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.UnitTypeData)
                return d;
            var m = new $root.SC2APIProtocol.UnitTypeData();
            if (d.unitId != null) {
                m.unitId = d.unitId >>> 0;
            }
            if (d.name != null) {
                m.name = String(d.name);
            }
            if (d.available != null) {
                m.available = Boolean(d.available);
            }
            if (d.cargoSize != null) {
                m.cargoSize = d.cargoSize >>> 0;
            }
            if (d.mineralCost != null) {
                m.mineralCost = d.mineralCost >>> 0;
            }
            if (d.vespeneCost != null) {
                m.vespeneCost = d.vespeneCost >>> 0;
            }
            if (d.foodRequired != null) {
                m.foodRequired = Number(d.foodRequired);
            }
            if (d.foodProvided != null) {
                m.foodProvided = Number(d.foodProvided);
            }
            if (d.abilityId != null) {
                m.abilityId = d.abilityId >>> 0;
            }
            switch (d.race) {
            case "NoRace":
            case 0:
                m.race = 0;
                break;
            case "Terran":
            case 1:
                m.race = 1;
                break;
            case "Zerg":
            case 2:
                m.race = 2;
                break;
            case "Protoss":
            case 3:
                m.race = 3;
                break;
            case "Random":
            case 4:
                m.race = 4;
                break;
            }
            if (d.buildTime != null) {
                m.buildTime = Number(d.buildTime);
            }
            if (d.hasVespene != null) {
                m.hasVespene = Boolean(d.hasVespene);
            }
            if (d.hasMinerals != null) {
                m.hasMinerals = Boolean(d.hasMinerals);
            }
            if (d.sightRange != null) {
                m.sightRange = Number(d.sightRange);
            }
            if (d.techAlias) {
                if (!Array.isArray(d.techAlias))
                    throw TypeError(".SC2APIProtocol.UnitTypeData.techAlias: array expected");
                m.techAlias = [];
                for (var i = 0; i < d.techAlias.length; ++i) {
                    m.techAlias[i] = d.techAlias[i] >>> 0;
                }
            }
            if (d.unitAlias != null) {
                m.unitAlias = d.unitAlias >>> 0;
            }
            if (d.techRequirement != null) {
                m.techRequirement = d.techRequirement >>> 0;
            }
            if (d.requireAttached != null) {
                m.requireAttached = Boolean(d.requireAttached);
            }
            if (d.attributes) {
                if (!Array.isArray(d.attributes))
                    throw TypeError(".SC2APIProtocol.UnitTypeData.attributes: array expected");
                m.attributes = [];
                for (var i = 0; i < d.attributes.length; ++i) {
                    switch (d.attributes[i]) {
                    default:
                    case "Light":
                    case 1:
                        m.attributes[i] = 1;
                        break;
                    case "Armored":
                    case 2:
                        m.attributes[i] = 2;
                        break;
                    case "Biological":
                    case 3:
                        m.attributes[i] = 3;
                        break;
                    case "Mechanical":
                    case 4:
                        m.attributes[i] = 4;
                        break;
                    case "Robotic":
                    case 5:
                        m.attributes[i] = 5;
                        break;
                    case "Psionic":
                    case 6:
                        m.attributes[i] = 6;
                        break;
                    case "Massive":
                    case 7:
                        m.attributes[i] = 7;
                        break;
                    case "Structure":
                    case 8:
                        m.attributes[i] = 8;
                        break;
                    case "Hover":
                    case 9:
                        m.attributes[i] = 9;
                        break;
                    case "Heroic":
                    case 10:
                        m.attributes[i] = 10;
                        break;
                    case "Summoned":
                    case 11:
                        m.attributes[i] = 11;
                        break;
                    }
                }
            }
            if (d.movementSpeed != null) {
                m.movementSpeed = Number(d.movementSpeed);
            }
            if (d.armor != null) {
                m.armor = Number(d.armor);
            }
            if (d.weapons) {
                if (!Array.isArray(d.weapons))
                    throw TypeError(".SC2APIProtocol.UnitTypeData.weapons: array expected");
                m.weapons = [];
                for (var i = 0; i < d.weapons.length; ++i) {
                    if (typeof d.weapons[i] !== "object")
                        throw TypeError(".SC2APIProtocol.UnitTypeData.weapons: object expected");
                    m.weapons[i] = $root.SC2APIProtocol.Weapon.fromObject(d.weapons[i]);
                }
            }
            return m;
        };

        UnitTypeData.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.attributes = [];
                d.weapons = [];
                d.techAlias = [];
            }
            if (o.defaults) {
                d.unitId = 0;
                d.name = "";
                d.available = false;
                d.cargoSize = 0;
                d.movementSpeed = 0;
                d.armor = 0;
                d.mineralCost = 0;
                d.vespeneCost = 0;
                d.foodRequired = 0;
                d.abilityId = 0;
                d.race = o.enums === String ? "NoRace" : 0;
                d.buildTime = 0;
                d.foodProvided = 0;
                d.hasVespene = false;
                d.hasMinerals = false;
                d.unitAlias = 0;
                d.techRequirement = 0;
                d.requireAttached = false;
                d.sightRange = 0;
            }
            if (m.unitId != null && m.hasOwnProperty("unitId")) {
                d.unitId = m.unitId;
            }
            if (m.name != null && m.hasOwnProperty("name")) {
                d.name = m.name;
            }
            if (m.available != null && m.hasOwnProperty("available")) {
                d.available = m.available;
            }
            if (m.cargoSize != null && m.hasOwnProperty("cargoSize")) {
                d.cargoSize = m.cargoSize;
            }
            if (m.attributes && m.attributes.length) {
                d.attributes = [];
                for (var j = 0; j < m.attributes.length; ++j) {
                    d.attributes[j] = o.enums === String ? $root.SC2APIProtocol.Attribute[m.attributes[j]] : m.attributes[j];
                }
            }
            if (m.movementSpeed != null && m.hasOwnProperty("movementSpeed")) {
                d.movementSpeed = o.json && !isFinite(m.movementSpeed) ? String(m.movementSpeed) : m.movementSpeed;
            }
            if (m.armor != null && m.hasOwnProperty("armor")) {
                d.armor = o.json && !isFinite(m.armor) ? String(m.armor) : m.armor;
            }
            if (m.weapons && m.weapons.length) {
                d.weapons = [];
                for (var j = 0; j < m.weapons.length; ++j) {
                    d.weapons[j] = $root.SC2APIProtocol.Weapon.toObject(m.weapons[j], o);
                }
            }
            if (m.mineralCost != null && m.hasOwnProperty("mineralCost")) {
                d.mineralCost = m.mineralCost;
            }
            if (m.vespeneCost != null && m.hasOwnProperty("vespeneCost")) {
                d.vespeneCost = m.vespeneCost;
            }
            if (m.foodRequired != null && m.hasOwnProperty("foodRequired")) {
                d.foodRequired = o.json && !isFinite(m.foodRequired) ? String(m.foodRequired) : m.foodRequired;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.race != null && m.hasOwnProperty("race")) {
                d.race = o.enums === String ? $root.SC2APIProtocol.Race[m.race] : m.race;
            }
            if (m.buildTime != null && m.hasOwnProperty("buildTime")) {
                d.buildTime = o.json && !isFinite(m.buildTime) ? String(m.buildTime) : m.buildTime;
            }
            if (m.foodProvided != null && m.hasOwnProperty("foodProvided")) {
                d.foodProvided = o.json && !isFinite(m.foodProvided) ? String(m.foodProvided) : m.foodProvided;
            }
            if (m.hasVespene != null && m.hasOwnProperty("hasVespene")) {
                d.hasVespene = m.hasVespene;
            }
            if (m.hasMinerals != null && m.hasOwnProperty("hasMinerals")) {
                d.hasMinerals = m.hasMinerals;
            }
            if (m.techAlias && m.techAlias.length) {
                d.techAlias = [];
                for (var j = 0; j < m.techAlias.length; ++j) {
                    d.techAlias[j] = m.techAlias[j];
                }
            }
            if (m.unitAlias != null && m.hasOwnProperty("unitAlias")) {
                d.unitAlias = m.unitAlias;
            }
            if (m.techRequirement != null && m.hasOwnProperty("techRequirement")) {
                d.techRequirement = m.techRequirement;
            }
            if (m.requireAttached != null && m.hasOwnProperty("requireAttached")) {
                d.requireAttached = m.requireAttached;
            }
            if (m.sightRange != null && m.hasOwnProperty("sightRange")) {
                d.sightRange = o.json && !isFinite(m.sightRange) ? String(m.sightRange) : m.sightRange;
            }
            return d;
        };

        UnitTypeData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UnitTypeData;
    })();

    SC2APIProtocol.UpgradeData = (function() {

        function UpgradeData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        UpgradeData.prototype.upgradeId = 0;
        UpgradeData.prototype.name = "";
        UpgradeData.prototype.mineralCost = 0;
        UpgradeData.prototype.vespeneCost = 0;
        UpgradeData.prototype.researchTime = 0;
        UpgradeData.prototype.abilityId = 0;

        UpgradeData.create = function create(properties) {
            return new UpgradeData(properties);
        };

        UpgradeData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.upgradeId != null && Object.hasOwnProperty.call(m, "upgradeId"))
                w.uint32(8).uint32(m.upgradeId);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.mineralCost != null && Object.hasOwnProperty.call(m, "mineralCost"))
                w.uint32(24).uint32(m.mineralCost);
            if (m.vespeneCost != null && Object.hasOwnProperty.call(m, "vespeneCost"))
                w.uint32(32).uint32(m.vespeneCost);
            if (m.researchTime != null && Object.hasOwnProperty.call(m, "researchTime"))
                w.uint32(45).float(m.researchTime);
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(48).uint32(m.abilityId);
            return w;
        };

        UpgradeData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        UpgradeData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.UpgradeData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.upgradeId = r.uint32();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    m.mineralCost = r.uint32();
                    break;
                case 4:
                    m.vespeneCost = r.uint32();
                    break;
                case 5:
                    m.researchTime = r.float();
                    break;
                case 6:
                    m.abilityId = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        UpgradeData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        UpgradeData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.upgradeId != null && m.hasOwnProperty("upgradeId")) {
                if (!$util.isInteger(m.upgradeId))
                    return "upgradeId: integer expected";
            }
            if (m.name != null && m.hasOwnProperty("name")) {
                if (!$util.isString(m.name))
                    return "name: string expected";
            }
            if (m.mineralCost != null && m.hasOwnProperty("mineralCost")) {
                if (!$util.isInteger(m.mineralCost))
                    return "mineralCost: integer expected";
            }
            if (m.vespeneCost != null && m.hasOwnProperty("vespeneCost")) {
                if (!$util.isInteger(m.vespeneCost))
                    return "vespeneCost: integer expected";
            }
            if (m.researchTime != null && m.hasOwnProperty("researchTime")) {
                if (typeof m.researchTime !== "number")
                    return "researchTime: number expected";
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            return null;
        };

        UpgradeData.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.UpgradeData)
                return d;
            var m = new $root.SC2APIProtocol.UpgradeData();
            if (d.upgradeId != null) {
                m.upgradeId = d.upgradeId >>> 0;
            }
            if (d.name != null) {
                m.name = String(d.name);
            }
            if (d.mineralCost != null) {
                m.mineralCost = d.mineralCost >>> 0;
            }
            if (d.vespeneCost != null) {
                m.vespeneCost = d.vespeneCost >>> 0;
            }
            if (d.researchTime != null) {
                m.researchTime = Number(d.researchTime);
            }
            if (d.abilityId != null) {
                m.abilityId = d.abilityId >>> 0;
            }
            return m;
        };

        UpgradeData.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.upgradeId = 0;
                d.name = "";
                d.mineralCost = 0;
                d.vespeneCost = 0;
                d.researchTime = 0;
                d.abilityId = 0;
            }
            if (m.upgradeId != null && m.hasOwnProperty("upgradeId")) {
                d.upgradeId = m.upgradeId;
            }
            if (m.name != null && m.hasOwnProperty("name")) {
                d.name = m.name;
            }
            if (m.mineralCost != null && m.hasOwnProperty("mineralCost")) {
                d.mineralCost = m.mineralCost;
            }
            if (m.vespeneCost != null && m.hasOwnProperty("vespeneCost")) {
                d.vespeneCost = m.vespeneCost;
            }
            if (m.researchTime != null && m.hasOwnProperty("researchTime")) {
                d.researchTime = o.json && !isFinite(m.researchTime) ? String(m.researchTime) : m.researchTime;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            return d;
        };

        UpgradeData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpgradeData;
    })();

    SC2APIProtocol.BuffData = (function() {

        function BuffData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        BuffData.prototype.buffId = 0;
        BuffData.prototype.name = "";

        BuffData.create = function create(properties) {
            return new BuffData(properties);
        };

        BuffData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.buffId != null && Object.hasOwnProperty.call(m, "buffId"))
                w.uint32(8).uint32(m.buffId);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            return w;
        };

        BuffData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        BuffData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.BuffData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.buffId = r.uint32();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        BuffData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        BuffData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.buffId != null && m.hasOwnProperty("buffId")) {
                if (!$util.isInteger(m.buffId))
                    return "buffId: integer expected";
            }
            if (m.name != null && m.hasOwnProperty("name")) {
                if (!$util.isString(m.name))
                    return "name: string expected";
            }
            return null;
        };

        BuffData.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.BuffData)
                return d;
            var m = new $root.SC2APIProtocol.BuffData();
            if (d.buffId != null) {
                m.buffId = d.buffId >>> 0;
            }
            if (d.name != null) {
                m.name = String(d.name);
            }
            return m;
        };

        BuffData.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.buffId = 0;
                d.name = "";
            }
            if (m.buffId != null && m.hasOwnProperty("buffId")) {
                d.buffId = m.buffId;
            }
            if (m.name != null && m.hasOwnProperty("name")) {
                d.name = m.name;
            }
            return d;
        };

        BuffData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BuffData;
    })();

    SC2APIProtocol.EffectData = (function() {

        function EffectData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        EffectData.prototype.effectId = 0;
        EffectData.prototype.name = "";
        EffectData.prototype.friendlyName = "";
        EffectData.prototype.radius = 0;

        EffectData.create = function create(properties) {
            return new EffectData(properties);
        };

        EffectData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.effectId != null && Object.hasOwnProperty.call(m, "effectId"))
                w.uint32(8).uint32(m.effectId);
            if (m.name != null && Object.hasOwnProperty.call(m, "name"))
                w.uint32(18).string(m.name);
            if (m.friendlyName != null && Object.hasOwnProperty.call(m, "friendlyName"))
                w.uint32(26).string(m.friendlyName);
            if (m.radius != null && Object.hasOwnProperty.call(m, "radius"))
                w.uint32(37).float(m.radius);
            return w;
        };

        EffectData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        EffectData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.EffectData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.effectId = r.uint32();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    m.friendlyName = r.string();
                    break;
                case 4:
                    m.radius = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        EffectData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        EffectData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.effectId != null && m.hasOwnProperty("effectId")) {
                if (!$util.isInteger(m.effectId))
                    return "effectId: integer expected";
            }
            if (m.name != null && m.hasOwnProperty("name")) {
                if (!$util.isString(m.name))
                    return "name: string expected";
            }
            if (m.friendlyName != null && m.hasOwnProperty("friendlyName")) {
                if (!$util.isString(m.friendlyName))
                    return "friendlyName: string expected";
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                if (typeof m.radius !== "number")
                    return "radius: number expected";
            }
            return null;
        };

        EffectData.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.EffectData)
                return d;
            var m = new $root.SC2APIProtocol.EffectData();
            if (d.effectId != null) {
                m.effectId = d.effectId >>> 0;
            }
            if (d.name != null) {
                m.name = String(d.name);
            }
            if (d.friendlyName != null) {
                m.friendlyName = String(d.friendlyName);
            }
            if (d.radius != null) {
                m.radius = Number(d.radius);
            }
            return m;
        };

        EffectData.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.effectId = 0;
                d.name = "";
                d.friendlyName = "";
                d.radius = 0;
            }
            if (m.effectId != null && m.hasOwnProperty("effectId")) {
                d.effectId = m.effectId;
            }
            if (m.name != null && m.hasOwnProperty("name")) {
                d.name = m.name;
            }
            if (m.friendlyName != null && m.hasOwnProperty("friendlyName")) {
                d.friendlyName = m.friendlyName;
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                d.radius = o.json && !isFinite(m.radius) ? String(m.radius) : m.radius;
            }
            return d;
        };

        EffectData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EffectData;
    })();

    SC2APIProtocol.ObservationUI = (function() {

        function ObservationUI(p) {
            this.groups = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ObservationUI.prototype.groups = $util.emptyArray;
        ObservationUI.prototype.single = null;
        ObservationUI.prototype.multi = null;
        ObservationUI.prototype.cargo = null;
        ObservationUI.prototype.production = null;

        var $oneOfFields;

        Object.defineProperty(ObservationUI.prototype, "panel", {
            get: $util.oneOfGetter($oneOfFields = ["single", "multi", "cargo", "production"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        ObservationUI.create = function create(properties) {
            return new ObservationUI(properties);
        };

        ObservationUI.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.groups != null && m.groups.length) {
                for (var i = 0; i < m.groups.length; ++i)
                    $root.SC2APIProtocol.ControlGroup.encode(m.groups[i], w.uint32(10).fork()).ldelim();
            }
            if (m.single != null && Object.hasOwnProperty.call(m, "single"))
                $root.SC2APIProtocol.SinglePanel.encode(m.single, w.uint32(18).fork()).ldelim();
            if (m.multi != null && Object.hasOwnProperty.call(m, "multi"))
                $root.SC2APIProtocol.MultiPanel.encode(m.multi, w.uint32(26).fork()).ldelim();
            if (m.cargo != null && Object.hasOwnProperty.call(m, "cargo"))
                $root.SC2APIProtocol.CargoPanel.encode(m.cargo, w.uint32(34).fork()).ldelim();
            if (m.production != null && Object.hasOwnProperty.call(m, "production"))
                $root.SC2APIProtocol.ProductionPanel.encode(m.production, w.uint32(42).fork()).ldelim();
            return w;
        };

        ObservationUI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ObservationUI.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ObservationUI();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.groups && m.groups.length))
                        m.groups = [];
                    m.groups.push($root.SC2APIProtocol.ControlGroup.decode(r, r.uint32()));
                    break;
                case 2:
                    m.single = $root.SC2APIProtocol.SinglePanel.decode(r, r.uint32());
                    break;
                case 3:
                    m.multi = $root.SC2APIProtocol.MultiPanel.decode(r, r.uint32());
                    break;
                case 4:
                    m.cargo = $root.SC2APIProtocol.CargoPanel.decode(r, r.uint32());
                    break;
                case 5:
                    m.production = $root.SC2APIProtocol.ProductionPanel.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ObservationUI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ObservationUI.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.groups != null && m.hasOwnProperty("groups")) {
                if (!Array.isArray(m.groups))
                    return "groups: array expected";
                for (var i = 0; i < m.groups.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.ControlGroup.verify(m.groups[i]);
                        if (e)
                            return "groups." + e;
                    }
                }
            }
            if (m.single != null && m.hasOwnProperty("single")) {
                p.panel = 1;
                {
                    var e = $root.SC2APIProtocol.SinglePanel.verify(m.single);
                    if (e)
                        return "single." + e;
                }
            }
            if (m.multi != null && m.hasOwnProperty("multi")) {
                if (p.panel === 1)
                    return "panel: multiple values";
                p.panel = 1;
                {
                    var e = $root.SC2APIProtocol.MultiPanel.verify(m.multi);
                    if (e)
                        return "multi." + e;
                }
            }
            if (m.cargo != null && m.hasOwnProperty("cargo")) {
                if (p.panel === 1)
                    return "panel: multiple values";
                p.panel = 1;
                {
                    var e = $root.SC2APIProtocol.CargoPanel.verify(m.cargo);
                    if (e)
                        return "cargo." + e;
                }
            }
            if (m.production != null && m.hasOwnProperty("production")) {
                if (p.panel === 1)
                    return "panel: multiple values";
                p.panel = 1;
                {
                    var e = $root.SC2APIProtocol.ProductionPanel.verify(m.production);
                    if (e)
                        return "production." + e;
                }
            }
            return null;
        };

        ObservationUI.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ObservationUI)
                return d;
            var m = new $root.SC2APIProtocol.ObservationUI();
            if (d.groups) {
                if (!Array.isArray(d.groups))
                    throw TypeError(".SC2APIProtocol.ObservationUI.groups: array expected");
                m.groups = [];
                for (var i = 0; i < d.groups.length; ++i) {
                    if (typeof d.groups[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ObservationUI.groups: object expected");
                    m.groups[i] = $root.SC2APIProtocol.ControlGroup.fromObject(d.groups[i]);
                }
            }
            if (d.single != null) {
                if (typeof d.single !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationUI.single: object expected");
                m.single = $root.SC2APIProtocol.SinglePanel.fromObject(d.single);
            }
            if (d.multi != null) {
                if (typeof d.multi !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationUI.multi: object expected");
                m.multi = $root.SC2APIProtocol.MultiPanel.fromObject(d.multi);
            }
            if (d.cargo != null) {
                if (typeof d.cargo !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationUI.cargo: object expected");
                m.cargo = $root.SC2APIProtocol.CargoPanel.fromObject(d.cargo);
            }
            if (d.production != null) {
                if (typeof d.production !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationUI.production: object expected");
                m.production = $root.SC2APIProtocol.ProductionPanel.fromObject(d.production);
            }
            return m;
        };

        ObservationUI.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.groups = [];
            }
            if (m.groups && m.groups.length) {
                d.groups = [];
                for (var j = 0; j < m.groups.length; ++j) {
                    d.groups[j] = $root.SC2APIProtocol.ControlGroup.toObject(m.groups[j], o);
                }
            }
            if (m.single != null && m.hasOwnProperty("single")) {
                d.single = $root.SC2APIProtocol.SinglePanel.toObject(m.single, o);
                if (o.oneofs)
                    d.panel = "single";
            }
            if (m.multi != null && m.hasOwnProperty("multi")) {
                d.multi = $root.SC2APIProtocol.MultiPanel.toObject(m.multi, o);
                if (o.oneofs)
                    d.panel = "multi";
            }
            if (m.cargo != null && m.hasOwnProperty("cargo")) {
                d.cargo = $root.SC2APIProtocol.CargoPanel.toObject(m.cargo, o);
                if (o.oneofs)
                    d.panel = "cargo";
            }
            if (m.production != null && m.hasOwnProperty("production")) {
                d.production = $root.SC2APIProtocol.ProductionPanel.toObject(m.production, o);
                if (o.oneofs)
                    d.panel = "production";
            }
            return d;
        };

        ObservationUI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ObservationUI;
    })();

    SC2APIProtocol.ControlGroup = (function() {

        function ControlGroup(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ControlGroup.prototype.controlGroupIndex = 0;
        ControlGroup.prototype.leaderUnitType = 0;
        ControlGroup.prototype.count = 0;

        ControlGroup.create = function create(properties) {
            return new ControlGroup(properties);
        };

        ControlGroup.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.controlGroupIndex != null && Object.hasOwnProperty.call(m, "controlGroupIndex"))
                w.uint32(8).uint32(m.controlGroupIndex);
            if (m.leaderUnitType != null && Object.hasOwnProperty.call(m, "leaderUnitType"))
                w.uint32(16).uint32(m.leaderUnitType);
            if (m.count != null && Object.hasOwnProperty.call(m, "count"))
                w.uint32(24).uint32(m.count);
            return w;
        };

        ControlGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ControlGroup.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ControlGroup();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.controlGroupIndex = r.uint32();
                    break;
                case 2:
                    m.leaderUnitType = r.uint32();
                    break;
                case 3:
                    m.count = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ControlGroup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ControlGroup.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.controlGroupIndex != null && m.hasOwnProperty("controlGroupIndex")) {
                if (!$util.isInteger(m.controlGroupIndex))
                    return "controlGroupIndex: integer expected";
            }
            if (m.leaderUnitType != null && m.hasOwnProperty("leaderUnitType")) {
                if (!$util.isInteger(m.leaderUnitType))
                    return "leaderUnitType: integer expected";
            }
            if (m.count != null && m.hasOwnProperty("count")) {
                if (!$util.isInteger(m.count))
                    return "count: integer expected";
            }
            return null;
        };

        ControlGroup.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ControlGroup)
                return d;
            var m = new $root.SC2APIProtocol.ControlGroup();
            if (d.controlGroupIndex != null) {
                m.controlGroupIndex = d.controlGroupIndex >>> 0;
            }
            if (d.leaderUnitType != null) {
                m.leaderUnitType = d.leaderUnitType >>> 0;
            }
            if (d.count != null) {
                m.count = d.count >>> 0;
            }
            return m;
        };

        ControlGroup.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.controlGroupIndex = 0;
                d.leaderUnitType = 0;
                d.count = 0;
            }
            if (m.controlGroupIndex != null && m.hasOwnProperty("controlGroupIndex")) {
                d.controlGroupIndex = m.controlGroupIndex;
            }
            if (m.leaderUnitType != null && m.hasOwnProperty("leaderUnitType")) {
                d.leaderUnitType = m.leaderUnitType;
            }
            if (m.count != null && m.hasOwnProperty("count")) {
                d.count = m.count;
            }
            return d;
        };

        ControlGroup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlGroup;
    })();

    SC2APIProtocol.UnitInfo = (function() {

        function UnitInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        UnitInfo.prototype.unitType = 0;
        UnitInfo.prototype.playerRelative = 0;
        UnitInfo.prototype.health = 0;
        UnitInfo.prototype.shields = 0;
        UnitInfo.prototype.energy = 0;
        UnitInfo.prototype.transportSlotsTaken = 0;
        UnitInfo.prototype.buildProgress = 0;
        UnitInfo.prototype.addOn = null;
        UnitInfo.prototype.maxHealth = 0;
        UnitInfo.prototype.maxShields = 0;
        UnitInfo.prototype.maxEnergy = 0;

        UnitInfo.create = function create(properties) {
            return new UnitInfo(properties);
        };

        UnitInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitType != null && Object.hasOwnProperty.call(m, "unitType"))
                w.uint32(8).uint32(m.unitType);
            if (m.playerRelative != null && Object.hasOwnProperty.call(m, "playerRelative"))
                w.uint32(16).uint32(m.playerRelative);
            if (m.health != null && Object.hasOwnProperty.call(m, "health"))
                w.uint32(24).int32(m.health);
            if (m.shields != null && Object.hasOwnProperty.call(m, "shields"))
                w.uint32(32).int32(m.shields);
            if (m.energy != null && Object.hasOwnProperty.call(m, "energy"))
                w.uint32(40).int32(m.energy);
            if (m.transportSlotsTaken != null && Object.hasOwnProperty.call(m, "transportSlotsTaken"))
                w.uint32(48).int32(m.transportSlotsTaken);
            if (m.buildProgress != null && Object.hasOwnProperty.call(m, "buildProgress"))
                w.uint32(61).float(m.buildProgress);
            if (m.addOn != null && Object.hasOwnProperty.call(m, "addOn"))
                $root.SC2APIProtocol.UnitInfo.encode(m.addOn, w.uint32(66).fork()).ldelim();
            if (m.maxHealth != null && Object.hasOwnProperty.call(m, "maxHealth"))
                w.uint32(72).int32(m.maxHealth);
            if (m.maxShields != null && Object.hasOwnProperty.call(m, "maxShields"))
                w.uint32(80).int32(m.maxShields);
            if (m.maxEnergy != null && Object.hasOwnProperty.call(m, "maxEnergy"))
                w.uint32(88).int32(m.maxEnergy);
            return w;
        };

        UnitInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        UnitInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.UnitInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitType = r.uint32();
                    break;
                case 2:
                    m.playerRelative = r.uint32();
                    break;
                case 3:
                    m.health = r.int32();
                    break;
                case 4:
                    m.shields = r.int32();
                    break;
                case 5:
                    m.energy = r.int32();
                    break;
                case 6:
                    m.transportSlotsTaken = r.int32();
                    break;
                case 7:
                    m.buildProgress = r.float();
                    break;
                case 8:
                    m.addOn = $root.SC2APIProtocol.UnitInfo.decode(r, r.uint32());
                    break;
                case 9:
                    m.maxHealth = r.int32();
                    break;
                case 10:
                    m.maxShields = r.int32();
                    break;
                case 11:
                    m.maxEnergy = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        UnitInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        UnitInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                if (!$util.isInteger(m.unitType))
                    return "unitType: integer expected";
            }
            if (m.playerRelative != null && m.hasOwnProperty("playerRelative")) {
                if (!$util.isInteger(m.playerRelative))
                    return "playerRelative: integer expected";
            }
            if (m.health != null && m.hasOwnProperty("health")) {
                if (!$util.isInteger(m.health))
                    return "health: integer expected";
            }
            if (m.shields != null && m.hasOwnProperty("shields")) {
                if (!$util.isInteger(m.shields))
                    return "shields: integer expected";
            }
            if (m.energy != null && m.hasOwnProperty("energy")) {
                if (!$util.isInteger(m.energy))
                    return "energy: integer expected";
            }
            if (m.transportSlotsTaken != null && m.hasOwnProperty("transportSlotsTaken")) {
                if (!$util.isInteger(m.transportSlotsTaken))
                    return "transportSlotsTaken: integer expected";
            }
            if (m.buildProgress != null && m.hasOwnProperty("buildProgress")) {
                if (typeof m.buildProgress !== "number")
                    return "buildProgress: number expected";
            }
            if (m.addOn != null && m.hasOwnProperty("addOn")) {
                {
                    var e = $root.SC2APIProtocol.UnitInfo.verify(m.addOn);
                    if (e)
                        return "addOn." + e;
                }
            }
            if (m.maxHealth != null && m.hasOwnProperty("maxHealth")) {
                if (!$util.isInteger(m.maxHealth))
                    return "maxHealth: integer expected";
            }
            if (m.maxShields != null && m.hasOwnProperty("maxShields")) {
                if (!$util.isInteger(m.maxShields))
                    return "maxShields: integer expected";
            }
            if (m.maxEnergy != null && m.hasOwnProperty("maxEnergy")) {
                if (!$util.isInteger(m.maxEnergy))
                    return "maxEnergy: integer expected";
            }
            return null;
        };

        UnitInfo.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.UnitInfo)
                return d;
            var m = new $root.SC2APIProtocol.UnitInfo();
            if (d.unitType != null) {
                m.unitType = d.unitType >>> 0;
            }
            if (d.playerRelative != null) {
                m.playerRelative = d.playerRelative >>> 0;
            }
            if (d.health != null) {
                m.health = d.health | 0;
            }
            if (d.shields != null) {
                m.shields = d.shields | 0;
            }
            if (d.energy != null) {
                m.energy = d.energy | 0;
            }
            if (d.transportSlotsTaken != null) {
                m.transportSlotsTaken = d.transportSlotsTaken | 0;
            }
            if (d.buildProgress != null) {
                m.buildProgress = Number(d.buildProgress);
            }
            if (d.addOn != null) {
                if (typeof d.addOn !== "object")
                    throw TypeError(".SC2APIProtocol.UnitInfo.addOn: object expected");
                m.addOn = $root.SC2APIProtocol.UnitInfo.fromObject(d.addOn);
            }
            if (d.maxHealth != null) {
                m.maxHealth = d.maxHealth | 0;
            }
            if (d.maxShields != null) {
                m.maxShields = d.maxShields | 0;
            }
            if (d.maxEnergy != null) {
                m.maxEnergy = d.maxEnergy | 0;
            }
            return m;
        };

        UnitInfo.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.unitType = 0;
                d.playerRelative = 0;
                d.health = 0;
                d.shields = 0;
                d.energy = 0;
                d.transportSlotsTaken = 0;
                d.buildProgress = 0;
                d.addOn = null;
                d.maxHealth = 0;
                d.maxShields = 0;
                d.maxEnergy = 0;
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                d.unitType = m.unitType;
            }
            if (m.playerRelative != null && m.hasOwnProperty("playerRelative")) {
                d.playerRelative = m.playerRelative;
            }
            if (m.health != null && m.hasOwnProperty("health")) {
                d.health = m.health;
            }
            if (m.shields != null && m.hasOwnProperty("shields")) {
                d.shields = m.shields;
            }
            if (m.energy != null && m.hasOwnProperty("energy")) {
                d.energy = m.energy;
            }
            if (m.transportSlotsTaken != null && m.hasOwnProperty("transportSlotsTaken")) {
                d.transportSlotsTaken = m.transportSlotsTaken;
            }
            if (m.buildProgress != null && m.hasOwnProperty("buildProgress")) {
                d.buildProgress = o.json && !isFinite(m.buildProgress) ? String(m.buildProgress) : m.buildProgress;
            }
            if (m.addOn != null && m.hasOwnProperty("addOn")) {
                d.addOn = $root.SC2APIProtocol.UnitInfo.toObject(m.addOn, o);
            }
            if (m.maxHealth != null && m.hasOwnProperty("maxHealth")) {
                d.maxHealth = m.maxHealth;
            }
            if (m.maxShields != null && m.hasOwnProperty("maxShields")) {
                d.maxShields = m.maxShields;
            }
            if (m.maxEnergy != null && m.hasOwnProperty("maxEnergy")) {
                d.maxEnergy = m.maxEnergy;
            }
            return d;
        };

        UnitInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UnitInfo;
    })();

    SC2APIProtocol.SinglePanel = (function() {

        function SinglePanel(p) {
            this.buffs = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        SinglePanel.prototype.unit = null;
        SinglePanel.prototype.attackUpgradeLevel = 0;
        SinglePanel.prototype.armorUpgradeLevel = 0;
        SinglePanel.prototype.shieldUpgradeLevel = 0;
        SinglePanel.prototype.buffs = $util.emptyArray;

        SinglePanel.create = function create(properties) {
            return new SinglePanel(properties);
        };

        SinglePanel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unit != null && Object.hasOwnProperty.call(m, "unit"))
                $root.SC2APIProtocol.UnitInfo.encode(m.unit, w.uint32(10).fork()).ldelim();
            if (m.attackUpgradeLevel != null && Object.hasOwnProperty.call(m, "attackUpgradeLevel"))
                w.uint32(16).int32(m.attackUpgradeLevel);
            if (m.armorUpgradeLevel != null && Object.hasOwnProperty.call(m, "armorUpgradeLevel"))
                w.uint32(24).int32(m.armorUpgradeLevel);
            if (m.shieldUpgradeLevel != null && Object.hasOwnProperty.call(m, "shieldUpgradeLevel"))
                w.uint32(32).int32(m.shieldUpgradeLevel);
            if (m.buffs != null && m.buffs.length) {
                for (var i = 0; i < m.buffs.length; ++i)
                    w.uint32(40).int32(m.buffs[i]);
            }
            return w;
        };

        SinglePanel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        SinglePanel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.SinglePanel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unit = $root.SC2APIProtocol.UnitInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.attackUpgradeLevel = r.int32();
                    break;
                case 3:
                    m.armorUpgradeLevel = r.int32();
                    break;
                case 4:
                    m.shieldUpgradeLevel = r.int32();
                    break;
                case 5:
                    if (!(m.buffs && m.buffs.length))
                        m.buffs = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.buffs.push(r.int32());
                    } else
                        m.buffs.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        SinglePanel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        SinglePanel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unit != null && m.hasOwnProperty("unit")) {
                {
                    var e = $root.SC2APIProtocol.UnitInfo.verify(m.unit);
                    if (e)
                        return "unit." + e;
                }
            }
            if (m.attackUpgradeLevel != null && m.hasOwnProperty("attackUpgradeLevel")) {
                if (!$util.isInteger(m.attackUpgradeLevel))
                    return "attackUpgradeLevel: integer expected";
            }
            if (m.armorUpgradeLevel != null && m.hasOwnProperty("armorUpgradeLevel")) {
                if (!$util.isInteger(m.armorUpgradeLevel))
                    return "armorUpgradeLevel: integer expected";
            }
            if (m.shieldUpgradeLevel != null && m.hasOwnProperty("shieldUpgradeLevel")) {
                if (!$util.isInteger(m.shieldUpgradeLevel))
                    return "shieldUpgradeLevel: integer expected";
            }
            if (m.buffs != null && m.hasOwnProperty("buffs")) {
                if (!Array.isArray(m.buffs))
                    return "buffs: array expected";
                for (var i = 0; i < m.buffs.length; ++i) {
                    if (!$util.isInteger(m.buffs[i]))
                        return "buffs: integer[] expected";
                }
            }
            return null;
        };

        SinglePanel.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.SinglePanel)
                return d;
            var m = new $root.SC2APIProtocol.SinglePanel();
            if (d.unit != null) {
                if (typeof d.unit !== "object")
                    throw TypeError(".SC2APIProtocol.SinglePanel.unit: object expected");
                m.unit = $root.SC2APIProtocol.UnitInfo.fromObject(d.unit);
            }
            if (d.attackUpgradeLevel != null) {
                m.attackUpgradeLevel = d.attackUpgradeLevel | 0;
            }
            if (d.armorUpgradeLevel != null) {
                m.armorUpgradeLevel = d.armorUpgradeLevel | 0;
            }
            if (d.shieldUpgradeLevel != null) {
                m.shieldUpgradeLevel = d.shieldUpgradeLevel | 0;
            }
            if (d.buffs) {
                if (!Array.isArray(d.buffs))
                    throw TypeError(".SC2APIProtocol.SinglePanel.buffs: array expected");
                m.buffs = [];
                for (var i = 0; i < d.buffs.length; ++i) {
                    m.buffs[i] = d.buffs[i] | 0;
                }
            }
            return m;
        };

        SinglePanel.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.buffs = [];
            }
            if (o.defaults) {
                d.unit = null;
                d.attackUpgradeLevel = 0;
                d.armorUpgradeLevel = 0;
                d.shieldUpgradeLevel = 0;
            }
            if (m.unit != null && m.hasOwnProperty("unit")) {
                d.unit = $root.SC2APIProtocol.UnitInfo.toObject(m.unit, o);
            }
            if (m.attackUpgradeLevel != null && m.hasOwnProperty("attackUpgradeLevel")) {
                d.attackUpgradeLevel = m.attackUpgradeLevel;
            }
            if (m.armorUpgradeLevel != null && m.hasOwnProperty("armorUpgradeLevel")) {
                d.armorUpgradeLevel = m.armorUpgradeLevel;
            }
            if (m.shieldUpgradeLevel != null && m.hasOwnProperty("shieldUpgradeLevel")) {
                d.shieldUpgradeLevel = m.shieldUpgradeLevel;
            }
            if (m.buffs && m.buffs.length) {
                d.buffs = [];
                for (var j = 0; j < m.buffs.length; ++j) {
                    d.buffs[j] = m.buffs[j];
                }
            }
            return d;
        };

        SinglePanel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SinglePanel;
    })();

    SC2APIProtocol.MultiPanel = (function() {

        function MultiPanel(p) {
            this.units = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        MultiPanel.prototype.units = $util.emptyArray;

        MultiPanel.create = function create(properties) {
            return new MultiPanel(properties);
        };

        MultiPanel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.units != null && m.units.length) {
                for (var i = 0; i < m.units.length; ++i)
                    $root.SC2APIProtocol.UnitInfo.encode(m.units[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        MultiPanel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        MultiPanel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.MultiPanel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.units && m.units.length))
                        m.units = [];
                    m.units.push($root.SC2APIProtocol.UnitInfo.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        MultiPanel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        MultiPanel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.units != null && m.hasOwnProperty("units")) {
                if (!Array.isArray(m.units))
                    return "units: array expected";
                for (var i = 0; i < m.units.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.UnitInfo.verify(m.units[i]);
                        if (e)
                            return "units." + e;
                    }
                }
            }
            return null;
        };

        MultiPanel.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.MultiPanel)
                return d;
            var m = new $root.SC2APIProtocol.MultiPanel();
            if (d.units) {
                if (!Array.isArray(d.units))
                    throw TypeError(".SC2APIProtocol.MultiPanel.units: array expected");
                m.units = [];
                for (var i = 0; i < d.units.length; ++i) {
                    if (typeof d.units[i] !== "object")
                        throw TypeError(".SC2APIProtocol.MultiPanel.units: object expected");
                    m.units[i] = $root.SC2APIProtocol.UnitInfo.fromObject(d.units[i]);
                }
            }
            return m;
        };

        MultiPanel.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.units = [];
            }
            if (m.units && m.units.length) {
                d.units = [];
                for (var j = 0; j < m.units.length; ++j) {
                    d.units[j] = $root.SC2APIProtocol.UnitInfo.toObject(m.units[j], o);
                }
            }
            return d;
        };

        MultiPanel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MultiPanel;
    })();

    SC2APIProtocol.CargoPanel = (function() {

        function CargoPanel(p) {
            this.passengers = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        CargoPanel.prototype.unit = null;
        CargoPanel.prototype.passengers = $util.emptyArray;
        CargoPanel.prototype.slotsAvailable = 0;

        CargoPanel.create = function create(properties) {
            return new CargoPanel(properties);
        };

        CargoPanel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unit != null && Object.hasOwnProperty.call(m, "unit"))
                $root.SC2APIProtocol.UnitInfo.encode(m.unit, w.uint32(10).fork()).ldelim();
            if (m.passengers != null && m.passengers.length) {
                for (var i = 0; i < m.passengers.length; ++i)
                    $root.SC2APIProtocol.UnitInfo.encode(m.passengers[i], w.uint32(18).fork()).ldelim();
            }
            if (m.slotsAvailable != null && Object.hasOwnProperty.call(m, "slotsAvailable"))
                w.uint32(24).int32(m.slotsAvailable);
            return w;
        };

        CargoPanel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        CargoPanel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.CargoPanel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unit = $root.SC2APIProtocol.UnitInfo.decode(r, r.uint32());
                    break;
                case 2:
                    if (!(m.passengers && m.passengers.length))
                        m.passengers = [];
                    m.passengers.push($root.SC2APIProtocol.UnitInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    m.slotsAvailable = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        CargoPanel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        CargoPanel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unit != null && m.hasOwnProperty("unit")) {
                {
                    var e = $root.SC2APIProtocol.UnitInfo.verify(m.unit);
                    if (e)
                        return "unit." + e;
                }
            }
            if (m.passengers != null && m.hasOwnProperty("passengers")) {
                if (!Array.isArray(m.passengers))
                    return "passengers: array expected";
                for (var i = 0; i < m.passengers.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.UnitInfo.verify(m.passengers[i]);
                        if (e)
                            return "passengers." + e;
                    }
                }
            }
            if (m.slotsAvailable != null && m.hasOwnProperty("slotsAvailable")) {
                if (!$util.isInteger(m.slotsAvailable))
                    return "slotsAvailable: integer expected";
            }
            return null;
        };

        CargoPanel.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.CargoPanel)
                return d;
            var m = new $root.SC2APIProtocol.CargoPanel();
            if (d.unit != null) {
                if (typeof d.unit !== "object")
                    throw TypeError(".SC2APIProtocol.CargoPanel.unit: object expected");
                m.unit = $root.SC2APIProtocol.UnitInfo.fromObject(d.unit);
            }
            if (d.passengers) {
                if (!Array.isArray(d.passengers))
                    throw TypeError(".SC2APIProtocol.CargoPanel.passengers: array expected");
                m.passengers = [];
                for (var i = 0; i < d.passengers.length; ++i) {
                    if (typeof d.passengers[i] !== "object")
                        throw TypeError(".SC2APIProtocol.CargoPanel.passengers: object expected");
                    m.passengers[i] = $root.SC2APIProtocol.UnitInfo.fromObject(d.passengers[i]);
                }
            }
            if (d.slotsAvailable != null) {
                m.slotsAvailable = d.slotsAvailable | 0;
            }
            return m;
        };

        CargoPanel.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.passengers = [];
            }
            if (o.defaults) {
                d.unit = null;
                d.slotsAvailable = 0;
            }
            if (m.unit != null && m.hasOwnProperty("unit")) {
                d.unit = $root.SC2APIProtocol.UnitInfo.toObject(m.unit, o);
            }
            if (m.passengers && m.passengers.length) {
                d.passengers = [];
                for (var j = 0; j < m.passengers.length; ++j) {
                    d.passengers[j] = $root.SC2APIProtocol.UnitInfo.toObject(m.passengers[j], o);
                }
            }
            if (m.slotsAvailable != null && m.hasOwnProperty("slotsAvailable")) {
                d.slotsAvailable = m.slotsAvailable;
            }
            return d;
        };

        CargoPanel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CargoPanel;
    })();

    SC2APIProtocol.BuildItem = (function() {

        function BuildItem(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        BuildItem.prototype.abilityId = 0;
        BuildItem.prototype.buildProgress = 0;

        BuildItem.create = function create(properties) {
            return new BuildItem(properties);
        };

        BuildItem.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).uint32(m.abilityId);
            if (m.buildProgress != null && Object.hasOwnProperty.call(m, "buildProgress"))
                w.uint32(21).float(m.buildProgress);
            return w;
        };

        BuildItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        BuildItem.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.BuildItem();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.uint32();
                    break;
                case 2:
                    m.buildProgress = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        BuildItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        BuildItem.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.buildProgress != null && m.hasOwnProperty("buildProgress")) {
                if (typeof m.buildProgress !== "number")
                    return "buildProgress: number expected";
            }
            return null;
        };

        BuildItem.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.BuildItem)
                return d;
            var m = new $root.SC2APIProtocol.BuildItem();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId >>> 0;
            }
            if (d.buildProgress != null) {
                m.buildProgress = Number(d.buildProgress);
            }
            return m;
        };

        BuildItem.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.abilityId = 0;
                d.buildProgress = 0;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.buildProgress != null && m.hasOwnProperty("buildProgress")) {
                d.buildProgress = o.json && !isFinite(m.buildProgress) ? String(m.buildProgress) : m.buildProgress;
            }
            return d;
        };

        BuildItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BuildItem;
    })();

    SC2APIProtocol.ProductionPanel = (function() {

        function ProductionPanel(p) {
            this.buildQueue = [];
            this.productionQueue = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ProductionPanel.prototype.unit = null;
        ProductionPanel.prototype.buildQueue = $util.emptyArray;
        ProductionPanel.prototype.productionQueue = $util.emptyArray;

        ProductionPanel.create = function create(properties) {
            return new ProductionPanel(properties);
        };

        ProductionPanel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unit != null && Object.hasOwnProperty.call(m, "unit"))
                $root.SC2APIProtocol.UnitInfo.encode(m.unit, w.uint32(10).fork()).ldelim();
            if (m.buildQueue != null && m.buildQueue.length) {
                for (var i = 0; i < m.buildQueue.length; ++i)
                    $root.SC2APIProtocol.UnitInfo.encode(m.buildQueue[i], w.uint32(18).fork()).ldelim();
            }
            if (m.productionQueue != null && m.productionQueue.length) {
                for (var i = 0; i < m.productionQueue.length; ++i)
                    $root.SC2APIProtocol.BuildItem.encode(m.productionQueue[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        ProductionPanel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ProductionPanel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ProductionPanel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unit = $root.SC2APIProtocol.UnitInfo.decode(r, r.uint32());
                    break;
                case 2:
                    if (!(m.buildQueue && m.buildQueue.length))
                        m.buildQueue = [];
                    m.buildQueue.push($root.SC2APIProtocol.UnitInfo.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.productionQueue && m.productionQueue.length))
                        m.productionQueue = [];
                    m.productionQueue.push($root.SC2APIProtocol.BuildItem.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ProductionPanel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ProductionPanel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unit != null && m.hasOwnProperty("unit")) {
                {
                    var e = $root.SC2APIProtocol.UnitInfo.verify(m.unit);
                    if (e)
                        return "unit." + e;
                }
            }
            if (m.buildQueue != null && m.hasOwnProperty("buildQueue")) {
                if (!Array.isArray(m.buildQueue))
                    return "buildQueue: array expected";
                for (var i = 0; i < m.buildQueue.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.UnitInfo.verify(m.buildQueue[i]);
                        if (e)
                            return "buildQueue." + e;
                    }
                }
            }
            if (m.productionQueue != null && m.hasOwnProperty("productionQueue")) {
                if (!Array.isArray(m.productionQueue))
                    return "productionQueue: array expected";
                for (var i = 0; i < m.productionQueue.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.BuildItem.verify(m.productionQueue[i]);
                        if (e)
                            return "productionQueue." + e;
                    }
                }
            }
            return null;
        };

        ProductionPanel.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ProductionPanel)
                return d;
            var m = new $root.SC2APIProtocol.ProductionPanel();
            if (d.unit != null) {
                if (typeof d.unit !== "object")
                    throw TypeError(".SC2APIProtocol.ProductionPanel.unit: object expected");
                m.unit = $root.SC2APIProtocol.UnitInfo.fromObject(d.unit);
            }
            if (d.buildQueue) {
                if (!Array.isArray(d.buildQueue))
                    throw TypeError(".SC2APIProtocol.ProductionPanel.buildQueue: array expected");
                m.buildQueue = [];
                for (var i = 0; i < d.buildQueue.length; ++i) {
                    if (typeof d.buildQueue[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ProductionPanel.buildQueue: object expected");
                    m.buildQueue[i] = $root.SC2APIProtocol.UnitInfo.fromObject(d.buildQueue[i]);
                }
            }
            if (d.productionQueue) {
                if (!Array.isArray(d.productionQueue))
                    throw TypeError(".SC2APIProtocol.ProductionPanel.productionQueue: array expected");
                m.productionQueue = [];
                for (var i = 0; i < d.productionQueue.length; ++i) {
                    if (typeof d.productionQueue[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ProductionPanel.productionQueue: object expected");
                    m.productionQueue[i] = $root.SC2APIProtocol.BuildItem.fromObject(d.productionQueue[i]);
                }
            }
            return m;
        };

        ProductionPanel.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.buildQueue = [];
                d.productionQueue = [];
            }
            if (o.defaults) {
                d.unit = null;
            }
            if (m.unit != null && m.hasOwnProperty("unit")) {
                d.unit = $root.SC2APIProtocol.UnitInfo.toObject(m.unit, o);
            }
            if (m.buildQueue && m.buildQueue.length) {
                d.buildQueue = [];
                for (var j = 0; j < m.buildQueue.length; ++j) {
                    d.buildQueue[j] = $root.SC2APIProtocol.UnitInfo.toObject(m.buildQueue[j], o);
                }
            }
            if (m.productionQueue && m.productionQueue.length) {
                d.productionQueue = [];
                for (var j = 0; j < m.productionQueue.length; ++j) {
                    d.productionQueue[j] = $root.SC2APIProtocol.BuildItem.toObject(m.productionQueue[j], o);
                }
            }
            return d;
        };

        ProductionPanel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProductionPanel;
    })();

    SC2APIProtocol.ActionUI = (function() {

        function ActionUI(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionUI.prototype.controlGroup = null;
        ActionUI.prototype.selectArmy = null;
        ActionUI.prototype.selectWarpGates = null;
        ActionUI.prototype.selectLarva = null;
        ActionUI.prototype.selectIdleWorker = null;
        ActionUI.prototype.multiPanel = null;
        ActionUI.prototype.cargoPanel = null;
        ActionUI.prototype.productionPanel = null;
        ActionUI.prototype.toggleAutocast = null;

        var $oneOfFields;

        Object.defineProperty(ActionUI.prototype, "action", {
            get: $util.oneOfGetter($oneOfFields = ["controlGroup", "selectArmy", "selectWarpGates", "selectLarva", "selectIdleWorker", "multiPanel", "cargoPanel", "productionPanel", "toggleAutocast"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        ActionUI.create = function create(properties) {
            return new ActionUI(properties);
        };

        ActionUI.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.controlGroup != null && Object.hasOwnProperty.call(m, "controlGroup"))
                $root.SC2APIProtocol.ActionControlGroup.encode(m.controlGroup, w.uint32(10).fork()).ldelim();
            if (m.selectArmy != null && Object.hasOwnProperty.call(m, "selectArmy"))
                $root.SC2APIProtocol.ActionSelectArmy.encode(m.selectArmy, w.uint32(18).fork()).ldelim();
            if (m.selectWarpGates != null && Object.hasOwnProperty.call(m, "selectWarpGates"))
                $root.SC2APIProtocol.ActionSelectWarpGates.encode(m.selectWarpGates, w.uint32(26).fork()).ldelim();
            if (m.selectLarva != null && Object.hasOwnProperty.call(m, "selectLarva"))
                $root.SC2APIProtocol.ActionSelectLarva.encode(m.selectLarva, w.uint32(34).fork()).ldelim();
            if (m.selectIdleWorker != null && Object.hasOwnProperty.call(m, "selectIdleWorker"))
                $root.SC2APIProtocol.ActionSelectIdleWorker.encode(m.selectIdleWorker, w.uint32(42).fork()).ldelim();
            if (m.multiPanel != null && Object.hasOwnProperty.call(m, "multiPanel"))
                $root.SC2APIProtocol.ActionMultiPanel.encode(m.multiPanel, w.uint32(50).fork()).ldelim();
            if (m.cargoPanel != null && Object.hasOwnProperty.call(m, "cargoPanel"))
                $root.SC2APIProtocol.ActionCargoPanelUnload.encode(m.cargoPanel, w.uint32(58).fork()).ldelim();
            if (m.productionPanel != null && Object.hasOwnProperty.call(m, "productionPanel"))
                $root.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.encode(m.productionPanel, w.uint32(66).fork()).ldelim();
            if (m.toggleAutocast != null && Object.hasOwnProperty.call(m, "toggleAutocast"))
                $root.SC2APIProtocol.ActionToggleAutocast.encode(m.toggleAutocast, w.uint32(74).fork()).ldelim();
            return w;
        };

        ActionUI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionUI.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionUI();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.controlGroup = $root.SC2APIProtocol.ActionControlGroup.decode(r, r.uint32());
                    break;
                case 2:
                    m.selectArmy = $root.SC2APIProtocol.ActionSelectArmy.decode(r, r.uint32());
                    break;
                case 3:
                    m.selectWarpGates = $root.SC2APIProtocol.ActionSelectWarpGates.decode(r, r.uint32());
                    break;
                case 4:
                    m.selectLarva = $root.SC2APIProtocol.ActionSelectLarva.decode(r, r.uint32());
                    break;
                case 5:
                    m.selectIdleWorker = $root.SC2APIProtocol.ActionSelectIdleWorker.decode(r, r.uint32());
                    break;
                case 6:
                    m.multiPanel = $root.SC2APIProtocol.ActionMultiPanel.decode(r, r.uint32());
                    break;
                case 7:
                    m.cargoPanel = $root.SC2APIProtocol.ActionCargoPanelUnload.decode(r, r.uint32());
                    break;
                case 8:
                    m.productionPanel = $root.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.decode(r, r.uint32());
                    break;
                case 9:
                    m.toggleAutocast = $root.SC2APIProtocol.ActionToggleAutocast.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionUI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionUI.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.controlGroup != null && m.hasOwnProperty("controlGroup")) {
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionControlGroup.verify(m.controlGroup);
                    if (e)
                        return "controlGroup." + e;
                }
            }
            if (m.selectArmy != null && m.hasOwnProperty("selectArmy")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionSelectArmy.verify(m.selectArmy);
                    if (e)
                        return "selectArmy." + e;
                }
            }
            if (m.selectWarpGates != null && m.hasOwnProperty("selectWarpGates")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionSelectWarpGates.verify(m.selectWarpGates);
                    if (e)
                        return "selectWarpGates." + e;
                }
            }
            if (m.selectLarva != null && m.hasOwnProperty("selectLarva")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionSelectLarva.verify(m.selectLarva);
                    if (e)
                        return "selectLarva." + e;
                }
            }
            if (m.selectIdleWorker != null && m.hasOwnProperty("selectIdleWorker")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionSelectIdleWorker.verify(m.selectIdleWorker);
                    if (e)
                        return "selectIdleWorker." + e;
                }
            }
            if (m.multiPanel != null && m.hasOwnProperty("multiPanel")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionMultiPanel.verify(m.multiPanel);
                    if (e)
                        return "multiPanel." + e;
                }
            }
            if (m.cargoPanel != null && m.hasOwnProperty("cargoPanel")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionCargoPanelUnload.verify(m.cargoPanel);
                    if (e)
                        return "cargoPanel." + e;
                }
            }
            if (m.productionPanel != null && m.hasOwnProperty("productionPanel")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.verify(m.productionPanel);
                    if (e)
                        return "productionPanel." + e;
                }
            }
            if (m.toggleAutocast != null && m.hasOwnProperty("toggleAutocast")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionToggleAutocast.verify(m.toggleAutocast);
                    if (e)
                        return "toggleAutocast." + e;
                }
            }
            return null;
        };

        ActionUI.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionUI)
                return d;
            var m = new $root.SC2APIProtocol.ActionUI();
            if (d.controlGroup != null) {
                if (typeof d.controlGroup !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.controlGroup: object expected");
                m.controlGroup = $root.SC2APIProtocol.ActionControlGroup.fromObject(d.controlGroup);
            }
            if (d.selectArmy != null) {
                if (typeof d.selectArmy !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.selectArmy: object expected");
                m.selectArmy = $root.SC2APIProtocol.ActionSelectArmy.fromObject(d.selectArmy);
            }
            if (d.selectWarpGates != null) {
                if (typeof d.selectWarpGates !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.selectWarpGates: object expected");
                m.selectWarpGates = $root.SC2APIProtocol.ActionSelectWarpGates.fromObject(d.selectWarpGates);
            }
            if (d.selectLarva != null) {
                if (typeof d.selectLarva !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.selectLarva: object expected");
                m.selectLarva = $root.SC2APIProtocol.ActionSelectLarva.fromObject(d.selectLarva);
            }
            if (d.selectIdleWorker != null) {
                if (typeof d.selectIdleWorker !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.selectIdleWorker: object expected");
                m.selectIdleWorker = $root.SC2APIProtocol.ActionSelectIdleWorker.fromObject(d.selectIdleWorker);
            }
            if (d.multiPanel != null) {
                if (typeof d.multiPanel !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.multiPanel: object expected");
                m.multiPanel = $root.SC2APIProtocol.ActionMultiPanel.fromObject(d.multiPanel);
            }
            if (d.cargoPanel != null) {
                if (typeof d.cargoPanel !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.cargoPanel: object expected");
                m.cargoPanel = $root.SC2APIProtocol.ActionCargoPanelUnload.fromObject(d.cargoPanel);
            }
            if (d.productionPanel != null) {
                if (typeof d.productionPanel !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.productionPanel: object expected");
                m.productionPanel = $root.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.fromObject(d.productionPanel);
            }
            if (d.toggleAutocast != null) {
                if (typeof d.toggleAutocast !== "object")
                    throw TypeError(".SC2APIProtocol.ActionUI.toggleAutocast: object expected");
                m.toggleAutocast = $root.SC2APIProtocol.ActionToggleAutocast.fromObject(d.toggleAutocast);
            }
            return m;
        };

        ActionUI.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (m.controlGroup != null && m.hasOwnProperty("controlGroup")) {
                d.controlGroup = $root.SC2APIProtocol.ActionControlGroup.toObject(m.controlGroup, o);
                if (o.oneofs)
                    d.action = "controlGroup";
            }
            if (m.selectArmy != null && m.hasOwnProperty("selectArmy")) {
                d.selectArmy = $root.SC2APIProtocol.ActionSelectArmy.toObject(m.selectArmy, o);
                if (o.oneofs)
                    d.action = "selectArmy";
            }
            if (m.selectWarpGates != null && m.hasOwnProperty("selectWarpGates")) {
                d.selectWarpGates = $root.SC2APIProtocol.ActionSelectWarpGates.toObject(m.selectWarpGates, o);
                if (o.oneofs)
                    d.action = "selectWarpGates";
            }
            if (m.selectLarva != null && m.hasOwnProperty("selectLarva")) {
                d.selectLarva = $root.SC2APIProtocol.ActionSelectLarva.toObject(m.selectLarva, o);
                if (o.oneofs)
                    d.action = "selectLarva";
            }
            if (m.selectIdleWorker != null && m.hasOwnProperty("selectIdleWorker")) {
                d.selectIdleWorker = $root.SC2APIProtocol.ActionSelectIdleWorker.toObject(m.selectIdleWorker, o);
                if (o.oneofs)
                    d.action = "selectIdleWorker";
            }
            if (m.multiPanel != null && m.hasOwnProperty("multiPanel")) {
                d.multiPanel = $root.SC2APIProtocol.ActionMultiPanel.toObject(m.multiPanel, o);
                if (o.oneofs)
                    d.action = "multiPanel";
            }
            if (m.cargoPanel != null && m.hasOwnProperty("cargoPanel")) {
                d.cargoPanel = $root.SC2APIProtocol.ActionCargoPanelUnload.toObject(m.cargoPanel, o);
                if (o.oneofs)
                    d.action = "cargoPanel";
            }
            if (m.productionPanel != null && m.hasOwnProperty("productionPanel")) {
                d.productionPanel = $root.SC2APIProtocol.ActionProductionPanelRemoveFromQueue.toObject(m.productionPanel, o);
                if (o.oneofs)
                    d.action = "productionPanel";
            }
            if (m.toggleAutocast != null && m.hasOwnProperty("toggleAutocast")) {
                d.toggleAutocast = $root.SC2APIProtocol.ActionToggleAutocast.toObject(m.toggleAutocast, o);
                if (o.oneofs)
                    d.action = "toggleAutocast";
            }
            return d;
        };

        ActionUI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionUI;
    })();

    SC2APIProtocol.ActionControlGroup = (function() {

        function ActionControlGroup(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionControlGroup.prototype.action = 1;
        ActionControlGroup.prototype.controlGroupIndex = 0;

        ActionControlGroup.create = function create(properties) {
            return new ActionControlGroup(properties);
        };

        ActionControlGroup.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.action != null && Object.hasOwnProperty.call(m, "action"))
                w.uint32(8).int32(m.action);
            if (m.controlGroupIndex != null && Object.hasOwnProperty.call(m, "controlGroupIndex"))
                w.uint32(16).uint32(m.controlGroupIndex);
            return w;
        };

        ActionControlGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionControlGroup.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionControlGroup();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.action = r.int32();
                    break;
                case 2:
                    m.controlGroupIndex = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionControlGroup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionControlGroup.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.action != null && m.hasOwnProperty("action")) {
                switch (m.action) {
                default:
                    return "action: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.controlGroupIndex != null && m.hasOwnProperty("controlGroupIndex")) {
                if (!$util.isInteger(m.controlGroupIndex))
                    return "controlGroupIndex: integer expected";
            }
            return null;
        };

        ActionControlGroup.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionControlGroup)
                return d;
            var m = new $root.SC2APIProtocol.ActionControlGroup();
            switch (d.action) {
            case "Recall":
            case 1:
                m.action = 1;
                break;
            case "Set":
            case 2:
                m.action = 2;
                break;
            case "Append":
            case 3:
                m.action = 3;
                break;
            case "SetAndSteal":
            case 4:
                m.action = 4;
                break;
            case "AppendAndSteal":
            case 5:
                m.action = 5;
                break;
            }
            if (d.controlGroupIndex != null) {
                m.controlGroupIndex = d.controlGroupIndex >>> 0;
            }
            return m;
        };

        ActionControlGroup.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.action = o.enums === String ? "Recall" : 1;
                d.controlGroupIndex = 0;
            }
            if (m.action != null && m.hasOwnProperty("action")) {
                d.action = o.enums === String ? $root.SC2APIProtocol.ActionControlGroup.ControlGroupAction[m.action] : m.action;
            }
            if (m.controlGroupIndex != null && m.hasOwnProperty("controlGroupIndex")) {
                d.controlGroupIndex = m.controlGroupIndex;
            }
            return d;
        };

        ActionControlGroup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ActionControlGroup.ControlGroupAction = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "Recall"] = 1;
            values[valuesById[2] = "Set"] = 2;
            values[valuesById[3] = "Append"] = 3;
            values[valuesById[4] = "SetAndSteal"] = 4;
            values[valuesById[5] = "AppendAndSteal"] = 5;
            return values;
        })();

        return ActionControlGroup;
    })();

    SC2APIProtocol.ActionSelectArmy = (function() {

        function ActionSelectArmy(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSelectArmy.prototype.selectionAdd = false;

        ActionSelectArmy.create = function create(properties) {
            return new ActionSelectArmy(properties);
        };

        ActionSelectArmy.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.selectionAdd != null && Object.hasOwnProperty.call(m, "selectionAdd"))
                w.uint32(8).bool(m.selectionAdd);
            return w;
        };

        ActionSelectArmy.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSelectArmy.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSelectArmy();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.selectionAdd = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSelectArmy.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSelectArmy.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.selectionAdd != null && m.hasOwnProperty("selectionAdd")) {
                if (typeof m.selectionAdd !== "boolean")
                    return "selectionAdd: boolean expected";
            }
            return null;
        };

        ActionSelectArmy.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSelectArmy)
                return d;
            var m = new $root.SC2APIProtocol.ActionSelectArmy();
            if (d.selectionAdd != null) {
                m.selectionAdd = Boolean(d.selectionAdd);
            }
            return m;
        };

        ActionSelectArmy.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.selectionAdd = false;
            }
            if (m.selectionAdd != null && m.hasOwnProperty("selectionAdd")) {
                d.selectionAdd = m.selectionAdd;
            }
            return d;
        };

        ActionSelectArmy.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionSelectArmy;
    })();

    SC2APIProtocol.ActionSelectWarpGates = (function() {

        function ActionSelectWarpGates(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSelectWarpGates.prototype.selectionAdd = false;

        ActionSelectWarpGates.create = function create(properties) {
            return new ActionSelectWarpGates(properties);
        };

        ActionSelectWarpGates.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.selectionAdd != null && Object.hasOwnProperty.call(m, "selectionAdd"))
                w.uint32(8).bool(m.selectionAdd);
            return w;
        };

        ActionSelectWarpGates.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSelectWarpGates.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSelectWarpGates();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.selectionAdd = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSelectWarpGates.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSelectWarpGates.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.selectionAdd != null && m.hasOwnProperty("selectionAdd")) {
                if (typeof m.selectionAdd !== "boolean")
                    return "selectionAdd: boolean expected";
            }
            return null;
        };

        ActionSelectWarpGates.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSelectWarpGates)
                return d;
            var m = new $root.SC2APIProtocol.ActionSelectWarpGates();
            if (d.selectionAdd != null) {
                m.selectionAdd = Boolean(d.selectionAdd);
            }
            return m;
        };

        ActionSelectWarpGates.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.selectionAdd = false;
            }
            if (m.selectionAdd != null && m.hasOwnProperty("selectionAdd")) {
                d.selectionAdd = m.selectionAdd;
            }
            return d;
        };

        ActionSelectWarpGates.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionSelectWarpGates;
    })();

    SC2APIProtocol.ActionSelectLarva = (function() {

        function ActionSelectLarva(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSelectLarva.create = function create(properties) {
            return new ActionSelectLarva(properties);
        };

        ActionSelectLarva.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        ActionSelectLarva.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSelectLarva.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSelectLarva();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSelectLarva.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSelectLarva.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        ActionSelectLarva.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSelectLarva)
                return d;
            return new $root.SC2APIProtocol.ActionSelectLarva();
        };

        ActionSelectLarva.toObject = function toObject() {
            return {};
        };

        ActionSelectLarva.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionSelectLarva;
    })();

    SC2APIProtocol.ActionSelectIdleWorker = (function() {

        function ActionSelectIdleWorker(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionSelectIdleWorker.prototype.type = 1;

        ActionSelectIdleWorker.create = function create(properties) {
            return new ActionSelectIdleWorker(properties);
        };

        ActionSelectIdleWorker.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            return w;
        };

        ActionSelectIdleWorker.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionSelectIdleWorker.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionSelectIdleWorker();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionSelectIdleWorker.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionSelectIdleWorker.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.type != null && m.hasOwnProperty("type")) {
                switch (m.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            return null;
        };

        ActionSelectIdleWorker.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionSelectIdleWorker)
                return d;
            var m = new $root.SC2APIProtocol.ActionSelectIdleWorker();
            switch (d.type) {
            case "Set":
            case 1:
                m.type = 1;
                break;
            case "Add":
            case 2:
                m.type = 2;
                break;
            case "All":
            case 3:
                m.type = 3;
                break;
            case "AddAll":
            case 4:
                m.type = 4;
                break;
            }
            return m;
        };

        ActionSelectIdleWorker.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.type = o.enums === String ? "Set" : 1;
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                d.type = o.enums === String ? $root.SC2APIProtocol.ActionSelectIdleWorker.Type[m.type] : m.type;
            }
            return d;
        };

        ActionSelectIdleWorker.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ActionSelectIdleWorker.Type = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "Set"] = 1;
            values[valuesById[2] = "Add"] = 2;
            values[valuesById[3] = "All"] = 3;
            values[valuesById[4] = "AddAll"] = 4;
            return values;
        })();

        return ActionSelectIdleWorker;
    })();

    SC2APIProtocol.ActionMultiPanel = (function() {

        function ActionMultiPanel(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionMultiPanel.prototype.type = 1;
        ActionMultiPanel.prototype.unitIndex = 0;

        ActionMultiPanel.create = function create(properties) {
            return new ActionMultiPanel(properties);
        };

        ActionMultiPanel.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.unitIndex != null && Object.hasOwnProperty.call(m, "unitIndex"))
                w.uint32(16).int32(m.unitIndex);
            return w;
        };

        ActionMultiPanel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionMultiPanel.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionMultiPanel();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.unitIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionMultiPanel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionMultiPanel.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.type != null && m.hasOwnProperty("type")) {
                switch (m.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.unitIndex != null && m.hasOwnProperty("unitIndex")) {
                if (!$util.isInteger(m.unitIndex))
                    return "unitIndex: integer expected";
            }
            return null;
        };

        ActionMultiPanel.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionMultiPanel)
                return d;
            var m = new $root.SC2APIProtocol.ActionMultiPanel();
            switch (d.type) {
            case "SingleSelect":
            case 1:
                m.type = 1;
                break;
            case "DeselectUnit":
            case 2:
                m.type = 2;
                break;
            case "SelectAllOfType":
            case 3:
                m.type = 3;
                break;
            case "DeselectAllOfType":
            case 4:
                m.type = 4;
                break;
            }
            if (d.unitIndex != null) {
                m.unitIndex = d.unitIndex | 0;
            }
            return m;
        };

        ActionMultiPanel.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.type = o.enums === String ? "SingleSelect" : 1;
                d.unitIndex = 0;
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                d.type = o.enums === String ? $root.SC2APIProtocol.ActionMultiPanel.Type[m.type] : m.type;
            }
            if (m.unitIndex != null && m.hasOwnProperty("unitIndex")) {
                d.unitIndex = m.unitIndex;
            }
            return d;
        };

        ActionMultiPanel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ActionMultiPanel.Type = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "SingleSelect"] = 1;
            values[valuesById[2] = "DeselectUnit"] = 2;
            values[valuesById[3] = "SelectAllOfType"] = 3;
            values[valuesById[4] = "DeselectAllOfType"] = 4;
            return values;
        })();

        return ActionMultiPanel;
    })();

    SC2APIProtocol.ActionCargoPanelUnload = (function() {

        function ActionCargoPanelUnload(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionCargoPanelUnload.prototype.unitIndex = 0;

        ActionCargoPanelUnload.create = function create(properties) {
            return new ActionCargoPanelUnload(properties);
        };

        ActionCargoPanelUnload.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitIndex != null && Object.hasOwnProperty.call(m, "unitIndex"))
                w.uint32(8).int32(m.unitIndex);
            return w;
        };

        ActionCargoPanelUnload.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionCargoPanelUnload.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionCargoPanelUnload();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionCargoPanelUnload.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionCargoPanelUnload.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitIndex != null && m.hasOwnProperty("unitIndex")) {
                if (!$util.isInteger(m.unitIndex))
                    return "unitIndex: integer expected";
            }
            return null;
        };

        ActionCargoPanelUnload.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionCargoPanelUnload)
                return d;
            var m = new $root.SC2APIProtocol.ActionCargoPanelUnload();
            if (d.unitIndex != null) {
                m.unitIndex = d.unitIndex | 0;
            }
            return m;
        };

        ActionCargoPanelUnload.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.unitIndex = 0;
            }
            if (m.unitIndex != null && m.hasOwnProperty("unitIndex")) {
                d.unitIndex = m.unitIndex;
            }
            return d;
        };

        ActionCargoPanelUnload.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionCargoPanelUnload;
    })();

    SC2APIProtocol.ActionProductionPanelRemoveFromQueue = (function() {

        function ActionProductionPanelRemoveFromQueue(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionProductionPanelRemoveFromQueue.prototype.unitIndex = 0;

        ActionProductionPanelRemoveFromQueue.create = function create(properties) {
            return new ActionProductionPanelRemoveFromQueue(properties);
        };

        ActionProductionPanelRemoveFromQueue.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitIndex != null && Object.hasOwnProperty.call(m, "unitIndex"))
                w.uint32(8).int32(m.unitIndex);
            return w;
        };

        ActionProductionPanelRemoveFromQueue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionProductionPanelRemoveFromQueue.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionProductionPanelRemoveFromQueue();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitIndex = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionProductionPanelRemoveFromQueue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionProductionPanelRemoveFromQueue.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitIndex != null && m.hasOwnProperty("unitIndex")) {
                if (!$util.isInteger(m.unitIndex))
                    return "unitIndex: integer expected";
            }
            return null;
        };

        ActionProductionPanelRemoveFromQueue.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
                return d;
            var m = new $root.SC2APIProtocol.ActionProductionPanelRemoveFromQueue();
            if (d.unitIndex != null) {
                m.unitIndex = d.unitIndex | 0;
            }
            return m;
        };

        ActionProductionPanelRemoveFromQueue.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.unitIndex = 0;
            }
            if (m.unitIndex != null && m.hasOwnProperty("unitIndex")) {
                d.unitIndex = m.unitIndex;
            }
            return d;
        };

        ActionProductionPanelRemoveFromQueue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionProductionPanelRemoveFromQueue;
    })();

    SC2APIProtocol.ActionToggleAutocast = (function() {

        function ActionToggleAutocast(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionToggleAutocast.prototype.abilityId = 0;

        ActionToggleAutocast.create = function create(properties) {
            return new ActionToggleAutocast(properties);
        };

        ActionToggleAutocast.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).int32(m.abilityId);
            return w;
        };

        ActionToggleAutocast.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionToggleAutocast.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionToggleAutocast();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionToggleAutocast.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionToggleAutocast.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            return null;
        };

        ActionToggleAutocast.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionToggleAutocast)
                return d;
            var m = new $root.SC2APIProtocol.ActionToggleAutocast();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId | 0;
            }
            return m;
        };

        ActionToggleAutocast.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.abilityId = 0;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            return d;
        };

        ActionToggleAutocast.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionToggleAutocast;
    })();

    SC2APIProtocol.StartRaw = (function() {

        function StartRaw(p) {
            this.startLocations = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        StartRaw.prototype.mapSize = null;
        StartRaw.prototype.pathingGrid = null;
        StartRaw.prototype.terrainHeight = null;
        StartRaw.prototype.placementGrid = null;
        StartRaw.prototype.playableArea = null;
        StartRaw.prototype.startLocations = $util.emptyArray;

        StartRaw.create = function create(properties) {
            return new StartRaw(properties);
        };

        StartRaw.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mapSize != null && Object.hasOwnProperty.call(m, "mapSize"))
                $root.SC2APIProtocol.Size2DI.encode(m.mapSize, w.uint32(10).fork()).ldelim();
            if (m.pathingGrid != null && Object.hasOwnProperty.call(m, "pathingGrid"))
                $root.SC2APIProtocol.ImageData.encode(m.pathingGrid, w.uint32(18).fork()).ldelim();
            if (m.terrainHeight != null && Object.hasOwnProperty.call(m, "terrainHeight"))
                $root.SC2APIProtocol.ImageData.encode(m.terrainHeight, w.uint32(26).fork()).ldelim();
            if (m.placementGrid != null && Object.hasOwnProperty.call(m, "placementGrid"))
                $root.SC2APIProtocol.ImageData.encode(m.placementGrid, w.uint32(34).fork()).ldelim();
            if (m.playableArea != null && Object.hasOwnProperty.call(m, "playableArea"))
                $root.SC2APIProtocol.RectangleI.encode(m.playableArea, w.uint32(42).fork()).ldelim();
            if (m.startLocations != null && m.startLocations.length) {
                for (var i = 0; i < m.startLocations.length; ++i)
                    $root.SC2APIProtocol.Point2D.encode(m.startLocations[i], w.uint32(50).fork()).ldelim();
            }
            return w;
        };

        StartRaw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        StartRaw.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.StartRaw();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.mapSize = $root.SC2APIProtocol.Size2DI.decode(r, r.uint32());
                    break;
                case 2:
                    m.pathingGrid = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 3:
                    m.terrainHeight = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 4:
                    m.placementGrid = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 5:
                    m.playableArea = $root.SC2APIProtocol.RectangleI.decode(r, r.uint32());
                    break;
                case 6:
                    if (!(m.startLocations && m.startLocations.length))
                        m.startLocations = [];
                    m.startLocations.push($root.SC2APIProtocol.Point2D.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        StartRaw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        StartRaw.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.mapSize != null && m.hasOwnProperty("mapSize")) {
                {
                    var e = $root.SC2APIProtocol.Size2DI.verify(m.mapSize);
                    if (e)
                        return "mapSize." + e;
                }
            }
            if (m.pathingGrid != null && m.hasOwnProperty("pathingGrid")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.pathingGrid);
                    if (e)
                        return "pathingGrid." + e;
                }
            }
            if (m.terrainHeight != null && m.hasOwnProperty("terrainHeight")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.terrainHeight);
                    if (e)
                        return "terrainHeight." + e;
                }
            }
            if (m.placementGrid != null && m.hasOwnProperty("placementGrid")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.placementGrid);
                    if (e)
                        return "placementGrid." + e;
                }
            }
            if (m.playableArea != null && m.hasOwnProperty("playableArea")) {
                {
                    var e = $root.SC2APIProtocol.RectangleI.verify(m.playableArea);
                    if (e)
                        return "playableArea." + e;
                }
            }
            if (m.startLocations != null && m.hasOwnProperty("startLocations")) {
                if (!Array.isArray(m.startLocations))
                    return "startLocations: array expected";
                for (var i = 0; i < m.startLocations.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.Point2D.verify(m.startLocations[i]);
                        if (e)
                            return "startLocations." + e;
                    }
                }
            }
            return null;
        };

        StartRaw.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.StartRaw)
                return d;
            var m = new $root.SC2APIProtocol.StartRaw();
            if (d.mapSize != null) {
                if (typeof d.mapSize !== "object")
                    throw TypeError(".SC2APIProtocol.StartRaw.mapSize: object expected");
                m.mapSize = $root.SC2APIProtocol.Size2DI.fromObject(d.mapSize);
            }
            if (d.pathingGrid != null) {
                if (typeof d.pathingGrid !== "object")
                    throw TypeError(".SC2APIProtocol.StartRaw.pathingGrid: object expected");
                m.pathingGrid = $root.SC2APIProtocol.ImageData.fromObject(d.pathingGrid);
            }
            if (d.terrainHeight != null) {
                if (typeof d.terrainHeight !== "object")
                    throw TypeError(".SC2APIProtocol.StartRaw.terrainHeight: object expected");
                m.terrainHeight = $root.SC2APIProtocol.ImageData.fromObject(d.terrainHeight);
            }
            if (d.placementGrid != null) {
                if (typeof d.placementGrid !== "object")
                    throw TypeError(".SC2APIProtocol.StartRaw.placementGrid: object expected");
                m.placementGrid = $root.SC2APIProtocol.ImageData.fromObject(d.placementGrid);
            }
            if (d.playableArea != null) {
                if (typeof d.playableArea !== "object")
                    throw TypeError(".SC2APIProtocol.StartRaw.playableArea: object expected");
                m.playableArea = $root.SC2APIProtocol.RectangleI.fromObject(d.playableArea);
            }
            if (d.startLocations) {
                if (!Array.isArray(d.startLocations))
                    throw TypeError(".SC2APIProtocol.StartRaw.startLocations: array expected");
                m.startLocations = [];
                for (var i = 0; i < d.startLocations.length; ++i) {
                    if (typeof d.startLocations[i] !== "object")
                        throw TypeError(".SC2APIProtocol.StartRaw.startLocations: object expected");
                    m.startLocations[i] = $root.SC2APIProtocol.Point2D.fromObject(d.startLocations[i]);
                }
            }
            return m;
        };

        StartRaw.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.startLocations = [];
            }
            if (o.defaults) {
                d.mapSize = null;
                d.pathingGrid = null;
                d.terrainHeight = null;
                d.placementGrid = null;
                d.playableArea = null;
            }
            if (m.mapSize != null && m.hasOwnProperty("mapSize")) {
                d.mapSize = $root.SC2APIProtocol.Size2DI.toObject(m.mapSize, o);
            }
            if (m.pathingGrid != null && m.hasOwnProperty("pathingGrid")) {
                d.pathingGrid = $root.SC2APIProtocol.ImageData.toObject(m.pathingGrid, o);
            }
            if (m.terrainHeight != null && m.hasOwnProperty("terrainHeight")) {
                d.terrainHeight = $root.SC2APIProtocol.ImageData.toObject(m.terrainHeight, o);
            }
            if (m.placementGrid != null && m.hasOwnProperty("placementGrid")) {
                d.placementGrid = $root.SC2APIProtocol.ImageData.toObject(m.placementGrid, o);
            }
            if (m.playableArea != null && m.hasOwnProperty("playableArea")) {
                d.playableArea = $root.SC2APIProtocol.RectangleI.toObject(m.playableArea, o);
            }
            if (m.startLocations && m.startLocations.length) {
                d.startLocations = [];
                for (var j = 0; j < m.startLocations.length; ++j) {
                    d.startLocations[j] = $root.SC2APIProtocol.Point2D.toObject(m.startLocations[j], o);
                }
            }
            return d;
        };

        StartRaw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StartRaw;
    })();

    SC2APIProtocol.ObservationRaw = (function() {

        function ObservationRaw(p) {
            this.units = [];
            this.effects = [];
            this.radar = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ObservationRaw.prototype.player = null;
        ObservationRaw.prototype.units = $util.emptyArray;
        ObservationRaw.prototype.mapState = null;
        ObservationRaw.prototype.event = null;
        ObservationRaw.prototype.effects = $util.emptyArray;
        ObservationRaw.prototype.radar = $util.emptyArray;

        ObservationRaw.create = function create(properties) {
            return new ObservationRaw(properties);
        };

        ObservationRaw.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.player != null && Object.hasOwnProperty.call(m, "player"))
                $root.SC2APIProtocol.PlayerRaw.encode(m.player, w.uint32(10).fork()).ldelim();
            if (m.units != null && m.units.length) {
                for (var i = 0; i < m.units.length; ++i)
                    $root.SC2APIProtocol.Unit.encode(m.units[i], w.uint32(18).fork()).ldelim();
            }
            if (m.mapState != null && Object.hasOwnProperty.call(m, "mapState"))
                $root.SC2APIProtocol.MapState.encode(m.mapState, w.uint32(26).fork()).ldelim();
            if (m.event != null && Object.hasOwnProperty.call(m, "event"))
                $root.SC2APIProtocol.Event.encode(m.event, w.uint32(34).fork()).ldelim();
            if (m.effects != null && m.effects.length) {
                for (var i = 0; i < m.effects.length; ++i)
                    $root.SC2APIProtocol.Effect.encode(m.effects[i], w.uint32(42).fork()).ldelim();
            }
            if (m.radar != null && m.radar.length) {
                for (var i = 0; i < m.radar.length; ++i)
                    $root.SC2APIProtocol.RadarRing.encode(m.radar[i], w.uint32(50).fork()).ldelim();
            }
            return w;
        };

        ObservationRaw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ObservationRaw.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ObservationRaw();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.player = $root.SC2APIProtocol.PlayerRaw.decode(r, r.uint32());
                    break;
                case 2:
                    if (!(m.units && m.units.length))
                        m.units = [];
                    m.units.push($root.SC2APIProtocol.Unit.decode(r, r.uint32()));
                    break;
                case 3:
                    m.mapState = $root.SC2APIProtocol.MapState.decode(r, r.uint32());
                    break;
                case 4:
                    m.event = $root.SC2APIProtocol.Event.decode(r, r.uint32());
                    break;
                case 5:
                    if (!(m.effects && m.effects.length))
                        m.effects = [];
                    m.effects.push($root.SC2APIProtocol.Effect.decode(r, r.uint32()));
                    break;
                case 6:
                    if (!(m.radar && m.radar.length))
                        m.radar = [];
                    m.radar.push($root.SC2APIProtocol.RadarRing.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ObservationRaw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ObservationRaw.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.player != null && m.hasOwnProperty("player")) {
                {
                    var e = $root.SC2APIProtocol.PlayerRaw.verify(m.player);
                    if (e)
                        return "player." + e;
                }
            }
            if (m.units != null && m.hasOwnProperty("units")) {
                if (!Array.isArray(m.units))
                    return "units: array expected";
                for (var i = 0; i < m.units.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.Unit.verify(m.units[i]);
                        if (e)
                            return "units." + e;
                    }
                }
            }
            if (m.mapState != null && m.hasOwnProperty("mapState")) {
                {
                    var e = $root.SC2APIProtocol.MapState.verify(m.mapState);
                    if (e)
                        return "mapState." + e;
                }
            }
            if (m.event != null && m.hasOwnProperty("event")) {
                {
                    var e = $root.SC2APIProtocol.Event.verify(m.event);
                    if (e)
                        return "event." + e;
                }
            }
            if (m.effects != null && m.hasOwnProperty("effects")) {
                if (!Array.isArray(m.effects))
                    return "effects: array expected";
                for (var i = 0; i < m.effects.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.Effect.verify(m.effects[i]);
                        if (e)
                            return "effects." + e;
                    }
                }
            }
            if (m.radar != null && m.hasOwnProperty("radar")) {
                if (!Array.isArray(m.radar))
                    return "radar: array expected";
                for (var i = 0; i < m.radar.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.RadarRing.verify(m.radar[i]);
                        if (e)
                            return "radar." + e;
                    }
                }
            }
            return null;
        };

        ObservationRaw.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ObservationRaw)
                return d;
            var m = new $root.SC2APIProtocol.ObservationRaw();
            if (d.player != null) {
                if (typeof d.player !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationRaw.player: object expected");
                m.player = $root.SC2APIProtocol.PlayerRaw.fromObject(d.player);
            }
            if (d.units) {
                if (!Array.isArray(d.units))
                    throw TypeError(".SC2APIProtocol.ObservationRaw.units: array expected");
                m.units = [];
                for (var i = 0; i < d.units.length; ++i) {
                    if (typeof d.units[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ObservationRaw.units: object expected");
                    m.units[i] = $root.SC2APIProtocol.Unit.fromObject(d.units[i]);
                }
            }
            if (d.mapState != null) {
                if (typeof d.mapState !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationRaw.mapState: object expected");
                m.mapState = $root.SC2APIProtocol.MapState.fromObject(d.mapState);
            }
            if (d.event != null) {
                if (typeof d.event !== "object")
                    throw TypeError(".SC2APIProtocol.ObservationRaw.event: object expected");
                m.event = $root.SC2APIProtocol.Event.fromObject(d.event);
            }
            if (d.effects) {
                if (!Array.isArray(d.effects))
                    throw TypeError(".SC2APIProtocol.ObservationRaw.effects: array expected");
                m.effects = [];
                for (var i = 0; i < d.effects.length; ++i) {
                    if (typeof d.effects[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ObservationRaw.effects: object expected");
                    m.effects[i] = $root.SC2APIProtocol.Effect.fromObject(d.effects[i]);
                }
            }
            if (d.radar) {
                if (!Array.isArray(d.radar))
                    throw TypeError(".SC2APIProtocol.ObservationRaw.radar: array expected");
                m.radar = [];
                for (var i = 0; i < d.radar.length; ++i) {
                    if (typeof d.radar[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ObservationRaw.radar: object expected");
                    m.radar[i] = $root.SC2APIProtocol.RadarRing.fromObject(d.radar[i]);
                }
            }
            return m;
        };

        ObservationRaw.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.units = [];
                d.effects = [];
                d.radar = [];
            }
            if (o.defaults) {
                d.player = null;
                d.mapState = null;
                d.event = null;
            }
            if (m.player != null && m.hasOwnProperty("player")) {
                d.player = $root.SC2APIProtocol.PlayerRaw.toObject(m.player, o);
            }
            if (m.units && m.units.length) {
                d.units = [];
                for (var j = 0; j < m.units.length; ++j) {
                    d.units[j] = $root.SC2APIProtocol.Unit.toObject(m.units[j], o);
                }
            }
            if (m.mapState != null && m.hasOwnProperty("mapState")) {
                d.mapState = $root.SC2APIProtocol.MapState.toObject(m.mapState, o);
            }
            if (m.event != null && m.hasOwnProperty("event")) {
                d.event = $root.SC2APIProtocol.Event.toObject(m.event, o);
            }
            if (m.effects && m.effects.length) {
                d.effects = [];
                for (var j = 0; j < m.effects.length; ++j) {
                    d.effects[j] = $root.SC2APIProtocol.Effect.toObject(m.effects[j], o);
                }
            }
            if (m.radar && m.radar.length) {
                d.radar = [];
                for (var j = 0; j < m.radar.length; ++j) {
                    d.radar[j] = $root.SC2APIProtocol.RadarRing.toObject(m.radar[j], o);
                }
            }
            return d;
        };

        ObservationRaw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ObservationRaw;
    })();

    SC2APIProtocol.RadarRing = (function() {

        function RadarRing(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RadarRing.prototype.pos = null;
        RadarRing.prototype.radius = 0;

        RadarRing.create = function create(properties) {
            return new RadarRing(properties);
        };

        RadarRing.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.pos != null && Object.hasOwnProperty.call(m, "pos"))
                $root.SC2APIProtocol.Point.encode(m.pos, w.uint32(10).fork()).ldelim();
            if (m.radius != null && Object.hasOwnProperty.call(m, "radius"))
                w.uint32(21).float(m.radius);
            return w;
        };

        RadarRing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RadarRing.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RadarRing();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.pos = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 2:
                    m.radius = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RadarRing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RadarRing.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.pos != null && m.hasOwnProperty("pos")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.pos);
                    if (e)
                        return "pos." + e;
                }
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                if (typeof m.radius !== "number")
                    return "radius: number expected";
            }
            return null;
        };

        RadarRing.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RadarRing)
                return d;
            var m = new $root.SC2APIProtocol.RadarRing();
            if (d.pos != null) {
                if (typeof d.pos !== "object")
                    throw TypeError(".SC2APIProtocol.RadarRing.pos: object expected");
                m.pos = $root.SC2APIProtocol.Point.fromObject(d.pos);
            }
            if (d.radius != null) {
                m.radius = Number(d.radius);
            }
            return m;
        };

        RadarRing.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.pos = null;
                d.radius = 0;
            }
            if (m.pos != null && m.hasOwnProperty("pos")) {
                d.pos = $root.SC2APIProtocol.Point.toObject(m.pos, o);
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                d.radius = o.json && !isFinite(m.radius) ? String(m.radius) : m.radius;
            }
            return d;
        };

        RadarRing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RadarRing;
    })();

    SC2APIProtocol.PowerSource = (function() {

        function PowerSource(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PowerSource.prototype.pos = null;
        PowerSource.prototype.radius = 0;
        PowerSource.prototype.tag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        PowerSource.create = function create(properties) {
            return new PowerSource(properties);
        };

        PowerSource.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.pos != null && Object.hasOwnProperty.call(m, "pos"))
                $root.SC2APIProtocol.Point.encode(m.pos, w.uint32(10).fork()).ldelim();
            if (m.radius != null && Object.hasOwnProperty.call(m, "radius"))
                w.uint32(21).float(m.radius);
            if (m.tag != null && Object.hasOwnProperty.call(m, "tag"))
                w.uint32(24).uint64(m.tag);
            return w;
        };

        PowerSource.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PowerSource.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PowerSource();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.pos = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 2:
                    m.radius = r.float();
                    break;
                case 3:
                    m.tag = r.uint64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PowerSource.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PowerSource.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.pos != null && m.hasOwnProperty("pos")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.pos);
                    if (e)
                        return "pos." + e;
                }
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                if (typeof m.radius !== "number")
                    return "radius: number expected";
            }
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (!$util.isInteger(m.tag) && !(m.tag && $util.isInteger(m.tag.low) && $util.isInteger(m.tag.high)))
                    return "tag: integer|Long expected";
            }
            return null;
        };

        PowerSource.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PowerSource)
                return d;
            var m = new $root.SC2APIProtocol.PowerSource();
            if (d.pos != null) {
                if (typeof d.pos !== "object")
                    throw TypeError(".SC2APIProtocol.PowerSource.pos: object expected");
                m.pos = $root.SC2APIProtocol.Point.fromObject(d.pos);
            }
            if (d.radius != null) {
                m.radius = Number(d.radius);
            }
            if (d.tag != null) {
                if ($util.Long)
                    (m.tag = $util.Long.fromValue(d.tag)).unsigned = true;
                else if (typeof d.tag === "string")
                    m.tag = parseInt(d.tag, 10);
                else if (typeof d.tag === "number")
                    m.tag = d.tag;
                else if (typeof d.tag === "object")
                    m.tag = new $util.LongBits(d.tag.low >>> 0, d.tag.high >>> 0).toNumber(true);
            }
            return m;
        };

        PowerSource.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.pos = null;
                d.radius = 0;
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.tag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.tag = o.longs === String ? "0" : 0;
            }
            if (m.pos != null && m.hasOwnProperty("pos")) {
                d.pos = $root.SC2APIProtocol.Point.toObject(m.pos, o);
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                d.radius = o.json && !isFinite(m.radius) ? String(m.radius) : m.radius;
            }
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (typeof m.tag === "number")
                    d.tag = o.longs === String ? String(m.tag) : m.tag;
                else
                    d.tag = o.longs === String ? $util.Long.prototype.toString.call(m.tag) : o.longs === Number ? new $util.LongBits(m.tag.low >>> 0, m.tag.high >>> 0).toNumber(true) : m.tag;
            }
            return d;
        };

        PowerSource.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PowerSource;
    })();

    SC2APIProtocol.PlayerRaw = (function() {

        function PlayerRaw(p) {
            this.powerSources = [];
            this.upgradeIds = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PlayerRaw.prototype.powerSources = $util.emptyArray;
        PlayerRaw.prototype.camera = null;
        PlayerRaw.prototype.upgradeIds = $util.emptyArray;

        PlayerRaw.create = function create(properties) {
            return new PlayerRaw(properties);
        };

        PlayerRaw.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.powerSources != null && m.powerSources.length) {
                for (var i = 0; i < m.powerSources.length; ++i)
                    $root.SC2APIProtocol.PowerSource.encode(m.powerSources[i], w.uint32(10).fork()).ldelim();
            }
            if (m.camera != null && Object.hasOwnProperty.call(m, "camera"))
                $root.SC2APIProtocol.Point.encode(m.camera, w.uint32(18).fork()).ldelim();
            if (m.upgradeIds != null && m.upgradeIds.length) {
                for (var i = 0; i < m.upgradeIds.length; ++i)
                    w.uint32(24).uint32(m.upgradeIds[i]);
            }
            return w;
        };

        PlayerRaw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PlayerRaw.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PlayerRaw();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.powerSources && m.powerSources.length))
                        m.powerSources = [];
                    m.powerSources.push($root.SC2APIProtocol.PowerSource.decode(r, r.uint32()));
                    break;
                case 2:
                    m.camera = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 3:
                    if (!(m.upgradeIds && m.upgradeIds.length))
                        m.upgradeIds = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.upgradeIds.push(r.uint32());
                    } else
                        m.upgradeIds.push(r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PlayerRaw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PlayerRaw.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.powerSources != null && m.hasOwnProperty("powerSources")) {
                if (!Array.isArray(m.powerSources))
                    return "powerSources: array expected";
                for (var i = 0; i < m.powerSources.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.PowerSource.verify(m.powerSources[i]);
                        if (e)
                            return "powerSources." + e;
                    }
                }
            }
            if (m.camera != null && m.hasOwnProperty("camera")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.camera);
                    if (e)
                        return "camera." + e;
                }
            }
            if (m.upgradeIds != null && m.hasOwnProperty("upgradeIds")) {
                if (!Array.isArray(m.upgradeIds))
                    return "upgradeIds: array expected";
                for (var i = 0; i < m.upgradeIds.length; ++i) {
                    if (!$util.isInteger(m.upgradeIds[i]))
                        return "upgradeIds: integer[] expected";
                }
            }
            return null;
        };

        PlayerRaw.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PlayerRaw)
                return d;
            var m = new $root.SC2APIProtocol.PlayerRaw();
            if (d.powerSources) {
                if (!Array.isArray(d.powerSources))
                    throw TypeError(".SC2APIProtocol.PlayerRaw.powerSources: array expected");
                m.powerSources = [];
                for (var i = 0; i < d.powerSources.length; ++i) {
                    if (typeof d.powerSources[i] !== "object")
                        throw TypeError(".SC2APIProtocol.PlayerRaw.powerSources: object expected");
                    m.powerSources[i] = $root.SC2APIProtocol.PowerSource.fromObject(d.powerSources[i]);
                }
            }
            if (d.camera != null) {
                if (typeof d.camera !== "object")
                    throw TypeError(".SC2APIProtocol.PlayerRaw.camera: object expected");
                m.camera = $root.SC2APIProtocol.Point.fromObject(d.camera);
            }
            if (d.upgradeIds) {
                if (!Array.isArray(d.upgradeIds))
                    throw TypeError(".SC2APIProtocol.PlayerRaw.upgradeIds: array expected");
                m.upgradeIds = [];
                for (var i = 0; i < d.upgradeIds.length; ++i) {
                    m.upgradeIds[i] = d.upgradeIds[i] >>> 0;
                }
            }
            return m;
        };

        PlayerRaw.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.powerSources = [];
                d.upgradeIds = [];
            }
            if (o.defaults) {
                d.camera = null;
            }
            if (m.powerSources && m.powerSources.length) {
                d.powerSources = [];
                for (var j = 0; j < m.powerSources.length; ++j) {
                    d.powerSources[j] = $root.SC2APIProtocol.PowerSource.toObject(m.powerSources[j], o);
                }
            }
            if (m.camera != null && m.hasOwnProperty("camera")) {
                d.camera = $root.SC2APIProtocol.Point.toObject(m.camera, o);
            }
            if (m.upgradeIds && m.upgradeIds.length) {
                d.upgradeIds = [];
                for (var j = 0; j < m.upgradeIds.length; ++j) {
                    d.upgradeIds[j] = m.upgradeIds[j];
                }
            }
            return d;
        };

        PlayerRaw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlayerRaw;
    })();

    SC2APIProtocol.UnitOrder = (function() {

        function UnitOrder(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        UnitOrder.prototype.abilityId = 0;
        UnitOrder.prototype.targetWorldSpacePos = null;
        UnitOrder.prototype.targetUnitTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        UnitOrder.prototype.progress = 0;

        var $oneOfFields;

        Object.defineProperty(UnitOrder.prototype, "target", {
            get: $util.oneOfGetter($oneOfFields = ["targetWorldSpacePos", "targetUnitTag"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        UnitOrder.create = function create(properties) {
            return new UnitOrder(properties);
        };

        UnitOrder.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).uint32(m.abilityId);
            if (m.targetWorldSpacePos != null && Object.hasOwnProperty.call(m, "targetWorldSpacePos"))
                $root.SC2APIProtocol.Point.encode(m.targetWorldSpacePos, w.uint32(18).fork()).ldelim();
            if (m.targetUnitTag != null && Object.hasOwnProperty.call(m, "targetUnitTag"))
                w.uint32(24).uint64(m.targetUnitTag);
            if (m.progress != null && Object.hasOwnProperty.call(m, "progress"))
                w.uint32(37).float(m.progress);
            return w;
        };

        UnitOrder.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        UnitOrder.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.UnitOrder();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.uint32();
                    break;
                case 2:
                    m.targetWorldSpacePos = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 3:
                    m.targetUnitTag = r.uint64();
                    break;
                case 4:
                    m.progress = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        UnitOrder.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        UnitOrder.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.targetWorldSpacePos != null && m.hasOwnProperty("targetWorldSpacePos")) {
                p.target = 1;
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.targetWorldSpacePos);
                    if (e)
                        return "targetWorldSpacePos." + e;
                }
            }
            if (m.targetUnitTag != null && m.hasOwnProperty("targetUnitTag")) {
                if (p.target === 1)
                    return "target: multiple values";
                p.target = 1;
                if (!$util.isInteger(m.targetUnitTag) && !(m.targetUnitTag && $util.isInteger(m.targetUnitTag.low) && $util.isInteger(m.targetUnitTag.high)))
                    return "targetUnitTag: integer|Long expected";
            }
            if (m.progress != null && m.hasOwnProperty("progress")) {
                if (typeof m.progress !== "number")
                    return "progress: number expected";
            }
            return null;
        };

        UnitOrder.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.UnitOrder)
                return d;
            var m = new $root.SC2APIProtocol.UnitOrder();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId >>> 0;
            }
            if (d.targetWorldSpacePos != null) {
                if (typeof d.targetWorldSpacePos !== "object")
                    throw TypeError(".SC2APIProtocol.UnitOrder.targetWorldSpacePos: object expected");
                m.targetWorldSpacePos = $root.SC2APIProtocol.Point.fromObject(d.targetWorldSpacePos);
            }
            if (d.targetUnitTag != null) {
                if ($util.Long)
                    (m.targetUnitTag = $util.Long.fromValue(d.targetUnitTag)).unsigned = true;
                else if (typeof d.targetUnitTag === "string")
                    m.targetUnitTag = parseInt(d.targetUnitTag, 10);
                else if (typeof d.targetUnitTag === "number")
                    m.targetUnitTag = d.targetUnitTag;
                else if (typeof d.targetUnitTag === "object")
                    m.targetUnitTag = new $util.LongBits(d.targetUnitTag.low >>> 0, d.targetUnitTag.high >>> 0).toNumber(true);
            }
            if (d.progress != null) {
                m.progress = Number(d.progress);
            }
            return m;
        };

        UnitOrder.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.abilityId = 0;
                d.progress = 0;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.targetWorldSpacePos != null && m.hasOwnProperty("targetWorldSpacePos")) {
                d.targetWorldSpacePos = $root.SC2APIProtocol.Point.toObject(m.targetWorldSpacePos, o);
                if (o.oneofs)
                    d.target = "targetWorldSpacePos";
            }
            if (m.targetUnitTag != null && m.hasOwnProperty("targetUnitTag")) {
                if (typeof m.targetUnitTag === "number")
                    d.targetUnitTag = o.longs === String ? String(m.targetUnitTag) : m.targetUnitTag;
                else
                    d.targetUnitTag = o.longs === String ? $util.Long.prototype.toString.call(m.targetUnitTag) : o.longs === Number ? new $util.LongBits(m.targetUnitTag.low >>> 0, m.targetUnitTag.high >>> 0).toNumber(true) : m.targetUnitTag;
                if (o.oneofs)
                    d.target = "targetUnitTag";
            }
            if (m.progress != null && m.hasOwnProperty("progress")) {
                d.progress = o.json && !isFinite(m.progress) ? String(m.progress) : m.progress;
            }
            return d;
        };

        UnitOrder.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UnitOrder;
    })();

    SC2APIProtocol.DisplayType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Visible"] = 1;
        values[valuesById[2] = "Snapshot"] = 2;
        values[valuesById[3] = "Hidden"] = 3;
        values[valuesById[4] = "Placeholder"] = 4;
        return values;
    })();

    SC2APIProtocol.Alliance = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Self"] = 1;
        values[valuesById[2] = "Ally"] = 2;
        values[valuesById[3] = "Neutral"] = 3;
        values[valuesById[4] = "Enemy"] = 4;
        return values;
    })();

    SC2APIProtocol.CloakState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CloakedUnknown"] = 0;
        values[valuesById[1] = "Cloaked"] = 1;
        values[valuesById[2] = "CloakedDetected"] = 2;
        values[valuesById[3] = "NotCloaked"] = 3;
        values[valuesById[4] = "CloakedAllied"] = 4;
        return values;
    })();

    SC2APIProtocol.PassengerUnit = (function() {

        function PassengerUnit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PassengerUnit.prototype.tag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        PassengerUnit.prototype.health = 0;
        PassengerUnit.prototype.healthMax = 0;
        PassengerUnit.prototype.shield = 0;
        PassengerUnit.prototype.shieldMax = 0;
        PassengerUnit.prototype.energy = 0;
        PassengerUnit.prototype.energyMax = 0;
        PassengerUnit.prototype.unitType = 0;

        PassengerUnit.create = function create(properties) {
            return new PassengerUnit(properties);
        };

        PassengerUnit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.tag != null && Object.hasOwnProperty.call(m, "tag"))
                w.uint32(8).uint64(m.tag);
            if (m.health != null && Object.hasOwnProperty.call(m, "health"))
                w.uint32(21).float(m.health);
            if (m.healthMax != null && Object.hasOwnProperty.call(m, "healthMax"))
                w.uint32(29).float(m.healthMax);
            if (m.shield != null && Object.hasOwnProperty.call(m, "shield"))
                w.uint32(37).float(m.shield);
            if (m.energy != null && Object.hasOwnProperty.call(m, "energy"))
                w.uint32(45).float(m.energy);
            if (m.unitType != null && Object.hasOwnProperty.call(m, "unitType"))
                w.uint32(48).uint32(m.unitType);
            if (m.shieldMax != null && Object.hasOwnProperty.call(m, "shieldMax"))
                w.uint32(61).float(m.shieldMax);
            if (m.energyMax != null && Object.hasOwnProperty.call(m, "energyMax"))
                w.uint32(69).float(m.energyMax);
            return w;
        };

        PassengerUnit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PassengerUnit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PassengerUnit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.tag = r.uint64();
                    break;
                case 2:
                    m.health = r.float();
                    break;
                case 3:
                    m.healthMax = r.float();
                    break;
                case 4:
                    m.shield = r.float();
                    break;
                case 7:
                    m.shieldMax = r.float();
                    break;
                case 5:
                    m.energy = r.float();
                    break;
                case 8:
                    m.energyMax = r.float();
                    break;
                case 6:
                    m.unitType = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PassengerUnit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PassengerUnit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (!$util.isInteger(m.tag) && !(m.tag && $util.isInteger(m.tag.low) && $util.isInteger(m.tag.high)))
                    return "tag: integer|Long expected";
            }
            if (m.health != null && m.hasOwnProperty("health")) {
                if (typeof m.health !== "number")
                    return "health: number expected";
            }
            if (m.healthMax != null && m.hasOwnProperty("healthMax")) {
                if (typeof m.healthMax !== "number")
                    return "healthMax: number expected";
            }
            if (m.shield != null && m.hasOwnProperty("shield")) {
                if (typeof m.shield !== "number")
                    return "shield: number expected";
            }
            if (m.shieldMax != null && m.hasOwnProperty("shieldMax")) {
                if (typeof m.shieldMax !== "number")
                    return "shieldMax: number expected";
            }
            if (m.energy != null && m.hasOwnProperty("energy")) {
                if (typeof m.energy !== "number")
                    return "energy: number expected";
            }
            if (m.energyMax != null && m.hasOwnProperty("energyMax")) {
                if (typeof m.energyMax !== "number")
                    return "energyMax: number expected";
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                if (!$util.isInteger(m.unitType))
                    return "unitType: integer expected";
            }
            return null;
        };

        PassengerUnit.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PassengerUnit)
                return d;
            var m = new $root.SC2APIProtocol.PassengerUnit();
            if (d.tag != null) {
                if ($util.Long)
                    (m.tag = $util.Long.fromValue(d.tag)).unsigned = true;
                else if (typeof d.tag === "string")
                    m.tag = parseInt(d.tag, 10);
                else if (typeof d.tag === "number")
                    m.tag = d.tag;
                else if (typeof d.tag === "object")
                    m.tag = new $util.LongBits(d.tag.low >>> 0, d.tag.high >>> 0).toNumber(true);
            }
            if (d.health != null) {
                m.health = Number(d.health);
            }
            if (d.healthMax != null) {
                m.healthMax = Number(d.healthMax);
            }
            if (d.shield != null) {
                m.shield = Number(d.shield);
            }
            if (d.shieldMax != null) {
                m.shieldMax = Number(d.shieldMax);
            }
            if (d.energy != null) {
                m.energy = Number(d.energy);
            }
            if (d.energyMax != null) {
                m.energyMax = Number(d.energyMax);
            }
            if (d.unitType != null) {
                m.unitType = d.unitType >>> 0;
            }
            return m;
        };

        PassengerUnit.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.tag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.tag = o.longs === String ? "0" : 0;
                d.health = 0;
                d.healthMax = 0;
                d.shield = 0;
                d.energy = 0;
                d.unitType = 0;
                d.shieldMax = 0;
                d.energyMax = 0;
            }
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (typeof m.tag === "number")
                    d.tag = o.longs === String ? String(m.tag) : m.tag;
                else
                    d.tag = o.longs === String ? $util.Long.prototype.toString.call(m.tag) : o.longs === Number ? new $util.LongBits(m.tag.low >>> 0, m.tag.high >>> 0).toNumber(true) : m.tag;
            }
            if (m.health != null && m.hasOwnProperty("health")) {
                d.health = o.json && !isFinite(m.health) ? String(m.health) : m.health;
            }
            if (m.healthMax != null && m.hasOwnProperty("healthMax")) {
                d.healthMax = o.json && !isFinite(m.healthMax) ? String(m.healthMax) : m.healthMax;
            }
            if (m.shield != null && m.hasOwnProperty("shield")) {
                d.shield = o.json && !isFinite(m.shield) ? String(m.shield) : m.shield;
            }
            if (m.energy != null && m.hasOwnProperty("energy")) {
                d.energy = o.json && !isFinite(m.energy) ? String(m.energy) : m.energy;
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                d.unitType = m.unitType;
            }
            if (m.shieldMax != null && m.hasOwnProperty("shieldMax")) {
                d.shieldMax = o.json && !isFinite(m.shieldMax) ? String(m.shieldMax) : m.shieldMax;
            }
            if (m.energyMax != null && m.hasOwnProperty("energyMax")) {
                d.energyMax = o.json && !isFinite(m.energyMax) ? String(m.energyMax) : m.energyMax;
            }
            return d;
        };

        PassengerUnit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PassengerUnit;
    })();

    SC2APIProtocol.RallyTarget = (function() {

        function RallyTarget(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RallyTarget.prototype.point = null;
        RallyTarget.prototype.tag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        RallyTarget.create = function create(properties) {
            return new RallyTarget(properties);
        };

        RallyTarget.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.point != null && Object.hasOwnProperty.call(m, "point"))
                $root.SC2APIProtocol.Point.encode(m.point, w.uint32(10).fork()).ldelim();
            if (m.tag != null && Object.hasOwnProperty.call(m, "tag"))
                w.uint32(16).uint64(m.tag);
            return w;
        };

        RallyTarget.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RallyTarget.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RallyTarget();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.point = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 2:
                    m.tag = r.uint64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RallyTarget.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RallyTarget.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.point != null && m.hasOwnProperty("point")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.point);
                    if (e)
                        return "point." + e;
                }
            }
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (!$util.isInteger(m.tag) && !(m.tag && $util.isInteger(m.tag.low) && $util.isInteger(m.tag.high)))
                    return "tag: integer|Long expected";
            }
            return null;
        };

        RallyTarget.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RallyTarget)
                return d;
            var m = new $root.SC2APIProtocol.RallyTarget();
            if (d.point != null) {
                if (typeof d.point !== "object")
                    throw TypeError(".SC2APIProtocol.RallyTarget.point: object expected");
                m.point = $root.SC2APIProtocol.Point.fromObject(d.point);
            }
            if (d.tag != null) {
                if ($util.Long)
                    (m.tag = $util.Long.fromValue(d.tag)).unsigned = true;
                else if (typeof d.tag === "string")
                    m.tag = parseInt(d.tag, 10);
                else if (typeof d.tag === "number")
                    m.tag = d.tag;
                else if (typeof d.tag === "object")
                    m.tag = new $util.LongBits(d.tag.low >>> 0, d.tag.high >>> 0).toNumber(true);
            }
            return m;
        };

        RallyTarget.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.point = null;
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.tag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.tag = o.longs === String ? "0" : 0;
            }
            if (m.point != null && m.hasOwnProperty("point")) {
                d.point = $root.SC2APIProtocol.Point.toObject(m.point, o);
            }
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (typeof m.tag === "number")
                    d.tag = o.longs === String ? String(m.tag) : m.tag;
                else
                    d.tag = o.longs === String ? $util.Long.prototype.toString.call(m.tag) : o.longs === Number ? new $util.LongBits(m.tag.low >>> 0, m.tag.high >>> 0).toNumber(true) : m.tag;
            }
            return d;
        };

        RallyTarget.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RallyTarget;
    })();

    SC2APIProtocol.Unit = (function() {

        function Unit(p) {
            this.buffIds = [];
            this.orders = [];
            this.passengers = [];
            this.rallyTargets = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Unit.prototype.displayType = 1;
        Unit.prototype.alliance = 1;
        Unit.prototype.tag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        Unit.prototype.unitType = 0;
        Unit.prototype.owner = 0;
        Unit.prototype.pos = null;
        Unit.prototype.facing = 0;
        Unit.prototype.radius = 0;
        Unit.prototype.buildProgress = 0;
        Unit.prototype.cloak = 0;
        Unit.prototype.buffIds = $util.emptyArray;
        Unit.prototype.detectRange = 0;
        Unit.prototype.radarRange = 0;
        Unit.prototype.isSelected = false;
        Unit.prototype.isOnScreen = false;
        Unit.prototype.isBlip = false;
        Unit.prototype.isPowered = false;
        Unit.prototype.isActive = false;
        Unit.prototype.attackUpgradeLevel = 0;
        Unit.prototype.armorUpgradeLevel = 0;
        Unit.prototype.shieldUpgradeLevel = 0;
        Unit.prototype.health = 0;
        Unit.prototype.healthMax = 0;
        Unit.prototype.shield = 0;
        Unit.prototype.shieldMax = 0;
        Unit.prototype.energy = 0;
        Unit.prototype.energyMax = 0;
        Unit.prototype.mineralContents = 0;
        Unit.prototype.vespeneContents = 0;
        Unit.prototype.isFlying = false;
        Unit.prototype.isBurrowed = false;
        Unit.prototype.isHallucination = false;
        Unit.prototype.orders = $util.emptyArray;
        Unit.prototype.addOnTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        Unit.prototype.passengers = $util.emptyArray;
        Unit.prototype.cargoSpaceTaken = 0;
        Unit.prototype.cargoSpaceMax = 0;
        Unit.prototype.assignedHarvesters = 0;
        Unit.prototype.idealHarvesters = 0;
        Unit.prototype.weaponCooldown = 0;
        Unit.prototype.engagedTargetTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        Unit.prototype.buffDurationRemain = 0;
        Unit.prototype.buffDurationMax = 0;
        Unit.prototype.rallyTargets = $util.emptyArray;

        Unit.create = function create(properties) {
            return new Unit(properties);
        };

        Unit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.displayType != null && Object.hasOwnProperty.call(m, "displayType"))
                w.uint32(8).int32(m.displayType);
            if (m.alliance != null && Object.hasOwnProperty.call(m, "alliance"))
                w.uint32(16).int32(m.alliance);
            if (m.tag != null && Object.hasOwnProperty.call(m, "tag"))
                w.uint32(24).uint64(m.tag);
            if (m.unitType != null && Object.hasOwnProperty.call(m, "unitType"))
                w.uint32(32).uint32(m.unitType);
            if (m.owner != null && Object.hasOwnProperty.call(m, "owner"))
                w.uint32(40).int32(m.owner);
            if (m.pos != null && Object.hasOwnProperty.call(m, "pos"))
                $root.SC2APIProtocol.Point.encode(m.pos, w.uint32(50).fork()).ldelim();
            if (m.facing != null && Object.hasOwnProperty.call(m, "facing"))
                w.uint32(61).float(m.facing);
            if (m.radius != null && Object.hasOwnProperty.call(m, "radius"))
                w.uint32(69).float(m.radius);
            if (m.buildProgress != null && Object.hasOwnProperty.call(m, "buildProgress"))
                w.uint32(77).float(m.buildProgress);
            if (m.cloak != null && Object.hasOwnProperty.call(m, "cloak"))
                w.uint32(80).int32(m.cloak);
            if (m.isSelected != null && Object.hasOwnProperty.call(m, "isSelected"))
                w.uint32(88).bool(m.isSelected);
            if (m.isOnScreen != null && Object.hasOwnProperty.call(m, "isOnScreen"))
                w.uint32(96).bool(m.isOnScreen);
            if (m.isBlip != null && Object.hasOwnProperty.call(m, "isBlip"))
                w.uint32(104).bool(m.isBlip);
            if (m.health != null && Object.hasOwnProperty.call(m, "health"))
                w.uint32(117).float(m.health);
            if (m.healthMax != null && Object.hasOwnProperty.call(m, "healthMax"))
                w.uint32(125).float(m.healthMax);
            if (m.shield != null && Object.hasOwnProperty.call(m, "shield"))
                w.uint32(133).float(m.shield);
            if (m.energy != null && Object.hasOwnProperty.call(m, "energy"))
                w.uint32(141).float(m.energy);
            if (m.mineralContents != null && Object.hasOwnProperty.call(m, "mineralContents"))
                w.uint32(144).int32(m.mineralContents);
            if (m.vespeneContents != null && Object.hasOwnProperty.call(m, "vespeneContents"))
                w.uint32(152).int32(m.vespeneContents);
            if (m.isFlying != null && Object.hasOwnProperty.call(m, "isFlying"))
                w.uint32(160).bool(m.isFlying);
            if (m.isBurrowed != null && Object.hasOwnProperty.call(m, "isBurrowed"))
                w.uint32(168).bool(m.isBurrowed);
            if (m.orders != null && m.orders.length) {
                for (var i = 0; i < m.orders.length; ++i)
                    $root.SC2APIProtocol.UnitOrder.encode(m.orders[i], w.uint32(178).fork()).ldelim();
            }
            if (m.addOnTag != null && Object.hasOwnProperty.call(m, "addOnTag"))
                w.uint32(184).uint64(m.addOnTag);
            if (m.passengers != null && m.passengers.length) {
                for (var i = 0; i < m.passengers.length; ++i)
                    $root.SC2APIProtocol.PassengerUnit.encode(m.passengers[i], w.uint32(194).fork()).ldelim();
            }
            if (m.cargoSpaceTaken != null && Object.hasOwnProperty.call(m, "cargoSpaceTaken"))
                w.uint32(200).int32(m.cargoSpaceTaken);
            if (m.cargoSpaceMax != null && Object.hasOwnProperty.call(m, "cargoSpaceMax"))
                w.uint32(208).int32(m.cargoSpaceMax);
            if (m.buffIds != null && m.buffIds.length) {
                for (var i = 0; i < m.buffIds.length; ++i)
                    w.uint32(216).uint32(m.buffIds[i]);
            }
            if (m.assignedHarvesters != null && Object.hasOwnProperty.call(m, "assignedHarvesters"))
                w.uint32(224).int32(m.assignedHarvesters);
            if (m.idealHarvesters != null && Object.hasOwnProperty.call(m, "idealHarvesters"))
                w.uint32(232).int32(m.idealHarvesters);
            if (m.weaponCooldown != null && Object.hasOwnProperty.call(m, "weaponCooldown"))
                w.uint32(245).float(m.weaponCooldown);
            if (m.detectRange != null && Object.hasOwnProperty.call(m, "detectRange"))
                w.uint32(253).float(m.detectRange);
            if (m.radarRange != null && Object.hasOwnProperty.call(m, "radarRange"))
                w.uint32(261).float(m.radarRange);
            if (m.engagedTargetTag != null && Object.hasOwnProperty.call(m, "engagedTargetTag"))
                w.uint32(272).uint64(m.engagedTargetTag);
            if (m.isPowered != null && Object.hasOwnProperty.call(m, "isPowered"))
                w.uint32(280).bool(m.isPowered);
            if (m.shieldMax != null && Object.hasOwnProperty.call(m, "shieldMax"))
                w.uint32(293).float(m.shieldMax);
            if (m.energyMax != null && Object.hasOwnProperty.call(m, "energyMax"))
                w.uint32(301).float(m.energyMax);
            if (m.isHallucination != null && Object.hasOwnProperty.call(m, "isHallucination"))
                w.uint32(304).bool(m.isHallucination);
            if (m.isActive != null && Object.hasOwnProperty.call(m, "isActive"))
                w.uint32(312).bool(m.isActive);
            if (m.attackUpgradeLevel != null && Object.hasOwnProperty.call(m, "attackUpgradeLevel"))
                w.uint32(320).int32(m.attackUpgradeLevel);
            if (m.armorUpgradeLevel != null && Object.hasOwnProperty.call(m, "armorUpgradeLevel"))
                w.uint32(328).int32(m.armorUpgradeLevel);
            if (m.shieldUpgradeLevel != null && Object.hasOwnProperty.call(m, "shieldUpgradeLevel"))
                w.uint32(336).int32(m.shieldUpgradeLevel);
            if (m.buffDurationRemain != null && Object.hasOwnProperty.call(m, "buffDurationRemain"))
                w.uint32(344).int32(m.buffDurationRemain);
            if (m.buffDurationMax != null && Object.hasOwnProperty.call(m, "buffDurationMax"))
                w.uint32(352).int32(m.buffDurationMax);
            if (m.rallyTargets != null && m.rallyTargets.length) {
                for (var i = 0; i < m.rallyTargets.length; ++i)
                    $root.SC2APIProtocol.RallyTarget.encode(m.rallyTargets[i], w.uint32(362).fork()).ldelim();
            }
            return w;
        };

        Unit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Unit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Unit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.displayType = r.int32();
                    break;
                case 2:
                    m.alliance = r.int32();
                    break;
                case 3:
                    m.tag = r.uint64();
                    break;
                case 4:
                    m.unitType = r.uint32();
                    break;
                case 5:
                    m.owner = r.int32();
                    break;
                case 6:
                    m.pos = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                case 7:
                    m.facing = r.float();
                    break;
                case 8:
                    m.radius = r.float();
                    break;
                case 9:
                    m.buildProgress = r.float();
                    break;
                case 10:
                    m.cloak = r.int32();
                    break;
                case 27:
                    if (!(m.buffIds && m.buffIds.length))
                        m.buffIds = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.buffIds.push(r.uint32());
                    } else
                        m.buffIds.push(r.uint32());
                    break;
                case 31:
                    m.detectRange = r.float();
                    break;
                case 32:
                    m.radarRange = r.float();
                    break;
                case 11:
                    m.isSelected = r.bool();
                    break;
                case 12:
                    m.isOnScreen = r.bool();
                    break;
                case 13:
                    m.isBlip = r.bool();
                    break;
                case 35:
                    m.isPowered = r.bool();
                    break;
                case 39:
                    m.isActive = r.bool();
                    break;
                case 40:
                    m.attackUpgradeLevel = r.int32();
                    break;
                case 41:
                    m.armorUpgradeLevel = r.int32();
                    break;
                case 42:
                    m.shieldUpgradeLevel = r.int32();
                    break;
                case 14:
                    m.health = r.float();
                    break;
                case 15:
                    m.healthMax = r.float();
                    break;
                case 16:
                    m.shield = r.float();
                    break;
                case 36:
                    m.shieldMax = r.float();
                    break;
                case 17:
                    m.energy = r.float();
                    break;
                case 37:
                    m.energyMax = r.float();
                    break;
                case 18:
                    m.mineralContents = r.int32();
                    break;
                case 19:
                    m.vespeneContents = r.int32();
                    break;
                case 20:
                    m.isFlying = r.bool();
                    break;
                case 21:
                    m.isBurrowed = r.bool();
                    break;
                case 38:
                    m.isHallucination = r.bool();
                    break;
                case 22:
                    if (!(m.orders && m.orders.length))
                        m.orders = [];
                    m.orders.push($root.SC2APIProtocol.UnitOrder.decode(r, r.uint32()));
                    break;
                case 23:
                    m.addOnTag = r.uint64();
                    break;
                case 24:
                    if (!(m.passengers && m.passengers.length))
                        m.passengers = [];
                    m.passengers.push($root.SC2APIProtocol.PassengerUnit.decode(r, r.uint32()));
                    break;
                case 25:
                    m.cargoSpaceTaken = r.int32();
                    break;
                case 26:
                    m.cargoSpaceMax = r.int32();
                    break;
                case 28:
                    m.assignedHarvesters = r.int32();
                    break;
                case 29:
                    m.idealHarvesters = r.int32();
                    break;
                case 30:
                    m.weaponCooldown = r.float();
                    break;
                case 34:
                    m.engagedTargetTag = r.uint64();
                    break;
                case 43:
                    m.buffDurationRemain = r.int32();
                    break;
                case 44:
                    m.buffDurationMax = r.int32();
                    break;
                case 45:
                    if (!(m.rallyTargets && m.rallyTargets.length))
                        m.rallyTargets = [];
                    m.rallyTargets.push($root.SC2APIProtocol.RallyTarget.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Unit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Unit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.displayType != null && m.hasOwnProperty("displayType")) {
                switch (m.displayType) {
                default:
                    return "displayType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.alliance != null && m.hasOwnProperty("alliance")) {
                switch (m.alliance) {
                default:
                    return "alliance: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (!$util.isInteger(m.tag) && !(m.tag && $util.isInteger(m.tag.low) && $util.isInteger(m.tag.high)))
                    return "tag: integer|Long expected";
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                if (!$util.isInteger(m.unitType))
                    return "unitType: integer expected";
            }
            if (m.owner != null && m.hasOwnProperty("owner")) {
                if (!$util.isInteger(m.owner))
                    return "owner: integer expected";
            }
            if (m.pos != null && m.hasOwnProperty("pos")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.pos);
                    if (e)
                        return "pos." + e;
                }
            }
            if (m.facing != null && m.hasOwnProperty("facing")) {
                if (typeof m.facing !== "number")
                    return "facing: number expected";
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                if (typeof m.radius !== "number")
                    return "radius: number expected";
            }
            if (m.buildProgress != null && m.hasOwnProperty("buildProgress")) {
                if (typeof m.buildProgress !== "number")
                    return "buildProgress: number expected";
            }
            if (m.cloak != null && m.hasOwnProperty("cloak")) {
                switch (m.cloak) {
                default:
                    return "cloak: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.buffIds != null && m.hasOwnProperty("buffIds")) {
                if (!Array.isArray(m.buffIds))
                    return "buffIds: array expected";
                for (var i = 0; i < m.buffIds.length; ++i) {
                    if (!$util.isInteger(m.buffIds[i]))
                        return "buffIds: integer[] expected";
                }
            }
            if (m.detectRange != null && m.hasOwnProperty("detectRange")) {
                if (typeof m.detectRange !== "number")
                    return "detectRange: number expected";
            }
            if (m.radarRange != null && m.hasOwnProperty("radarRange")) {
                if (typeof m.radarRange !== "number")
                    return "radarRange: number expected";
            }
            if (m.isSelected != null && m.hasOwnProperty("isSelected")) {
                if (typeof m.isSelected !== "boolean")
                    return "isSelected: boolean expected";
            }
            if (m.isOnScreen != null && m.hasOwnProperty("isOnScreen")) {
                if (typeof m.isOnScreen !== "boolean")
                    return "isOnScreen: boolean expected";
            }
            if (m.isBlip != null && m.hasOwnProperty("isBlip")) {
                if (typeof m.isBlip !== "boolean")
                    return "isBlip: boolean expected";
            }
            if (m.isPowered != null && m.hasOwnProperty("isPowered")) {
                if (typeof m.isPowered !== "boolean")
                    return "isPowered: boolean expected";
            }
            if (m.isActive != null && m.hasOwnProperty("isActive")) {
                if (typeof m.isActive !== "boolean")
                    return "isActive: boolean expected";
            }
            if (m.attackUpgradeLevel != null && m.hasOwnProperty("attackUpgradeLevel")) {
                if (!$util.isInteger(m.attackUpgradeLevel))
                    return "attackUpgradeLevel: integer expected";
            }
            if (m.armorUpgradeLevel != null && m.hasOwnProperty("armorUpgradeLevel")) {
                if (!$util.isInteger(m.armorUpgradeLevel))
                    return "armorUpgradeLevel: integer expected";
            }
            if (m.shieldUpgradeLevel != null && m.hasOwnProperty("shieldUpgradeLevel")) {
                if (!$util.isInteger(m.shieldUpgradeLevel))
                    return "shieldUpgradeLevel: integer expected";
            }
            if (m.health != null && m.hasOwnProperty("health")) {
                if (typeof m.health !== "number")
                    return "health: number expected";
            }
            if (m.healthMax != null && m.hasOwnProperty("healthMax")) {
                if (typeof m.healthMax !== "number")
                    return "healthMax: number expected";
            }
            if (m.shield != null && m.hasOwnProperty("shield")) {
                if (typeof m.shield !== "number")
                    return "shield: number expected";
            }
            if (m.shieldMax != null && m.hasOwnProperty("shieldMax")) {
                if (typeof m.shieldMax !== "number")
                    return "shieldMax: number expected";
            }
            if (m.energy != null && m.hasOwnProperty("energy")) {
                if (typeof m.energy !== "number")
                    return "energy: number expected";
            }
            if (m.energyMax != null && m.hasOwnProperty("energyMax")) {
                if (typeof m.energyMax !== "number")
                    return "energyMax: number expected";
            }
            if (m.mineralContents != null && m.hasOwnProperty("mineralContents")) {
                if (!$util.isInteger(m.mineralContents))
                    return "mineralContents: integer expected";
            }
            if (m.vespeneContents != null && m.hasOwnProperty("vespeneContents")) {
                if (!$util.isInteger(m.vespeneContents))
                    return "vespeneContents: integer expected";
            }
            if (m.isFlying != null && m.hasOwnProperty("isFlying")) {
                if (typeof m.isFlying !== "boolean")
                    return "isFlying: boolean expected";
            }
            if (m.isBurrowed != null && m.hasOwnProperty("isBurrowed")) {
                if (typeof m.isBurrowed !== "boolean")
                    return "isBurrowed: boolean expected";
            }
            if (m.isHallucination != null && m.hasOwnProperty("isHallucination")) {
                if (typeof m.isHallucination !== "boolean")
                    return "isHallucination: boolean expected";
            }
            if (m.orders != null && m.hasOwnProperty("orders")) {
                if (!Array.isArray(m.orders))
                    return "orders: array expected";
                for (var i = 0; i < m.orders.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.UnitOrder.verify(m.orders[i]);
                        if (e)
                            return "orders." + e;
                    }
                }
            }
            if (m.addOnTag != null && m.hasOwnProperty("addOnTag")) {
                if (!$util.isInteger(m.addOnTag) && !(m.addOnTag && $util.isInteger(m.addOnTag.low) && $util.isInteger(m.addOnTag.high)))
                    return "addOnTag: integer|Long expected";
            }
            if (m.passengers != null && m.hasOwnProperty("passengers")) {
                if (!Array.isArray(m.passengers))
                    return "passengers: array expected";
                for (var i = 0; i < m.passengers.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.PassengerUnit.verify(m.passengers[i]);
                        if (e)
                            return "passengers." + e;
                    }
                }
            }
            if (m.cargoSpaceTaken != null && m.hasOwnProperty("cargoSpaceTaken")) {
                if (!$util.isInteger(m.cargoSpaceTaken))
                    return "cargoSpaceTaken: integer expected";
            }
            if (m.cargoSpaceMax != null && m.hasOwnProperty("cargoSpaceMax")) {
                if (!$util.isInteger(m.cargoSpaceMax))
                    return "cargoSpaceMax: integer expected";
            }
            if (m.assignedHarvesters != null && m.hasOwnProperty("assignedHarvesters")) {
                if (!$util.isInteger(m.assignedHarvesters))
                    return "assignedHarvesters: integer expected";
            }
            if (m.idealHarvesters != null && m.hasOwnProperty("idealHarvesters")) {
                if (!$util.isInteger(m.idealHarvesters))
                    return "idealHarvesters: integer expected";
            }
            if (m.weaponCooldown != null && m.hasOwnProperty("weaponCooldown")) {
                if (typeof m.weaponCooldown !== "number")
                    return "weaponCooldown: number expected";
            }
            if (m.engagedTargetTag != null && m.hasOwnProperty("engagedTargetTag")) {
                if (!$util.isInteger(m.engagedTargetTag) && !(m.engagedTargetTag && $util.isInteger(m.engagedTargetTag.low) && $util.isInteger(m.engagedTargetTag.high)))
                    return "engagedTargetTag: integer|Long expected";
            }
            if (m.buffDurationRemain != null && m.hasOwnProperty("buffDurationRemain")) {
                if (!$util.isInteger(m.buffDurationRemain))
                    return "buffDurationRemain: integer expected";
            }
            if (m.buffDurationMax != null && m.hasOwnProperty("buffDurationMax")) {
                if (!$util.isInteger(m.buffDurationMax))
                    return "buffDurationMax: integer expected";
            }
            if (m.rallyTargets != null && m.hasOwnProperty("rallyTargets")) {
                if (!Array.isArray(m.rallyTargets))
                    return "rallyTargets: array expected";
                for (var i = 0; i < m.rallyTargets.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.RallyTarget.verify(m.rallyTargets[i]);
                        if (e)
                            return "rallyTargets." + e;
                    }
                }
            }
            return null;
        };

        Unit.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Unit)
                return d;
            var m = new $root.SC2APIProtocol.Unit();
            switch (d.displayType) {
            case "Visible":
            case 1:
                m.displayType = 1;
                break;
            case "Snapshot":
            case 2:
                m.displayType = 2;
                break;
            case "Hidden":
            case 3:
                m.displayType = 3;
                break;
            case "Placeholder":
            case 4:
                m.displayType = 4;
                break;
            }
            switch (d.alliance) {
            case "Self":
            case 1:
                m.alliance = 1;
                break;
            case "Ally":
            case 2:
                m.alliance = 2;
                break;
            case "Neutral":
            case 3:
                m.alliance = 3;
                break;
            case "Enemy":
            case 4:
                m.alliance = 4;
                break;
            }
            if (d.tag != null) {
                if ($util.Long)
                    (m.tag = $util.Long.fromValue(d.tag)).unsigned = true;
                else if (typeof d.tag === "string")
                    m.tag = parseInt(d.tag, 10);
                else if (typeof d.tag === "number")
                    m.tag = d.tag;
                else if (typeof d.tag === "object")
                    m.tag = new $util.LongBits(d.tag.low >>> 0, d.tag.high >>> 0).toNumber(true);
            }
            if (d.unitType != null) {
                m.unitType = d.unitType >>> 0;
            }
            if (d.owner != null) {
                m.owner = d.owner | 0;
            }
            if (d.pos != null) {
                if (typeof d.pos !== "object")
                    throw TypeError(".SC2APIProtocol.Unit.pos: object expected");
                m.pos = $root.SC2APIProtocol.Point.fromObject(d.pos);
            }
            if (d.facing != null) {
                m.facing = Number(d.facing);
            }
            if (d.radius != null) {
                m.radius = Number(d.radius);
            }
            if (d.buildProgress != null) {
                m.buildProgress = Number(d.buildProgress);
            }
            switch (d.cloak) {
            case "CloakedUnknown":
            case 0:
                m.cloak = 0;
                break;
            case "Cloaked":
            case 1:
                m.cloak = 1;
                break;
            case "CloakedDetected":
            case 2:
                m.cloak = 2;
                break;
            case "NotCloaked":
            case 3:
                m.cloak = 3;
                break;
            case "CloakedAllied":
            case 4:
                m.cloak = 4;
                break;
            }
            if (d.buffIds) {
                if (!Array.isArray(d.buffIds))
                    throw TypeError(".SC2APIProtocol.Unit.buffIds: array expected");
                m.buffIds = [];
                for (var i = 0; i < d.buffIds.length; ++i) {
                    m.buffIds[i] = d.buffIds[i] >>> 0;
                }
            }
            if (d.detectRange != null) {
                m.detectRange = Number(d.detectRange);
            }
            if (d.radarRange != null) {
                m.radarRange = Number(d.radarRange);
            }
            if (d.isSelected != null) {
                m.isSelected = Boolean(d.isSelected);
            }
            if (d.isOnScreen != null) {
                m.isOnScreen = Boolean(d.isOnScreen);
            }
            if (d.isBlip != null) {
                m.isBlip = Boolean(d.isBlip);
            }
            if (d.isPowered != null) {
                m.isPowered = Boolean(d.isPowered);
            }
            if (d.isActive != null) {
                m.isActive = Boolean(d.isActive);
            }
            if (d.attackUpgradeLevel != null) {
                m.attackUpgradeLevel = d.attackUpgradeLevel | 0;
            }
            if (d.armorUpgradeLevel != null) {
                m.armorUpgradeLevel = d.armorUpgradeLevel | 0;
            }
            if (d.shieldUpgradeLevel != null) {
                m.shieldUpgradeLevel = d.shieldUpgradeLevel | 0;
            }
            if (d.health != null) {
                m.health = Number(d.health);
            }
            if (d.healthMax != null) {
                m.healthMax = Number(d.healthMax);
            }
            if (d.shield != null) {
                m.shield = Number(d.shield);
            }
            if (d.shieldMax != null) {
                m.shieldMax = Number(d.shieldMax);
            }
            if (d.energy != null) {
                m.energy = Number(d.energy);
            }
            if (d.energyMax != null) {
                m.energyMax = Number(d.energyMax);
            }
            if (d.mineralContents != null) {
                m.mineralContents = d.mineralContents | 0;
            }
            if (d.vespeneContents != null) {
                m.vespeneContents = d.vespeneContents | 0;
            }
            if (d.isFlying != null) {
                m.isFlying = Boolean(d.isFlying);
            }
            if (d.isBurrowed != null) {
                m.isBurrowed = Boolean(d.isBurrowed);
            }
            if (d.isHallucination != null) {
                m.isHallucination = Boolean(d.isHallucination);
            }
            if (d.orders) {
                if (!Array.isArray(d.orders))
                    throw TypeError(".SC2APIProtocol.Unit.orders: array expected");
                m.orders = [];
                for (var i = 0; i < d.orders.length; ++i) {
                    if (typeof d.orders[i] !== "object")
                        throw TypeError(".SC2APIProtocol.Unit.orders: object expected");
                    m.orders[i] = $root.SC2APIProtocol.UnitOrder.fromObject(d.orders[i]);
                }
            }
            if (d.addOnTag != null) {
                if ($util.Long)
                    (m.addOnTag = $util.Long.fromValue(d.addOnTag)).unsigned = true;
                else if (typeof d.addOnTag === "string")
                    m.addOnTag = parseInt(d.addOnTag, 10);
                else if (typeof d.addOnTag === "number")
                    m.addOnTag = d.addOnTag;
                else if (typeof d.addOnTag === "object")
                    m.addOnTag = new $util.LongBits(d.addOnTag.low >>> 0, d.addOnTag.high >>> 0).toNumber(true);
            }
            if (d.passengers) {
                if (!Array.isArray(d.passengers))
                    throw TypeError(".SC2APIProtocol.Unit.passengers: array expected");
                m.passengers = [];
                for (var i = 0; i < d.passengers.length; ++i) {
                    if (typeof d.passengers[i] !== "object")
                        throw TypeError(".SC2APIProtocol.Unit.passengers: object expected");
                    m.passengers[i] = $root.SC2APIProtocol.PassengerUnit.fromObject(d.passengers[i]);
                }
            }
            if (d.cargoSpaceTaken != null) {
                m.cargoSpaceTaken = d.cargoSpaceTaken | 0;
            }
            if (d.cargoSpaceMax != null) {
                m.cargoSpaceMax = d.cargoSpaceMax | 0;
            }
            if (d.assignedHarvesters != null) {
                m.assignedHarvesters = d.assignedHarvesters | 0;
            }
            if (d.idealHarvesters != null) {
                m.idealHarvesters = d.idealHarvesters | 0;
            }
            if (d.weaponCooldown != null) {
                m.weaponCooldown = Number(d.weaponCooldown);
            }
            if (d.engagedTargetTag != null) {
                if ($util.Long)
                    (m.engagedTargetTag = $util.Long.fromValue(d.engagedTargetTag)).unsigned = true;
                else if (typeof d.engagedTargetTag === "string")
                    m.engagedTargetTag = parseInt(d.engagedTargetTag, 10);
                else if (typeof d.engagedTargetTag === "number")
                    m.engagedTargetTag = d.engagedTargetTag;
                else if (typeof d.engagedTargetTag === "object")
                    m.engagedTargetTag = new $util.LongBits(d.engagedTargetTag.low >>> 0, d.engagedTargetTag.high >>> 0).toNumber(true);
            }
            if (d.buffDurationRemain != null) {
                m.buffDurationRemain = d.buffDurationRemain | 0;
            }
            if (d.buffDurationMax != null) {
                m.buffDurationMax = d.buffDurationMax | 0;
            }
            if (d.rallyTargets) {
                if (!Array.isArray(d.rallyTargets))
                    throw TypeError(".SC2APIProtocol.Unit.rallyTargets: array expected");
                m.rallyTargets = [];
                for (var i = 0; i < d.rallyTargets.length; ++i) {
                    if (typeof d.rallyTargets[i] !== "object")
                        throw TypeError(".SC2APIProtocol.Unit.rallyTargets: object expected");
                    m.rallyTargets[i] = $root.SC2APIProtocol.RallyTarget.fromObject(d.rallyTargets[i]);
                }
            }
            return m;
        };

        Unit.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.orders = [];
                d.passengers = [];
                d.buffIds = [];
                d.rallyTargets = [];
            }
            if (o.defaults) {
                d.displayType = o.enums === String ? "Visible" : 1;
                d.alliance = o.enums === String ? "Self" : 1;
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.tag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.tag = o.longs === String ? "0" : 0;
                d.unitType = 0;
                d.owner = 0;
                d.pos = null;
                d.facing = 0;
                d.radius = 0;
                d.buildProgress = 0;
                d.cloak = o.enums === String ? "CloakedUnknown" : 0;
                d.isSelected = false;
                d.isOnScreen = false;
                d.isBlip = false;
                d.health = 0;
                d.healthMax = 0;
                d.shield = 0;
                d.energy = 0;
                d.mineralContents = 0;
                d.vespeneContents = 0;
                d.isFlying = false;
                d.isBurrowed = false;
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.addOnTag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.addOnTag = o.longs === String ? "0" : 0;
                d.cargoSpaceTaken = 0;
                d.cargoSpaceMax = 0;
                d.assignedHarvesters = 0;
                d.idealHarvesters = 0;
                d.weaponCooldown = 0;
                d.detectRange = 0;
                d.radarRange = 0;
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.engagedTargetTag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.engagedTargetTag = o.longs === String ? "0" : 0;
                d.isPowered = false;
                d.shieldMax = 0;
                d.energyMax = 0;
                d.isHallucination = false;
                d.isActive = false;
                d.attackUpgradeLevel = 0;
                d.armorUpgradeLevel = 0;
                d.shieldUpgradeLevel = 0;
                d.buffDurationRemain = 0;
                d.buffDurationMax = 0;
            }
            if (m.displayType != null && m.hasOwnProperty("displayType")) {
                d.displayType = o.enums === String ? $root.SC2APIProtocol.DisplayType[m.displayType] : m.displayType;
            }
            if (m.alliance != null && m.hasOwnProperty("alliance")) {
                d.alliance = o.enums === String ? $root.SC2APIProtocol.Alliance[m.alliance] : m.alliance;
            }
            if (m.tag != null && m.hasOwnProperty("tag")) {
                if (typeof m.tag === "number")
                    d.tag = o.longs === String ? String(m.tag) : m.tag;
                else
                    d.tag = o.longs === String ? $util.Long.prototype.toString.call(m.tag) : o.longs === Number ? new $util.LongBits(m.tag.low >>> 0, m.tag.high >>> 0).toNumber(true) : m.tag;
            }
            if (m.unitType != null && m.hasOwnProperty("unitType")) {
                d.unitType = m.unitType;
            }
            if (m.owner != null && m.hasOwnProperty("owner")) {
                d.owner = m.owner;
            }
            if (m.pos != null && m.hasOwnProperty("pos")) {
                d.pos = $root.SC2APIProtocol.Point.toObject(m.pos, o);
            }
            if (m.facing != null && m.hasOwnProperty("facing")) {
                d.facing = o.json && !isFinite(m.facing) ? String(m.facing) : m.facing;
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                d.radius = o.json && !isFinite(m.radius) ? String(m.radius) : m.radius;
            }
            if (m.buildProgress != null && m.hasOwnProperty("buildProgress")) {
                d.buildProgress = o.json && !isFinite(m.buildProgress) ? String(m.buildProgress) : m.buildProgress;
            }
            if (m.cloak != null && m.hasOwnProperty("cloak")) {
                d.cloak = o.enums === String ? $root.SC2APIProtocol.CloakState[m.cloak] : m.cloak;
            }
            if (m.isSelected != null && m.hasOwnProperty("isSelected")) {
                d.isSelected = m.isSelected;
            }
            if (m.isOnScreen != null && m.hasOwnProperty("isOnScreen")) {
                d.isOnScreen = m.isOnScreen;
            }
            if (m.isBlip != null && m.hasOwnProperty("isBlip")) {
                d.isBlip = m.isBlip;
            }
            if (m.health != null && m.hasOwnProperty("health")) {
                d.health = o.json && !isFinite(m.health) ? String(m.health) : m.health;
            }
            if (m.healthMax != null && m.hasOwnProperty("healthMax")) {
                d.healthMax = o.json && !isFinite(m.healthMax) ? String(m.healthMax) : m.healthMax;
            }
            if (m.shield != null && m.hasOwnProperty("shield")) {
                d.shield = o.json && !isFinite(m.shield) ? String(m.shield) : m.shield;
            }
            if (m.energy != null && m.hasOwnProperty("energy")) {
                d.energy = o.json && !isFinite(m.energy) ? String(m.energy) : m.energy;
            }
            if (m.mineralContents != null && m.hasOwnProperty("mineralContents")) {
                d.mineralContents = m.mineralContents;
            }
            if (m.vespeneContents != null && m.hasOwnProperty("vespeneContents")) {
                d.vespeneContents = m.vespeneContents;
            }
            if (m.isFlying != null && m.hasOwnProperty("isFlying")) {
                d.isFlying = m.isFlying;
            }
            if (m.isBurrowed != null && m.hasOwnProperty("isBurrowed")) {
                d.isBurrowed = m.isBurrowed;
            }
            if (m.orders && m.orders.length) {
                d.orders = [];
                for (var j = 0; j < m.orders.length; ++j) {
                    d.orders[j] = $root.SC2APIProtocol.UnitOrder.toObject(m.orders[j], o);
                }
            }
            if (m.addOnTag != null && m.hasOwnProperty("addOnTag")) {
                if (typeof m.addOnTag === "number")
                    d.addOnTag = o.longs === String ? String(m.addOnTag) : m.addOnTag;
                else
                    d.addOnTag = o.longs === String ? $util.Long.prototype.toString.call(m.addOnTag) : o.longs === Number ? new $util.LongBits(m.addOnTag.low >>> 0, m.addOnTag.high >>> 0).toNumber(true) : m.addOnTag;
            }
            if (m.passengers && m.passengers.length) {
                d.passengers = [];
                for (var j = 0; j < m.passengers.length; ++j) {
                    d.passengers[j] = $root.SC2APIProtocol.PassengerUnit.toObject(m.passengers[j], o);
                }
            }
            if (m.cargoSpaceTaken != null && m.hasOwnProperty("cargoSpaceTaken")) {
                d.cargoSpaceTaken = m.cargoSpaceTaken;
            }
            if (m.cargoSpaceMax != null && m.hasOwnProperty("cargoSpaceMax")) {
                d.cargoSpaceMax = m.cargoSpaceMax;
            }
            if (m.buffIds && m.buffIds.length) {
                d.buffIds = [];
                for (var j = 0; j < m.buffIds.length; ++j) {
                    d.buffIds[j] = m.buffIds[j];
                }
            }
            if (m.assignedHarvesters != null && m.hasOwnProperty("assignedHarvesters")) {
                d.assignedHarvesters = m.assignedHarvesters;
            }
            if (m.idealHarvesters != null && m.hasOwnProperty("idealHarvesters")) {
                d.idealHarvesters = m.idealHarvesters;
            }
            if (m.weaponCooldown != null && m.hasOwnProperty("weaponCooldown")) {
                d.weaponCooldown = o.json && !isFinite(m.weaponCooldown) ? String(m.weaponCooldown) : m.weaponCooldown;
            }
            if (m.detectRange != null && m.hasOwnProperty("detectRange")) {
                d.detectRange = o.json && !isFinite(m.detectRange) ? String(m.detectRange) : m.detectRange;
            }
            if (m.radarRange != null && m.hasOwnProperty("radarRange")) {
                d.radarRange = o.json && !isFinite(m.radarRange) ? String(m.radarRange) : m.radarRange;
            }
            if (m.engagedTargetTag != null && m.hasOwnProperty("engagedTargetTag")) {
                if (typeof m.engagedTargetTag === "number")
                    d.engagedTargetTag = o.longs === String ? String(m.engagedTargetTag) : m.engagedTargetTag;
                else
                    d.engagedTargetTag = o.longs === String ? $util.Long.prototype.toString.call(m.engagedTargetTag) : o.longs === Number ? new $util.LongBits(m.engagedTargetTag.low >>> 0, m.engagedTargetTag.high >>> 0).toNumber(true) : m.engagedTargetTag;
            }
            if (m.isPowered != null && m.hasOwnProperty("isPowered")) {
                d.isPowered = m.isPowered;
            }
            if (m.shieldMax != null && m.hasOwnProperty("shieldMax")) {
                d.shieldMax = o.json && !isFinite(m.shieldMax) ? String(m.shieldMax) : m.shieldMax;
            }
            if (m.energyMax != null && m.hasOwnProperty("energyMax")) {
                d.energyMax = o.json && !isFinite(m.energyMax) ? String(m.energyMax) : m.energyMax;
            }
            if (m.isHallucination != null && m.hasOwnProperty("isHallucination")) {
                d.isHallucination = m.isHallucination;
            }
            if (m.isActive != null && m.hasOwnProperty("isActive")) {
                d.isActive = m.isActive;
            }
            if (m.attackUpgradeLevel != null && m.hasOwnProperty("attackUpgradeLevel")) {
                d.attackUpgradeLevel = m.attackUpgradeLevel;
            }
            if (m.armorUpgradeLevel != null && m.hasOwnProperty("armorUpgradeLevel")) {
                d.armorUpgradeLevel = m.armorUpgradeLevel;
            }
            if (m.shieldUpgradeLevel != null && m.hasOwnProperty("shieldUpgradeLevel")) {
                d.shieldUpgradeLevel = m.shieldUpgradeLevel;
            }
            if (m.buffDurationRemain != null && m.hasOwnProperty("buffDurationRemain")) {
                d.buffDurationRemain = m.buffDurationRemain;
            }
            if (m.buffDurationMax != null && m.hasOwnProperty("buffDurationMax")) {
                d.buffDurationMax = m.buffDurationMax;
            }
            if (m.rallyTargets && m.rallyTargets.length) {
                d.rallyTargets = [];
                for (var j = 0; j < m.rallyTargets.length; ++j) {
                    d.rallyTargets[j] = $root.SC2APIProtocol.RallyTarget.toObject(m.rallyTargets[j], o);
                }
            }
            return d;
        };

        Unit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Unit;
    })();

    SC2APIProtocol.MapState = (function() {

        function MapState(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        MapState.prototype.visibility = null;
        MapState.prototype.creep = null;

        MapState.create = function create(properties) {
            return new MapState(properties);
        };

        MapState.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.visibility != null && Object.hasOwnProperty.call(m, "visibility"))
                $root.SC2APIProtocol.ImageData.encode(m.visibility, w.uint32(10).fork()).ldelim();
            if (m.creep != null && Object.hasOwnProperty.call(m, "creep"))
                $root.SC2APIProtocol.ImageData.encode(m.creep, w.uint32(18).fork()).ldelim();
            return w;
        };

        MapState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        MapState.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.MapState();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.visibility = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                case 2:
                    m.creep = $root.SC2APIProtocol.ImageData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        MapState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        MapState.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.visibility != null && m.hasOwnProperty("visibility")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.visibility);
                    if (e)
                        return "visibility." + e;
                }
            }
            if (m.creep != null && m.hasOwnProperty("creep")) {
                {
                    var e = $root.SC2APIProtocol.ImageData.verify(m.creep);
                    if (e)
                        return "creep." + e;
                }
            }
            return null;
        };

        MapState.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.MapState)
                return d;
            var m = new $root.SC2APIProtocol.MapState();
            if (d.visibility != null) {
                if (typeof d.visibility !== "object")
                    throw TypeError(".SC2APIProtocol.MapState.visibility: object expected");
                m.visibility = $root.SC2APIProtocol.ImageData.fromObject(d.visibility);
            }
            if (d.creep != null) {
                if (typeof d.creep !== "object")
                    throw TypeError(".SC2APIProtocol.MapState.creep: object expected");
                m.creep = $root.SC2APIProtocol.ImageData.fromObject(d.creep);
            }
            return m;
        };

        MapState.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.visibility = null;
                d.creep = null;
            }
            if (m.visibility != null && m.hasOwnProperty("visibility")) {
                d.visibility = $root.SC2APIProtocol.ImageData.toObject(m.visibility, o);
            }
            if (m.creep != null && m.hasOwnProperty("creep")) {
                d.creep = $root.SC2APIProtocol.ImageData.toObject(m.creep, o);
            }
            return d;
        };

        MapState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MapState;
    })();

    SC2APIProtocol.Event = (function() {

        function Event(p) {
            this.deadUnits = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Event.prototype.deadUnits = $util.emptyArray;

        Event.create = function create(properties) {
            return new Event(properties);
        };

        Event.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.deadUnits != null && m.deadUnits.length) {
                for (var i = 0; i < m.deadUnits.length; ++i)
                    w.uint32(8).uint64(m.deadUnits[i]);
            }
            return w;
        };

        Event.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Event.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Event();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.deadUnits && m.deadUnits.length))
                        m.deadUnits = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.deadUnits.push(r.uint64());
                    } else
                        m.deadUnits.push(r.uint64());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Event.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Event.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.deadUnits != null && m.hasOwnProperty("deadUnits")) {
                if (!Array.isArray(m.deadUnits))
                    return "deadUnits: array expected";
                for (var i = 0; i < m.deadUnits.length; ++i) {
                    if (!$util.isInteger(m.deadUnits[i]) && !(m.deadUnits[i] && $util.isInteger(m.deadUnits[i].low) && $util.isInteger(m.deadUnits[i].high)))
                        return "deadUnits: integer|Long[] expected";
                }
            }
            return null;
        };

        Event.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Event)
                return d;
            var m = new $root.SC2APIProtocol.Event();
            if (d.deadUnits) {
                if (!Array.isArray(d.deadUnits))
                    throw TypeError(".SC2APIProtocol.Event.deadUnits: array expected");
                m.deadUnits = [];
                for (var i = 0; i < d.deadUnits.length; ++i) {
                    if ($util.Long)
                        (m.deadUnits[i] = $util.Long.fromValue(d.deadUnits[i])).unsigned = true;
                    else if (typeof d.deadUnits[i] === "string")
                        m.deadUnits[i] = parseInt(d.deadUnits[i], 10);
                    else if (typeof d.deadUnits[i] === "number")
                        m.deadUnits[i] = d.deadUnits[i];
                    else if (typeof d.deadUnits[i] === "object")
                        m.deadUnits[i] = new $util.LongBits(d.deadUnits[i].low >>> 0, d.deadUnits[i].high >>> 0).toNumber(true);
                }
            }
            return m;
        };

        Event.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.deadUnits = [];
            }
            if (m.deadUnits && m.deadUnits.length) {
                d.deadUnits = [];
                for (var j = 0; j < m.deadUnits.length; ++j) {
                    if (typeof m.deadUnits[j] === "number")
                        d.deadUnits[j] = o.longs === String ? String(m.deadUnits[j]) : m.deadUnits[j];
                    else
                        d.deadUnits[j] = o.longs === String ? $util.Long.prototype.toString.call(m.deadUnits[j]) : o.longs === Number ? new $util.LongBits(m.deadUnits[j].low >>> 0, m.deadUnits[j].high >>> 0).toNumber(true) : m.deadUnits[j];
                }
            }
            return d;
        };

        Event.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Event;
    })();

    SC2APIProtocol.Effect = (function() {

        function Effect(p) {
            this.pos = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Effect.prototype.effectId = 0;
        Effect.prototype.pos = $util.emptyArray;
        Effect.prototype.alliance = 1;
        Effect.prototype.owner = 0;
        Effect.prototype.radius = 0;

        Effect.create = function create(properties) {
            return new Effect(properties);
        };

        Effect.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.effectId != null && Object.hasOwnProperty.call(m, "effectId"))
                w.uint32(8).uint32(m.effectId);
            if (m.pos != null && m.pos.length) {
                for (var i = 0; i < m.pos.length; ++i)
                    $root.SC2APIProtocol.Point2D.encode(m.pos[i], w.uint32(18).fork()).ldelim();
            }
            if (m.alliance != null && Object.hasOwnProperty.call(m, "alliance"))
                w.uint32(24).int32(m.alliance);
            if (m.owner != null && Object.hasOwnProperty.call(m, "owner"))
                w.uint32(32).int32(m.owner);
            if (m.radius != null && Object.hasOwnProperty.call(m, "radius"))
                w.uint32(45).float(m.radius);
            return w;
        };

        Effect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Effect.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Effect();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.effectId = r.uint32();
                    break;
                case 2:
                    if (!(m.pos && m.pos.length))
                        m.pos = [];
                    m.pos.push($root.SC2APIProtocol.Point2D.decode(r, r.uint32()));
                    break;
                case 3:
                    m.alliance = r.int32();
                    break;
                case 4:
                    m.owner = r.int32();
                    break;
                case 5:
                    m.radius = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Effect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Effect.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.effectId != null && m.hasOwnProperty("effectId")) {
                if (!$util.isInteger(m.effectId))
                    return "effectId: integer expected";
            }
            if (m.pos != null && m.hasOwnProperty("pos")) {
                if (!Array.isArray(m.pos))
                    return "pos: array expected";
                for (var i = 0; i < m.pos.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.Point2D.verify(m.pos[i]);
                        if (e)
                            return "pos." + e;
                    }
                }
            }
            if (m.alliance != null && m.hasOwnProperty("alliance")) {
                switch (m.alliance) {
                default:
                    return "alliance: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.owner != null && m.hasOwnProperty("owner")) {
                if (!$util.isInteger(m.owner))
                    return "owner: integer expected";
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                if (typeof m.radius !== "number")
                    return "radius: number expected";
            }
            return null;
        };

        Effect.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Effect)
                return d;
            var m = new $root.SC2APIProtocol.Effect();
            if (d.effectId != null) {
                m.effectId = d.effectId >>> 0;
            }
            if (d.pos) {
                if (!Array.isArray(d.pos))
                    throw TypeError(".SC2APIProtocol.Effect.pos: array expected");
                m.pos = [];
                for (var i = 0; i < d.pos.length; ++i) {
                    if (typeof d.pos[i] !== "object")
                        throw TypeError(".SC2APIProtocol.Effect.pos: object expected");
                    m.pos[i] = $root.SC2APIProtocol.Point2D.fromObject(d.pos[i]);
                }
            }
            switch (d.alliance) {
            case "Self":
            case 1:
                m.alliance = 1;
                break;
            case "Ally":
            case 2:
                m.alliance = 2;
                break;
            case "Neutral":
            case 3:
                m.alliance = 3;
                break;
            case "Enemy":
            case 4:
                m.alliance = 4;
                break;
            }
            if (d.owner != null) {
                m.owner = d.owner | 0;
            }
            if (d.radius != null) {
                m.radius = Number(d.radius);
            }
            return m;
        };

        Effect.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.pos = [];
            }
            if (o.defaults) {
                d.effectId = 0;
                d.alliance = o.enums === String ? "Self" : 1;
                d.owner = 0;
                d.radius = 0;
            }
            if (m.effectId != null && m.hasOwnProperty("effectId")) {
                d.effectId = m.effectId;
            }
            if (m.pos && m.pos.length) {
                d.pos = [];
                for (var j = 0; j < m.pos.length; ++j) {
                    d.pos[j] = $root.SC2APIProtocol.Point2D.toObject(m.pos[j], o);
                }
            }
            if (m.alliance != null && m.hasOwnProperty("alliance")) {
                d.alliance = o.enums === String ? $root.SC2APIProtocol.Alliance[m.alliance] : m.alliance;
            }
            if (m.owner != null && m.hasOwnProperty("owner")) {
                d.owner = m.owner;
            }
            if (m.radius != null && m.hasOwnProperty("radius")) {
                d.radius = o.json && !isFinite(m.radius) ? String(m.radius) : m.radius;
            }
            return d;
        };

        Effect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Effect;
    })();

    SC2APIProtocol.ActionRaw = (function() {

        function ActionRaw(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionRaw.prototype.unitCommand = null;
        ActionRaw.prototype.cameraMove = null;
        ActionRaw.prototype.toggleAutocast = null;

        var $oneOfFields;

        Object.defineProperty(ActionRaw.prototype, "action", {
            get: $util.oneOfGetter($oneOfFields = ["unitCommand", "cameraMove", "toggleAutocast"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        ActionRaw.create = function create(properties) {
            return new ActionRaw(properties);
        };

        ActionRaw.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitCommand != null && Object.hasOwnProperty.call(m, "unitCommand"))
                $root.SC2APIProtocol.ActionRawUnitCommand.encode(m.unitCommand, w.uint32(10).fork()).ldelim();
            if (m.cameraMove != null && Object.hasOwnProperty.call(m, "cameraMove"))
                $root.SC2APIProtocol.ActionRawCameraMove.encode(m.cameraMove, w.uint32(18).fork()).ldelim();
            if (m.toggleAutocast != null && Object.hasOwnProperty.call(m, "toggleAutocast"))
                $root.SC2APIProtocol.ActionRawToggleAutocast.encode(m.toggleAutocast, w.uint32(26).fork()).ldelim();
            return w;
        };

        ActionRaw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionRaw.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionRaw();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitCommand = $root.SC2APIProtocol.ActionRawUnitCommand.decode(r, r.uint32());
                    break;
                case 2:
                    m.cameraMove = $root.SC2APIProtocol.ActionRawCameraMove.decode(r, r.uint32());
                    break;
                case 3:
                    m.toggleAutocast = $root.SC2APIProtocol.ActionRawToggleAutocast.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionRaw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionRaw.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.unitCommand != null && m.hasOwnProperty("unitCommand")) {
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionRawUnitCommand.verify(m.unitCommand);
                    if (e)
                        return "unitCommand." + e;
                }
            }
            if (m.cameraMove != null && m.hasOwnProperty("cameraMove")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionRawCameraMove.verify(m.cameraMove);
                    if (e)
                        return "cameraMove." + e;
                }
            }
            if (m.toggleAutocast != null && m.hasOwnProperty("toggleAutocast")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionRawToggleAutocast.verify(m.toggleAutocast);
                    if (e)
                        return "toggleAutocast." + e;
                }
            }
            return null;
        };

        ActionRaw.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionRaw)
                return d;
            var m = new $root.SC2APIProtocol.ActionRaw();
            if (d.unitCommand != null) {
                if (typeof d.unitCommand !== "object")
                    throw TypeError(".SC2APIProtocol.ActionRaw.unitCommand: object expected");
                m.unitCommand = $root.SC2APIProtocol.ActionRawUnitCommand.fromObject(d.unitCommand);
            }
            if (d.cameraMove != null) {
                if (typeof d.cameraMove !== "object")
                    throw TypeError(".SC2APIProtocol.ActionRaw.cameraMove: object expected");
                m.cameraMove = $root.SC2APIProtocol.ActionRawCameraMove.fromObject(d.cameraMove);
            }
            if (d.toggleAutocast != null) {
                if (typeof d.toggleAutocast !== "object")
                    throw TypeError(".SC2APIProtocol.ActionRaw.toggleAutocast: object expected");
                m.toggleAutocast = $root.SC2APIProtocol.ActionRawToggleAutocast.fromObject(d.toggleAutocast);
            }
            return m;
        };

        ActionRaw.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (m.unitCommand != null && m.hasOwnProperty("unitCommand")) {
                d.unitCommand = $root.SC2APIProtocol.ActionRawUnitCommand.toObject(m.unitCommand, o);
                if (o.oneofs)
                    d.action = "unitCommand";
            }
            if (m.cameraMove != null && m.hasOwnProperty("cameraMove")) {
                d.cameraMove = $root.SC2APIProtocol.ActionRawCameraMove.toObject(m.cameraMove, o);
                if (o.oneofs)
                    d.action = "cameraMove";
            }
            if (m.toggleAutocast != null && m.hasOwnProperty("toggleAutocast")) {
                d.toggleAutocast = $root.SC2APIProtocol.ActionRawToggleAutocast.toObject(m.toggleAutocast, o);
                if (o.oneofs)
                    d.action = "toggleAutocast";
            }
            return d;
        };

        ActionRaw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionRaw;
    })();

    SC2APIProtocol.ActionRawUnitCommand = (function() {

        function ActionRawUnitCommand(p) {
            this.unitTags = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionRawUnitCommand.prototype.abilityId = 0;
        ActionRawUnitCommand.prototype.targetWorldSpacePos = null;
        ActionRawUnitCommand.prototype.targetUnitTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        ActionRawUnitCommand.prototype.unitTags = $util.emptyArray;
        ActionRawUnitCommand.prototype.queueCommand = false;

        var $oneOfFields;

        Object.defineProperty(ActionRawUnitCommand.prototype, "target", {
            get: $util.oneOfGetter($oneOfFields = ["targetWorldSpacePos", "targetUnitTag"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        ActionRawUnitCommand.create = function create(properties) {
            return new ActionRawUnitCommand(properties);
        };

        ActionRawUnitCommand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).int32(m.abilityId);
            if (m.targetWorldSpacePos != null && Object.hasOwnProperty.call(m, "targetWorldSpacePos"))
                $root.SC2APIProtocol.Point2D.encode(m.targetWorldSpacePos, w.uint32(18).fork()).ldelim();
            if (m.targetUnitTag != null && Object.hasOwnProperty.call(m, "targetUnitTag"))
                w.uint32(24).uint64(m.targetUnitTag);
            if (m.unitTags != null && m.unitTags.length) {
                for (var i = 0; i < m.unitTags.length; ++i)
                    w.uint32(32).uint64(m.unitTags[i]);
            }
            if (m.queueCommand != null && Object.hasOwnProperty.call(m, "queueCommand"))
                w.uint32(40).bool(m.queueCommand);
            return w;
        };

        ActionRawUnitCommand.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionRawUnitCommand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionRawUnitCommand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.int32();
                    break;
                case 2:
                    m.targetWorldSpacePos = $root.SC2APIProtocol.Point2D.decode(r, r.uint32());
                    break;
                case 3:
                    m.targetUnitTag = r.uint64();
                    break;
                case 4:
                    if (!(m.unitTags && m.unitTags.length))
                        m.unitTags = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.unitTags.push(r.uint64());
                    } else
                        m.unitTags.push(r.uint64());
                    break;
                case 5:
                    m.queueCommand = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionRawUnitCommand.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionRawUnitCommand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.targetWorldSpacePos != null && m.hasOwnProperty("targetWorldSpacePos")) {
                p.target = 1;
                {
                    var e = $root.SC2APIProtocol.Point2D.verify(m.targetWorldSpacePos);
                    if (e)
                        return "targetWorldSpacePos." + e;
                }
            }
            if (m.targetUnitTag != null && m.hasOwnProperty("targetUnitTag")) {
                if (p.target === 1)
                    return "target: multiple values";
                p.target = 1;
                if (!$util.isInteger(m.targetUnitTag) && !(m.targetUnitTag && $util.isInteger(m.targetUnitTag.low) && $util.isInteger(m.targetUnitTag.high)))
                    return "targetUnitTag: integer|Long expected";
            }
            if (m.unitTags != null && m.hasOwnProperty("unitTags")) {
                if (!Array.isArray(m.unitTags))
                    return "unitTags: array expected";
                for (var i = 0; i < m.unitTags.length; ++i) {
                    if (!$util.isInteger(m.unitTags[i]) && !(m.unitTags[i] && $util.isInteger(m.unitTags[i].low) && $util.isInteger(m.unitTags[i].high)))
                        return "unitTags: integer|Long[] expected";
                }
            }
            if (m.queueCommand != null && m.hasOwnProperty("queueCommand")) {
                if (typeof m.queueCommand !== "boolean")
                    return "queueCommand: boolean expected";
            }
            return null;
        };

        ActionRawUnitCommand.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionRawUnitCommand)
                return d;
            var m = new $root.SC2APIProtocol.ActionRawUnitCommand();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId | 0;
            }
            if (d.targetWorldSpacePos != null) {
                if (typeof d.targetWorldSpacePos !== "object")
                    throw TypeError(".SC2APIProtocol.ActionRawUnitCommand.targetWorldSpacePos: object expected");
                m.targetWorldSpacePos = $root.SC2APIProtocol.Point2D.fromObject(d.targetWorldSpacePos);
            }
            if (d.targetUnitTag != null) {
                if ($util.Long)
                    (m.targetUnitTag = $util.Long.fromValue(d.targetUnitTag)).unsigned = true;
                else if (typeof d.targetUnitTag === "string")
                    m.targetUnitTag = parseInt(d.targetUnitTag, 10);
                else if (typeof d.targetUnitTag === "number")
                    m.targetUnitTag = d.targetUnitTag;
                else if (typeof d.targetUnitTag === "object")
                    m.targetUnitTag = new $util.LongBits(d.targetUnitTag.low >>> 0, d.targetUnitTag.high >>> 0).toNumber(true);
            }
            if (d.unitTags) {
                if (!Array.isArray(d.unitTags))
                    throw TypeError(".SC2APIProtocol.ActionRawUnitCommand.unitTags: array expected");
                m.unitTags = [];
                for (var i = 0; i < d.unitTags.length; ++i) {
                    if ($util.Long)
                        (m.unitTags[i] = $util.Long.fromValue(d.unitTags[i])).unsigned = true;
                    else if (typeof d.unitTags[i] === "string")
                        m.unitTags[i] = parseInt(d.unitTags[i], 10);
                    else if (typeof d.unitTags[i] === "number")
                        m.unitTags[i] = d.unitTags[i];
                    else if (typeof d.unitTags[i] === "object")
                        m.unitTags[i] = new $util.LongBits(d.unitTags[i].low >>> 0, d.unitTags[i].high >>> 0).toNumber(true);
                }
            }
            if (d.queueCommand != null) {
                m.queueCommand = Boolean(d.queueCommand);
            }
            return m;
        };

        ActionRawUnitCommand.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.unitTags = [];
            }
            if (o.defaults) {
                d.abilityId = 0;
                d.queueCommand = false;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.targetWorldSpacePos != null && m.hasOwnProperty("targetWorldSpacePos")) {
                d.targetWorldSpacePos = $root.SC2APIProtocol.Point2D.toObject(m.targetWorldSpacePos, o);
                if (o.oneofs)
                    d.target = "targetWorldSpacePos";
            }
            if (m.targetUnitTag != null && m.hasOwnProperty("targetUnitTag")) {
                if (typeof m.targetUnitTag === "number")
                    d.targetUnitTag = o.longs === String ? String(m.targetUnitTag) : m.targetUnitTag;
                else
                    d.targetUnitTag = o.longs === String ? $util.Long.prototype.toString.call(m.targetUnitTag) : o.longs === Number ? new $util.LongBits(m.targetUnitTag.low >>> 0, m.targetUnitTag.high >>> 0).toNumber(true) : m.targetUnitTag;
                if (o.oneofs)
                    d.target = "targetUnitTag";
            }
            if (m.unitTags && m.unitTags.length) {
                d.unitTags = [];
                for (var j = 0; j < m.unitTags.length; ++j) {
                    if (typeof m.unitTags[j] === "number")
                        d.unitTags[j] = o.longs === String ? String(m.unitTags[j]) : m.unitTags[j];
                    else
                        d.unitTags[j] = o.longs === String ? $util.Long.prototype.toString.call(m.unitTags[j]) : o.longs === Number ? new $util.LongBits(m.unitTags[j].low >>> 0, m.unitTags[j].high >>> 0).toNumber(true) : m.unitTags[j];
                }
            }
            if (m.queueCommand != null && m.hasOwnProperty("queueCommand")) {
                d.queueCommand = m.queueCommand;
            }
            return d;
        };

        ActionRawUnitCommand.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionRawUnitCommand;
    })();

    SC2APIProtocol.ActionRawCameraMove = (function() {

        function ActionRawCameraMove(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionRawCameraMove.prototype.centerWorldSpace = null;

        ActionRawCameraMove.create = function create(properties) {
            return new ActionRawCameraMove(properties);
        };

        ActionRawCameraMove.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.centerWorldSpace != null && Object.hasOwnProperty.call(m, "centerWorldSpace"))
                $root.SC2APIProtocol.Point.encode(m.centerWorldSpace, w.uint32(10).fork()).ldelim();
            return w;
        };

        ActionRawCameraMove.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionRawCameraMove.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionRawCameraMove();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.centerWorldSpace = $root.SC2APIProtocol.Point.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionRawCameraMove.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionRawCameraMove.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.centerWorldSpace != null && m.hasOwnProperty("centerWorldSpace")) {
                {
                    var e = $root.SC2APIProtocol.Point.verify(m.centerWorldSpace);
                    if (e)
                        return "centerWorldSpace." + e;
                }
            }
            return null;
        };

        ActionRawCameraMove.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionRawCameraMove)
                return d;
            var m = new $root.SC2APIProtocol.ActionRawCameraMove();
            if (d.centerWorldSpace != null) {
                if (typeof d.centerWorldSpace !== "object")
                    throw TypeError(".SC2APIProtocol.ActionRawCameraMove.centerWorldSpace: object expected");
                m.centerWorldSpace = $root.SC2APIProtocol.Point.fromObject(d.centerWorldSpace);
            }
            return m;
        };

        ActionRawCameraMove.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.centerWorldSpace = null;
            }
            if (m.centerWorldSpace != null && m.hasOwnProperty("centerWorldSpace")) {
                d.centerWorldSpace = $root.SC2APIProtocol.Point.toObject(m.centerWorldSpace, o);
            }
            return d;
        };

        ActionRawCameraMove.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionRawCameraMove;
    })();

    SC2APIProtocol.ActionRawToggleAutocast = (function() {

        function ActionRawToggleAutocast(p) {
            this.unitTags = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionRawToggleAutocast.prototype.abilityId = 0;
        ActionRawToggleAutocast.prototype.unitTags = $util.emptyArray;

        ActionRawToggleAutocast.create = function create(properties) {
            return new ActionRawToggleAutocast(properties);
        };

        ActionRawToggleAutocast.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).int32(m.abilityId);
            if (m.unitTags != null && m.unitTags.length) {
                for (var i = 0; i < m.unitTags.length; ++i)
                    w.uint32(16).uint64(m.unitTags[i]);
            }
            return w;
        };

        ActionRawToggleAutocast.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionRawToggleAutocast.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionRawToggleAutocast();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.int32();
                    break;
                case 2:
                    if (!(m.unitTags && m.unitTags.length))
                        m.unitTags = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.unitTags.push(r.uint64());
                    } else
                        m.unitTags.push(r.uint64());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionRawToggleAutocast.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionRawToggleAutocast.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.unitTags != null && m.hasOwnProperty("unitTags")) {
                if (!Array.isArray(m.unitTags))
                    return "unitTags: array expected";
                for (var i = 0; i < m.unitTags.length; ++i) {
                    if (!$util.isInteger(m.unitTags[i]) && !(m.unitTags[i] && $util.isInteger(m.unitTags[i].low) && $util.isInteger(m.unitTags[i].high)))
                        return "unitTags: integer|Long[] expected";
                }
            }
            return null;
        };

        ActionRawToggleAutocast.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionRawToggleAutocast)
                return d;
            var m = new $root.SC2APIProtocol.ActionRawToggleAutocast();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId | 0;
            }
            if (d.unitTags) {
                if (!Array.isArray(d.unitTags))
                    throw TypeError(".SC2APIProtocol.ActionRawToggleAutocast.unitTags: array expected");
                m.unitTags = [];
                for (var i = 0; i < d.unitTags.length; ++i) {
                    if ($util.Long)
                        (m.unitTags[i] = $util.Long.fromValue(d.unitTags[i])).unsigned = true;
                    else if (typeof d.unitTags[i] === "string")
                        m.unitTags[i] = parseInt(d.unitTags[i], 10);
                    else if (typeof d.unitTags[i] === "number")
                        m.unitTags[i] = d.unitTags[i];
                    else if (typeof d.unitTags[i] === "object")
                        m.unitTags[i] = new $util.LongBits(d.unitTags[i].low >>> 0, d.unitTags[i].high >>> 0).toNumber(true);
                }
            }
            return m;
        };

        ActionRawToggleAutocast.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.unitTags = [];
            }
            if (o.defaults) {
                d.abilityId = 0;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.unitTags && m.unitTags.length) {
                d.unitTags = [];
                for (var j = 0; j < m.unitTags.length; ++j) {
                    if (typeof m.unitTags[j] === "number")
                        d.unitTags[j] = o.longs === String ? String(m.unitTags[j]) : m.unitTags[j];
                    else
                        d.unitTags[j] = o.longs === String ? $util.Long.prototype.toString.call(m.unitTags[j]) : o.longs === Number ? new $util.LongBits(m.unitTags[j].low >>> 0, m.unitTags[j].high >>> 0).toNumber(true) : m.unitTags[j];
                }
            }
            return d;
        };

        ActionRawToggleAutocast.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionRawToggleAutocast;
    })();

    SC2APIProtocol.RequestQuery = (function() {

        function RequestQuery(p) {
            this.pathing = [];
            this.abilities = [];
            this.placements = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestQuery.prototype.pathing = $util.emptyArray;
        RequestQuery.prototype.abilities = $util.emptyArray;
        RequestQuery.prototype.placements = $util.emptyArray;
        RequestQuery.prototype.ignoreResourceRequirements = false;

        RequestQuery.create = function create(properties) {
            return new RequestQuery(properties);
        };

        RequestQuery.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.pathing != null && m.pathing.length) {
                for (var i = 0; i < m.pathing.length; ++i)
                    $root.SC2APIProtocol.RequestQueryPathing.encode(m.pathing[i], w.uint32(10).fork()).ldelim();
            }
            if (m.abilities != null && m.abilities.length) {
                for (var i = 0; i < m.abilities.length; ++i)
                    $root.SC2APIProtocol.RequestQueryAvailableAbilities.encode(m.abilities[i], w.uint32(18).fork()).ldelim();
            }
            if (m.placements != null && m.placements.length) {
                for (var i = 0; i < m.placements.length; ++i)
                    $root.SC2APIProtocol.RequestQueryBuildingPlacement.encode(m.placements[i], w.uint32(26).fork()).ldelim();
            }
            if (m.ignoreResourceRequirements != null && Object.hasOwnProperty.call(m, "ignoreResourceRequirements"))
                w.uint32(32).bool(m.ignoreResourceRequirements);
            return w;
        };

        RequestQuery.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestQuery.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestQuery();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.pathing && m.pathing.length))
                        m.pathing = [];
                    m.pathing.push($root.SC2APIProtocol.RequestQueryPathing.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.abilities && m.abilities.length))
                        m.abilities = [];
                    m.abilities.push($root.SC2APIProtocol.RequestQueryAvailableAbilities.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.placements && m.placements.length))
                        m.placements = [];
                    m.placements.push($root.SC2APIProtocol.RequestQueryBuildingPlacement.decode(r, r.uint32()));
                    break;
                case 4:
                    m.ignoreResourceRequirements = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestQuery.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestQuery.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.pathing != null && m.hasOwnProperty("pathing")) {
                if (!Array.isArray(m.pathing))
                    return "pathing: array expected";
                for (var i = 0; i < m.pathing.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.RequestQueryPathing.verify(m.pathing[i]);
                        if (e)
                            return "pathing." + e;
                    }
                }
            }
            if (m.abilities != null && m.hasOwnProperty("abilities")) {
                if (!Array.isArray(m.abilities))
                    return "abilities: array expected";
                for (var i = 0; i < m.abilities.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.RequestQueryAvailableAbilities.verify(m.abilities[i]);
                        if (e)
                            return "abilities." + e;
                    }
                }
            }
            if (m.placements != null && m.hasOwnProperty("placements")) {
                if (!Array.isArray(m.placements))
                    return "placements: array expected";
                for (var i = 0; i < m.placements.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.RequestQueryBuildingPlacement.verify(m.placements[i]);
                        if (e)
                            return "placements." + e;
                    }
                }
            }
            if (m.ignoreResourceRequirements != null && m.hasOwnProperty("ignoreResourceRequirements")) {
                if (typeof m.ignoreResourceRequirements !== "boolean")
                    return "ignoreResourceRequirements: boolean expected";
            }
            return null;
        };

        RequestQuery.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestQuery)
                return d;
            var m = new $root.SC2APIProtocol.RequestQuery();
            if (d.pathing) {
                if (!Array.isArray(d.pathing))
                    throw TypeError(".SC2APIProtocol.RequestQuery.pathing: array expected");
                m.pathing = [];
                for (var i = 0; i < d.pathing.length; ++i) {
                    if (typeof d.pathing[i] !== "object")
                        throw TypeError(".SC2APIProtocol.RequestQuery.pathing: object expected");
                    m.pathing[i] = $root.SC2APIProtocol.RequestQueryPathing.fromObject(d.pathing[i]);
                }
            }
            if (d.abilities) {
                if (!Array.isArray(d.abilities))
                    throw TypeError(".SC2APIProtocol.RequestQuery.abilities: array expected");
                m.abilities = [];
                for (var i = 0; i < d.abilities.length; ++i) {
                    if (typeof d.abilities[i] !== "object")
                        throw TypeError(".SC2APIProtocol.RequestQuery.abilities: object expected");
                    m.abilities[i] = $root.SC2APIProtocol.RequestQueryAvailableAbilities.fromObject(d.abilities[i]);
                }
            }
            if (d.placements) {
                if (!Array.isArray(d.placements))
                    throw TypeError(".SC2APIProtocol.RequestQuery.placements: array expected");
                m.placements = [];
                for (var i = 0; i < d.placements.length; ++i) {
                    if (typeof d.placements[i] !== "object")
                        throw TypeError(".SC2APIProtocol.RequestQuery.placements: object expected");
                    m.placements[i] = $root.SC2APIProtocol.RequestQueryBuildingPlacement.fromObject(d.placements[i]);
                }
            }
            if (d.ignoreResourceRequirements != null) {
                m.ignoreResourceRequirements = Boolean(d.ignoreResourceRequirements);
            }
            return m;
        };

        RequestQuery.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.pathing = [];
                d.abilities = [];
                d.placements = [];
            }
            if (o.defaults) {
                d.ignoreResourceRequirements = false;
            }
            if (m.pathing && m.pathing.length) {
                d.pathing = [];
                for (var j = 0; j < m.pathing.length; ++j) {
                    d.pathing[j] = $root.SC2APIProtocol.RequestQueryPathing.toObject(m.pathing[j], o);
                }
            }
            if (m.abilities && m.abilities.length) {
                d.abilities = [];
                for (var j = 0; j < m.abilities.length; ++j) {
                    d.abilities[j] = $root.SC2APIProtocol.RequestQueryAvailableAbilities.toObject(m.abilities[j], o);
                }
            }
            if (m.placements && m.placements.length) {
                d.placements = [];
                for (var j = 0; j < m.placements.length; ++j) {
                    d.placements[j] = $root.SC2APIProtocol.RequestQueryBuildingPlacement.toObject(m.placements[j], o);
                }
            }
            if (m.ignoreResourceRequirements != null && m.hasOwnProperty("ignoreResourceRequirements")) {
                d.ignoreResourceRequirements = m.ignoreResourceRequirements;
            }
            return d;
        };

        RequestQuery.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestQuery;
    })();

    SC2APIProtocol.ResponseQuery = (function() {

        function ResponseQuery(p) {
            this.pathing = [];
            this.abilities = [];
            this.placements = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseQuery.prototype.pathing = $util.emptyArray;
        ResponseQuery.prototype.abilities = $util.emptyArray;
        ResponseQuery.prototype.placements = $util.emptyArray;

        ResponseQuery.create = function create(properties) {
            return new ResponseQuery(properties);
        };

        ResponseQuery.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.pathing != null && m.pathing.length) {
                for (var i = 0; i < m.pathing.length; ++i)
                    $root.SC2APIProtocol.ResponseQueryPathing.encode(m.pathing[i], w.uint32(10).fork()).ldelim();
            }
            if (m.abilities != null && m.abilities.length) {
                for (var i = 0; i < m.abilities.length; ++i)
                    $root.SC2APIProtocol.ResponseQueryAvailableAbilities.encode(m.abilities[i], w.uint32(18).fork()).ldelim();
            }
            if (m.placements != null && m.placements.length) {
                for (var i = 0; i < m.placements.length; ++i)
                    $root.SC2APIProtocol.ResponseQueryBuildingPlacement.encode(m.placements[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        ResponseQuery.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseQuery.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseQuery();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.pathing && m.pathing.length))
                        m.pathing = [];
                    m.pathing.push($root.SC2APIProtocol.ResponseQueryPathing.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.abilities && m.abilities.length))
                        m.abilities = [];
                    m.abilities.push($root.SC2APIProtocol.ResponseQueryAvailableAbilities.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.placements && m.placements.length))
                        m.placements = [];
                    m.placements.push($root.SC2APIProtocol.ResponseQueryBuildingPlacement.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseQuery.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseQuery.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.pathing != null && m.hasOwnProperty("pathing")) {
                if (!Array.isArray(m.pathing))
                    return "pathing: array expected";
                for (var i = 0; i < m.pathing.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.ResponseQueryPathing.verify(m.pathing[i]);
                        if (e)
                            return "pathing." + e;
                    }
                }
            }
            if (m.abilities != null && m.hasOwnProperty("abilities")) {
                if (!Array.isArray(m.abilities))
                    return "abilities: array expected";
                for (var i = 0; i < m.abilities.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.ResponseQueryAvailableAbilities.verify(m.abilities[i]);
                        if (e)
                            return "abilities." + e;
                    }
                }
            }
            if (m.placements != null && m.hasOwnProperty("placements")) {
                if (!Array.isArray(m.placements))
                    return "placements: array expected";
                for (var i = 0; i < m.placements.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.ResponseQueryBuildingPlacement.verify(m.placements[i]);
                        if (e)
                            return "placements." + e;
                    }
                }
            }
            return null;
        };

        ResponseQuery.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseQuery)
                return d;
            var m = new $root.SC2APIProtocol.ResponseQuery();
            if (d.pathing) {
                if (!Array.isArray(d.pathing))
                    throw TypeError(".SC2APIProtocol.ResponseQuery.pathing: array expected");
                m.pathing = [];
                for (var i = 0; i < d.pathing.length; ++i) {
                    if (typeof d.pathing[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseQuery.pathing: object expected");
                    m.pathing[i] = $root.SC2APIProtocol.ResponseQueryPathing.fromObject(d.pathing[i]);
                }
            }
            if (d.abilities) {
                if (!Array.isArray(d.abilities))
                    throw TypeError(".SC2APIProtocol.ResponseQuery.abilities: array expected");
                m.abilities = [];
                for (var i = 0; i < d.abilities.length; ++i) {
                    if (typeof d.abilities[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseQuery.abilities: object expected");
                    m.abilities[i] = $root.SC2APIProtocol.ResponseQueryAvailableAbilities.fromObject(d.abilities[i]);
                }
            }
            if (d.placements) {
                if (!Array.isArray(d.placements))
                    throw TypeError(".SC2APIProtocol.ResponseQuery.placements: array expected");
                m.placements = [];
                for (var i = 0; i < d.placements.length; ++i) {
                    if (typeof d.placements[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseQuery.placements: object expected");
                    m.placements[i] = $root.SC2APIProtocol.ResponseQueryBuildingPlacement.fromObject(d.placements[i]);
                }
            }
            return m;
        };

        ResponseQuery.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.pathing = [];
                d.abilities = [];
                d.placements = [];
            }
            if (m.pathing && m.pathing.length) {
                d.pathing = [];
                for (var j = 0; j < m.pathing.length; ++j) {
                    d.pathing[j] = $root.SC2APIProtocol.ResponseQueryPathing.toObject(m.pathing[j], o);
                }
            }
            if (m.abilities && m.abilities.length) {
                d.abilities = [];
                for (var j = 0; j < m.abilities.length; ++j) {
                    d.abilities[j] = $root.SC2APIProtocol.ResponseQueryAvailableAbilities.toObject(m.abilities[j], o);
                }
            }
            if (m.placements && m.placements.length) {
                d.placements = [];
                for (var j = 0; j < m.placements.length; ++j) {
                    d.placements[j] = $root.SC2APIProtocol.ResponseQueryBuildingPlacement.toObject(m.placements[j], o);
                }
            }
            return d;
        };

        ResponseQuery.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseQuery;
    })();

    SC2APIProtocol.RequestQueryPathing = (function() {

        function RequestQueryPathing(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestQueryPathing.prototype.startPos = null;
        RequestQueryPathing.prototype.unitTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        RequestQueryPathing.prototype.endPos = null;

        var $oneOfFields;

        Object.defineProperty(RequestQueryPathing.prototype, "start", {
            get: $util.oneOfGetter($oneOfFields = ["startPos", "unitTag"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        RequestQueryPathing.create = function create(properties) {
            return new RequestQueryPathing(properties);
        };

        RequestQueryPathing.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.startPos != null && Object.hasOwnProperty.call(m, "startPos"))
                $root.SC2APIProtocol.Point2D.encode(m.startPos, w.uint32(10).fork()).ldelim();
            if (m.unitTag != null && Object.hasOwnProperty.call(m, "unitTag"))
                w.uint32(16).uint64(m.unitTag);
            if (m.endPos != null && Object.hasOwnProperty.call(m, "endPos"))
                $root.SC2APIProtocol.Point2D.encode(m.endPos, w.uint32(26).fork()).ldelim();
            return w;
        };

        RequestQueryPathing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestQueryPathing.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestQueryPathing();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.startPos = $root.SC2APIProtocol.Point2D.decode(r, r.uint32());
                    break;
                case 2:
                    m.unitTag = r.uint64();
                    break;
                case 3:
                    m.endPos = $root.SC2APIProtocol.Point2D.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestQueryPathing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestQueryPathing.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.startPos != null && m.hasOwnProperty("startPos")) {
                p.start = 1;
                {
                    var e = $root.SC2APIProtocol.Point2D.verify(m.startPos);
                    if (e)
                        return "startPos." + e;
                }
            }
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (p.start === 1)
                    return "start: multiple values";
                p.start = 1;
                if (!$util.isInteger(m.unitTag) && !(m.unitTag && $util.isInteger(m.unitTag.low) && $util.isInteger(m.unitTag.high)))
                    return "unitTag: integer|Long expected";
            }
            if (m.endPos != null && m.hasOwnProperty("endPos")) {
                {
                    var e = $root.SC2APIProtocol.Point2D.verify(m.endPos);
                    if (e)
                        return "endPos." + e;
                }
            }
            return null;
        };

        RequestQueryPathing.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestQueryPathing)
                return d;
            var m = new $root.SC2APIProtocol.RequestQueryPathing();
            if (d.startPos != null) {
                if (typeof d.startPos !== "object")
                    throw TypeError(".SC2APIProtocol.RequestQueryPathing.startPos: object expected");
                m.startPos = $root.SC2APIProtocol.Point2D.fromObject(d.startPos);
            }
            if (d.unitTag != null) {
                if ($util.Long)
                    (m.unitTag = $util.Long.fromValue(d.unitTag)).unsigned = true;
                else if (typeof d.unitTag === "string")
                    m.unitTag = parseInt(d.unitTag, 10);
                else if (typeof d.unitTag === "number")
                    m.unitTag = d.unitTag;
                else if (typeof d.unitTag === "object")
                    m.unitTag = new $util.LongBits(d.unitTag.low >>> 0, d.unitTag.high >>> 0).toNumber(true);
            }
            if (d.endPos != null) {
                if (typeof d.endPos !== "object")
                    throw TypeError(".SC2APIProtocol.RequestQueryPathing.endPos: object expected");
                m.endPos = $root.SC2APIProtocol.Point2D.fromObject(d.endPos);
            }
            return m;
        };

        RequestQueryPathing.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.endPos = null;
            }
            if (m.startPos != null && m.hasOwnProperty("startPos")) {
                d.startPos = $root.SC2APIProtocol.Point2D.toObject(m.startPos, o);
                if (o.oneofs)
                    d.start = "startPos";
            }
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (typeof m.unitTag === "number")
                    d.unitTag = o.longs === String ? String(m.unitTag) : m.unitTag;
                else
                    d.unitTag = o.longs === String ? $util.Long.prototype.toString.call(m.unitTag) : o.longs === Number ? new $util.LongBits(m.unitTag.low >>> 0, m.unitTag.high >>> 0).toNumber(true) : m.unitTag;
                if (o.oneofs)
                    d.start = "unitTag";
            }
            if (m.endPos != null && m.hasOwnProperty("endPos")) {
                d.endPos = $root.SC2APIProtocol.Point2D.toObject(m.endPos, o);
            }
            return d;
        };

        RequestQueryPathing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestQueryPathing;
    })();

    SC2APIProtocol.ResponseQueryPathing = (function() {

        function ResponseQueryPathing(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseQueryPathing.prototype.distance = 0;

        ResponseQueryPathing.create = function create(properties) {
            return new ResponseQueryPathing(properties);
        };

        ResponseQueryPathing.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.distance != null && Object.hasOwnProperty.call(m, "distance"))
                w.uint32(13).float(m.distance);
            return w;
        };

        ResponseQueryPathing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseQueryPathing.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseQueryPathing();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.distance = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseQueryPathing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseQueryPathing.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.distance != null && m.hasOwnProperty("distance")) {
                if (typeof m.distance !== "number")
                    return "distance: number expected";
            }
            return null;
        };

        ResponseQueryPathing.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseQueryPathing)
                return d;
            var m = new $root.SC2APIProtocol.ResponseQueryPathing();
            if (d.distance != null) {
                m.distance = Number(d.distance);
            }
            return m;
        };

        ResponseQueryPathing.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.distance = 0;
            }
            if (m.distance != null && m.hasOwnProperty("distance")) {
                d.distance = o.json && !isFinite(m.distance) ? String(m.distance) : m.distance;
            }
            return d;
        };

        ResponseQueryPathing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseQueryPathing;
    })();

    SC2APIProtocol.RequestQueryAvailableAbilities = (function() {

        function RequestQueryAvailableAbilities(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestQueryAvailableAbilities.prototype.unitTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        RequestQueryAvailableAbilities.create = function create(properties) {
            return new RequestQueryAvailableAbilities(properties);
        };

        RequestQueryAvailableAbilities.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitTag != null && Object.hasOwnProperty.call(m, "unitTag"))
                w.uint32(8).uint64(m.unitTag);
            return w;
        };

        RequestQueryAvailableAbilities.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestQueryAvailableAbilities.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestQueryAvailableAbilities();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitTag = r.uint64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestQueryAvailableAbilities.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestQueryAvailableAbilities.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (!$util.isInteger(m.unitTag) && !(m.unitTag && $util.isInteger(m.unitTag.low) && $util.isInteger(m.unitTag.high)))
                    return "unitTag: integer|Long expected";
            }
            return null;
        };

        RequestQueryAvailableAbilities.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestQueryAvailableAbilities)
                return d;
            var m = new $root.SC2APIProtocol.RequestQueryAvailableAbilities();
            if (d.unitTag != null) {
                if ($util.Long)
                    (m.unitTag = $util.Long.fromValue(d.unitTag)).unsigned = true;
                else if (typeof d.unitTag === "string")
                    m.unitTag = parseInt(d.unitTag, 10);
                else if (typeof d.unitTag === "number")
                    m.unitTag = d.unitTag;
                else if (typeof d.unitTag === "object")
                    m.unitTag = new $util.LongBits(d.unitTag.low >>> 0, d.unitTag.high >>> 0).toNumber(true);
            }
            return m;
        };

        RequestQueryAvailableAbilities.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.unitTag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.unitTag = o.longs === String ? "0" : 0;
            }
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (typeof m.unitTag === "number")
                    d.unitTag = o.longs === String ? String(m.unitTag) : m.unitTag;
                else
                    d.unitTag = o.longs === String ? $util.Long.prototype.toString.call(m.unitTag) : o.longs === Number ? new $util.LongBits(m.unitTag.low >>> 0, m.unitTag.high >>> 0).toNumber(true) : m.unitTag;
            }
            return d;
        };

        RequestQueryAvailableAbilities.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestQueryAvailableAbilities;
    })();

    SC2APIProtocol.ResponseQueryAvailableAbilities = (function() {

        function ResponseQueryAvailableAbilities(p) {
            this.abilities = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseQueryAvailableAbilities.prototype.abilities = $util.emptyArray;
        ResponseQueryAvailableAbilities.prototype.unitTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        ResponseQueryAvailableAbilities.prototype.unitTypeId = 0;

        ResponseQueryAvailableAbilities.create = function create(properties) {
            return new ResponseQueryAvailableAbilities(properties);
        };

        ResponseQueryAvailableAbilities.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilities != null && m.abilities.length) {
                for (var i = 0; i < m.abilities.length; ++i)
                    $root.SC2APIProtocol.AvailableAbility.encode(m.abilities[i], w.uint32(10).fork()).ldelim();
            }
            if (m.unitTag != null && Object.hasOwnProperty.call(m, "unitTag"))
                w.uint32(16).uint64(m.unitTag);
            if (m.unitTypeId != null && Object.hasOwnProperty.call(m, "unitTypeId"))
                w.uint32(24).uint32(m.unitTypeId);
            return w;
        };

        ResponseQueryAvailableAbilities.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseQueryAvailableAbilities.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseQueryAvailableAbilities();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.abilities && m.abilities.length))
                        m.abilities = [];
                    m.abilities.push($root.SC2APIProtocol.AvailableAbility.decode(r, r.uint32()));
                    break;
                case 2:
                    m.unitTag = r.uint64();
                    break;
                case 3:
                    m.unitTypeId = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseQueryAvailableAbilities.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseQueryAvailableAbilities.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilities != null && m.hasOwnProperty("abilities")) {
                if (!Array.isArray(m.abilities))
                    return "abilities: array expected";
                for (var i = 0; i < m.abilities.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.AvailableAbility.verify(m.abilities[i]);
                        if (e)
                            return "abilities." + e;
                    }
                }
            }
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (!$util.isInteger(m.unitTag) && !(m.unitTag && $util.isInteger(m.unitTag.low) && $util.isInteger(m.unitTag.high)))
                    return "unitTag: integer|Long expected";
            }
            if (m.unitTypeId != null && m.hasOwnProperty("unitTypeId")) {
                if (!$util.isInteger(m.unitTypeId))
                    return "unitTypeId: integer expected";
            }
            return null;
        };

        ResponseQueryAvailableAbilities.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseQueryAvailableAbilities)
                return d;
            var m = new $root.SC2APIProtocol.ResponseQueryAvailableAbilities();
            if (d.abilities) {
                if (!Array.isArray(d.abilities))
                    throw TypeError(".SC2APIProtocol.ResponseQueryAvailableAbilities.abilities: array expected");
                m.abilities = [];
                for (var i = 0; i < d.abilities.length; ++i) {
                    if (typeof d.abilities[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseQueryAvailableAbilities.abilities: object expected");
                    m.abilities[i] = $root.SC2APIProtocol.AvailableAbility.fromObject(d.abilities[i]);
                }
            }
            if (d.unitTag != null) {
                if ($util.Long)
                    (m.unitTag = $util.Long.fromValue(d.unitTag)).unsigned = true;
                else if (typeof d.unitTag === "string")
                    m.unitTag = parseInt(d.unitTag, 10);
                else if (typeof d.unitTag === "number")
                    m.unitTag = d.unitTag;
                else if (typeof d.unitTag === "object")
                    m.unitTag = new $util.LongBits(d.unitTag.low >>> 0, d.unitTag.high >>> 0).toNumber(true);
            }
            if (d.unitTypeId != null) {
                m.unitTypeId = d.unitTypeId >>> 0;
            }
            return m;
        };

        ResponseQueryAvailableAbilities.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.abilities = [];
            }
            if (o.defaults) {
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.unitTag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.unitTag = o.longs === String ? "0" : 0;
                d.unitTypeId = 0;
            }
            if (m.abilities && m.abilities.length) {
                d.abilities = [];
                for (var j = 0; j < m.abilities.length; ++j) {
                    d.abilities[j] = $root.SC2APIProtocol.AvailableAbility.toObject(m.abilities[j], o);
                }
            }
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (typeof m.unitTag === "number")
                    d.unitTag = o.longs === String ? String(m.unitTag) : m.unitTag;
                else
                    d.unitTag = o.longs === String ? $util.Long.prototype.toString.call(m.unitTag) : o.longs === Number ? new $util.LongBits(m.unitTag.low >>> 0, m.unitTag.high >>> 0).toNumber(true) : m.unitTag;
            }
            if (m.unitTypeId != null && m.hasOwnProperty("unitTypeId")) {
                d.unitTypeId = m.unitTypeId;
            }
            return d;
        };

        ResponseQueryAvailableAbilities.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseQueryAvailableAbilities;
    })();

    SC2APIProtocol.RequestQueryBuildingPlacement = (function() {

        function RequestQueryBuildingPlacement(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestQueryBuildingPlacement.prototype.abilityId = 0;
        RequestQueryBuildingPlacement.prototype.targetPos = null;
        RequestQueryBuildingPlacement.prototype.placingUnitTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        RequestQueryBuildingPlacement.create = function create(properties) {
            return new RequestQueryBuildingPlacement(properties);
        };

        RequestQueryBuildingPlacement.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).int32(m.abilityId);
            if (m.targetPos != null && Object.hasOwnProperty.call(m, "targetPos"))
                $root.SC2APIProtocol.Point2D.encode(m.targetPos, w.uint32(18).fork()).ldelim();
            if (m.placingUnitTag != null && Object.hasOwnProperty.call(m, "placingUnitTag"))
                w.uint32(24).uint64(m.placingUnitTag);
            return w;
        };

        RequestQueryBuildingPlacement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestQueryBuildingPlacement.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestQueryBuildingPlacement();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.int32();
                    break;
                case 2:
                    m.targetPos = $root.SC2APIProtocol.Point2D.decode(r, r.uint32());
                    break;
                case 3:
                    m.placingUnitTag = r.uint64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestQueryBuildingPlacement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestQueryBuildingPlacement.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId))
                    return "abilityId: integer expected";
            }
            if (m.targetPos != null && m.hasOwnProperty("targetPos")) {
                {
                    var e = $root.SC2APIProtocol.Point2D.verify(m.targetPos);
                    if (e)
                        return "targetPos." + e;
                }
            }
            if (m.placingUnitTag != null && m.hasOwnProperty("placingUnitTag")) {
                if (!$util.isInteger(m.placingUnitTag) && !(m.placingUnitTag && $util.isInteger(m.placingUnitTag.low) && $util.isInteger(m.placingUnitTag.high)))
                    return "placingUnitTag: integer|Long expected";
            }
            return null;
        };

        RequestQueryBuildingPlacement.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestQueryBuildingPlacement)
                return d;
            var m = new $root.SC2APIProtocol.RequestQueryBuildingPlacement();
            if (d.abilityId != null) {
                m.abilityId = d.abilityId | 0;
            }
            if (d.targetPos != null) {
                if (typeof d.targetPos !== "object")
                    throw TypeError(".SC2APIProtocol.RequestQueryBuildingPlacement.targetPos: object expected");
                m.targetPos = $root.SC2APIProtocol.Point2D.fromObject(d.targetPos);
            }
            if (d.placingUnitTag != null) {
                if ($util.Long)
                    (m.placingUnitTag = $util.Long.fromValue(d.placingUnitTag)).unsigned = true;
                else if (typeof d.placingUnitTag === "string")
                    m.placingUnitTag = parseInt(d.placingUnitTag, 10);
                else if (typeof d.placingUnitTag === "number")
                    m.placingUnitTag = d.placingUnitTag;
                else if (typeof d.placingUnitTag === "object")
                    m.placingUnitTag = new $util.LongBits(d.placingUnitTag.low >>> 0, d.placingUnitTag.high >>> 0).toNumber(true);
            }
            return m;
        };

        RequestQueryBuildingPlacement.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.abilityId = 0;
                d.targetPos = null;
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.placingUnitTag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.placingUnitTag = o.longs === String ? "0" : 0;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.targetPos != null && m.hasOwnProperty("targetPos")) {
                d.targetPos = $root.SC2APIProtocol.Point2D.toObject(m.targetPos, o);
            }
            if (m.placingUnitTag != null && m.hasOwnProperty("placingUnitTag")) {
                if (typeof m.placingUnitTag === "number")
                    d.placingUnitTag = o.longs === String ? String(m.placingUnitTag) : m.placingUnitTag;
                else
                    d.placingUnitTag = o.longs === String ? $util.Long.prototype.toString.call(m.placingUnitTag) : o.longs === Number ? new $util.LongBits(m.placingUnitTag.low >>> 0, m.placingUnitTag.high >>> 0).toNumber(true) : m.placingUnitTag;
            }
            return d;
        };

        RequestQueryBuildingPlacement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestQueryBuildingPlacement;
    })();

    SC2APIProtocol.ResponseQueryBuildingPlacement = (function() {

        function ResponseQueryBuildingPlacement(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseQueryBuildingPlacement.prototype.result = 1;

        ResponseQueryBuildingPlacement.create = function create(properties) {
            return new ResponseQueryBuildingPlacement(properties);
        };

        ResponseQueryBuildingPlacement.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(8).int32(m.result);
            return w;
        };

        ResponseQueryBuildingPlacement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseQueryBuildingPlacement.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseQueryBuildingPlacement();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseQueryBuildingPlacement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseQueryBuildingPlacement.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.result != null && m.hasOwnProperty("result")) {
                switch (m.result) {
                default:
                    return "result: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                    break;
                }
            }
            return null;
        };

        ResponseQueryBuildingPlacement.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseQueryBuildingPlacement)
                return d;
            var m = new $root.SC2APIProtocol.ResponseQueryBuildingPlacement();
            switch (d.result) {
            case "Success":
            case 1:
                m.result = 1;
                break;
            case "NotSupported":
            case 2:
                m.result = 2;
                break;
            case "Error":
            case 3:
                m.result = 3;
                break;
            case "CantQueueThatOrder":
            case 4:
                m.result = 4;
                break;
            case "Retry":
            case 5:
                m.result = 5;
                break;
            case "Cooldown":
            case 6:
                m.result = 6;
                break;
            case "QueueIsFull":
            case 7:
                m.result = 7;
                break;
            case "RallyQueueIsFull":
            case 8:
                m.result = 8;
                break;
            case "NotEnoughMinerals":
            case 9:
                m.result = 9;
                break;
            case "NotEnoughVespene":
            case 10:
                m.result = 10;
                break;
            case "NotEnoughTerrazine":
            case 11:
                m.result = 11;
                break;
            case "NotEnoughCustom":
            case 12:
                m.result = 12;
                break;
            case "NotEnoughFood":
            case 13:
                m.result = 13;
                break;
            case "FoodUsageImpossible":
            case 14:
                m.result = 14;
                break;
            case "NotEnoughLife":
            case 15:
                m.result = 15;
                break;
            case "NotEnoughShields":
            case 16:
                m.result = 16;
                break;
            case "NotEnoughEnergy":
            case 17:
                m.result = 17;
                break;
            case "LifeSuppressed":
            case 18:
                m.result = 18;
                break;
            case "ShieldsSuppressed":
            case 19:
                m.result = 19;
                break;
            case "EnergySuppressed":
            case 20:
                m.result = 20;
                break;
            case "NotEnoughCharges":
            case 21:
                m.result = 21;
                break;
            case "CantAddMoreCharges":
            case 22:
                m.result = 22;
                break;
            case "TooMuchMinerals":
            case 23:
                m.result = 23;
                break;
            case "TooMuchVespene":
            case 24:
                m.result = 24;
                break;
            case "TooMuchTerrazine":
            case 25:
                m.result = 25;
                break;
            case "TooMuchCustom":
            case 26:
                m.result = 26;
                break;
            case "TooMuchFood":
            case 27:
                m.result = 27;
                break;
            case "TooMuchLife":
            case 28:
                m.result = 28;
                break;
            case "TooMuchShields":
            case 29:
                m.result = 29;
                break;
            case "TooMuchEnergy":
            case 30:
                m.result = 30;
                break;
            case "MustTargetUnitWithLife":
            case 31:
                m.result = 31;
                break;
            case "MustTargetUnitWithShields":
            case 32:
                m.result = 32;
                break;
            case "MustTargetUnitWithEnergy":
            case 33:
                m.result = 33;
                break;
            case "CantTrade":
            case 34:
                m.result = 34;
                break;
            case "CantSpend":
            case 35:
                m.result = 35;
                break;
            case "CantTargetThatUnit":
            case 36:
                m.result = 36;
                break;
            case "CouldntAllocateUnit":
            case 37:
                m.result = 37;
                break;
            case "UnitCantMove":
            case 38:
                m.result = 38;
                break;
            case "TransportIsHoldingPosition":
            case 39:
                m.result = 39;
                break;
            case "BuildTechRequirementsNotMet":
            case 40:
                m.result = 40;
                break;
            case "CantFindPlacementLocation":
            case 41:
                m.result = 41;
                break;
            case "CantBuildOnThat":
            case 42:
                m.result = 42;
                break;
            case "CantBuildTooCloseToDropOff":
            case 43:
                m.result = 43;
                break;
            case "CantBuildLocationInvalid":
            case 44:
                m.result = 44;
                break;
            case "CantSeeBuildLocation":
            case 45:
                m.result = 45;
                break;
            case "CantBuildTooCloseToCreepSource":
            case 46:
                m.result = 46;
                break;
            case "CantBuildTooCloseToResources":
            case 47:
                m.result = 47;
                break;
            case "CantBuildTooFarFromWater":
            case 48:
                m.result = 48;
                break;
            case "CantBuildTooFarFromCreepSource":
            case 49:
                m.result = 49;
                break;
            case "CantBuildTooFarFromBuildPowerSource":
            case 50:
                m.result = 50;
                break;
            case "CantBuildOnDenseTerrain":
            case 51:
                m.result = 51;
                break;
            case "CantTrainTooFarFromTrainPowerSource":
            case 52:
                m.result = 52;
                break;
            case "CantLandLocationInvalid":
            case 53:
                m.result = 53;
                break;
            case "CantSeeLandLocation":
            case 54:
                m.result = 54;
                break;
            case "CantLandTooCloseToCreepSource":
            case 55:
                m.result = 55;
                break;
            case "CantLandTooCloseToResources":
            case 56:
                m.result = 56;
                break;
            case "CantLandTooFarFromWater":
            case 57:
                m.result = 57;
                break;
            case "CantLandTooFarFromCreepSource":
            case 58:
                m.result = 58;
                break;
            case "CantLandTooFarFromBuildPowerSource":
            case 59:
                m.result = 59;
                break;
            case "CantLandTooFarFromTrainPowerSource":
            case 60:
                m.result = 60;
                break;
            case "CantLandOnDenseTerrain":
            case 61:
                m.result = 61;
                break;
            case "AddOnTooFarFromBuilding":
            case 62:
                m.result = 62;
                break;
            case "MustBuildRefineryFirst":
            case 63:
                m.result = 63;
                break;
            case "BuildingIsUnderConstruction":
            case 64:
                m.result = 64;
                break;
            case "CantFindDropOff":
            case 65:
                m.result = 65;
                break;
            case "CantLoadOtherPlayersUnits":
            case 66:
                m.result = 66;
                break;
            case "NotEnoughRoomToLoadUnit":
            case 67:
                m.result = 67;
                break;
            case "CantUnloadUnitsThere":
            case 68:
                m.result = 68;
                break;
            case "CantWarpInUnitsThere":
            case 69:
                m.result = 69;
                break;
            case "CantLoadImmobileUnits":
            case 70:
                m.result = 70;
                break;
            case "CantRechargeImmobileUnits":
            case 71:
                m.result = 71;
                break;
            case "CantRechargeUnderConstructionUnits":
            case 72:
                m.result = 72;
                break;
            case "CantLoadThatUnit":
            case 73:
                m.result = 73;
                break;
            case "NoCargoToUnload":
            case 74:
                m.result = 74;
                break;
            case "LoadAllNoTargetsFound":
            case 75:
                m.result = 75;
                break;
            case "NotWhileOccupied":
            case 76:
                m.result = 76;
                break;
            case "CantAttackWithoutAmmo":
            case 77:
                m.result = 77;
                break;
            case "CantHoldAnyMoreAmmo":
            case 78:
                m.result = 78;
                break;
            case "TechRequirementsNotMet":
            case 79:
                m.result = 79;
                break;
            case "MustLockdownUnitFirst":
            case 80:
                m.result = 80;
                break;
            case "MustTargetUnit":
            case 81:
                m.result = 81;
                break;
            case "MustTargetInventory":
            case 82:
                m.result = 82;
                break;
            case "MustTargetVisibleUnit":
            case 83:
                m.result = 83;
                break;
            case "MustTargetVisibleLocation":
            case 84:
                m.result = 84;
                break;
            case "MustTargetWalkableLocation":
            case 85:
                m.result = 85;
                break;
            case "MustTargetPawnableUnit":
            case 86:
                m.result = 86;
                break;
            case "YouCantControlThatUnit":
            case 87:
                m.result = 87;
                break;
            case "YouCantIssueCommandsToThatUnit":
            case 88:
                m.result = 88;
                break;
            case "MustTargetResources":
            case 89:
                m.result = 89;
                break;
            case "RequiresHealTarget":
            case 90:
                m.result = 90;
                break;
            case "RequiresRepairTarget":
            case 91:
                m.result = 91;
                break;
            case "NoItemsToDrop":
            case 92:
                m.result = 92;
                break;
            case "CantHoldAnyMoreItems":
            case 93:
                m.result = 93;
                break;
            case "CantHoldThat":
            case 94:
                m.result = 94;
                break;
            case "TargetHasNoInventory":
            case 95:
                m.result = 95;
                break;
            case "CantDropThisItem":
            case 96:
                m.result = 96;
                break;
            case "CantMoveThisItem":
            case 97:
                m.result = 97;
                break;
            case "CantPawnThisUnit":
            case 98:
                m.result = 98;
                break;
            case "MustTargetCaster":
            case 99:
                m.result = 99;
                break;
            case "CantTargetCaster":
            case 100:
                m.result = 100;
                break;
            case "MustTargetOuter":
            case 101:
                m.result = 101;
                break;
            case "CantTargetOuter":
            case 102:
                m.result = 102;
                break;
            case "MustTargetYourOwnUnits":
            case 103:
                m.result = 103;
                break;
            case "CantTargetYourOwnUnits":
            case 104:
                m.result = 104;
                break;
            case "MustTargetFriendlyUnits":
            case 105:
                m.result = 105;
                break;
            case "CantTargetFriendlyUnits":
            case 106:
                m.result = 106;
                break;
            case "MustTargetNeutralUnits":
            case 107:
                m.result = 107;
                break;
            case "CantTargetNeutralUnits":
            case 108:
                m.result = 108;
                break;
            case "MustTargetEnemyUnits":
            case 109:
                m.result = 109;
                break;
            case "CantTargetEnemyUnits":
            case 110:
                m.result = 110;
                break;
            case "MustTargetAirUnits":
            case 111:
                m.result = 111;
                break;
            case "CantTargetAirUnits":
            case 112:
                m.result = 112;
                break;
            case "MustTargetGroundUnits":
            case 113:
                m.result = 113;
                break;
            case "CantTargetGroundUnits":
            case 114:
                m.result = 114;
                break;
            case "MustTargetStructures":
            case 115:
                m.result = 115;
                break;
            case "CantTargetStructures":
            case 116:
                m.result = 116;
                break;
            case "MustTargetLightUnits":
            case 117:
                m.result = 117;
                break;
            case "CantTargetLightUnits":
            case 118:
                m.result = 118;
                break;
            case "MustTargetArmoredUnits":
            case 119:
                m.result = 119;
                break;
            case "CantTargetArmoredUnits":
            case 120:
                m.result = 120;
                break;
            case "MustTargetBiologicalUnits":
            case 121:
                m.result = 121;
                break;
            case "CantTargetBiologicalUnits":
            case 122:
                m.result = 122;
                break;
            case "MustTargetHeroicUnits":
            case 123:
                m.result = 123;
                break;
            case "CantTargetHeroicUnits":
            case 124:
                m.result = 124;
                break;
            case "MustTargetRoboticUnits":
            case 125:
                m.result = 125;
                break;
            case "CantTargetRoboticUnits":
            case 126:
                m.result = 126;
                break;
            case "MustTargetMechanicalUnits":
            case 127:
                m.result = 127;
                break;
            case "CantTargetMechanicalUnits":
            case 128:
                m.result = 128;
                break;
            case "MustTargetPsionicUnits":
            case 129:
                m.result = 129;
                break;
            case "CantTargetPsionicUnits":
            case 130:
                m.result = 130;
                break;
            case "MustTargetMassiveUnits":
            case 131:
                m.result = 131;
                break;
            case "CantTargetMassiveUnits":
            case 132:
                m.result = 132;
                break;
            case "MustTargetMissile":
            case 133:
                m.result = 133;
                break;
            case "CantTargetMissile":
            case 134:
                m.result = 134;
                break;
            case "MustTargetWorkerUnits":
            case 135:
                m.result = 135;
                break;
            case "CantTargetWorkerUnits":
            case 136:
                m.result = 136;
                break;
            case "MustTargetEnergyCapableUnits":
            case 137:
                m.result = 137;
                break;
            case "CantTargetEnergyCapableUnits":
            case 138:
                m.result = 138;
                break;
            case "MustTargetShieldCapableUnits":
            case 139:
                m.result = 139;
                break;
            case "CantTargetShieldCapableUnits":
            case 140:
                m.result = 140;
                break;
            case "MustTargetFlyers":
            case 141:
                m.result = 141;
                break;
            case "CantTargetFlyers":
            case 142:
                m.result = 142;
                break;
            case "MustTargetBuriedUnits":
            case 143:
                m.result = 143;
                break;
            case "CantTargetBuriedUnits":
            case 144:
                m.result = 144;
                break;
            case "MustTargetCloakedUnits":
            case 145:
                m.result = 145;
                break;
            case "CantTargetCloakedUnits":
            case 146:
                m.result = 146;
                break;
            case "MustTargetUnitsInAStasisField":
            case 147:
                m.result = 147;
                break;
            case "CantTargetUnitsInAStasisField":
            case 148:
                m.result = 148;
                break;
            case "MustTargetUnderConstructionUnits":
            case 149:
                m.result = 149;
                break;
            case "CantTargetUnderConstructionUnits":
            case 150:
                m.result = 150;
                break;
            case "MustTargetDeadUnits":
            case 151:
                m.result = 151;
                break;
            case "CantTargetDeadUnits":
            case 152:
                m.result = 152;
                break;
            case "MustTargetRevivableUnits":
            case 153:
                m.result = 153;
                break;
            case "CantTargetRevivableUnits":
            case 154:
                m.result = 154;
                break;
            case "MustTargetHiddenUnits":
            case 155:
                m.result = 155;
                break;
            case "CantTargetHiddenUnits":
            case 156:
                m.result = 156;
                break;
            case "CantRechargeOtherPlayersUnits":
            case 157:
                m.result = 157;
                break;
            case "MustTargetHallucinations":
            case 158:
                m.result = 158;
                break;
            case "CantTargetHallucinations":
            case 159:
                m.result = 159;
                break;
            case "MustTargetInvulnerableUnits":
            case 160:
                m.result = 160;
                break;
            case "CantTargetInvulnerableUnits":
            case 161:
                m.result = 161;
                break;
            case "MustTargetDetectedUnits":
            case 162:
                m.result = 162;
                break;
            case "CantTargetDetectedUnits":
            case 163:
                m.result = 163;
                break;
            case "CantTargetUnitWithEnergy":
            case 164:
                m.result = 164;
                break;
            case "CantTargetUnitWithShields":
            case 165:
                m.result = 165;
                break;
            case "MustTargetUncommandableUnits":
            case 166:
                m.result = 166;
                break;
            case "CantTargetUncommandableUnits":
            case 167:
                m.result = 167;
                break;
            case "MustTargetPreventDefeatUnits":
            case 168:
                m.result = 168;
                break;
            case "CantTargetPreventDefeatUnits":
            case 169:
                m.result = 169;
                break;
            case "MustTargetPreventRevealUnits":
            case 170:
                m.result = 170;
                break;
            case "CantTargetPreventRevealUnits":
            case 171:
                m.result = 171;
                break;
            case "MustTargetPassiveUnits":
            case 172:
                m.result = 172;
                break;
            case "CantTargetPassiveUnits":
            case 173:
                m.result = 173;
                break;
            case "MustTargetStunnedUnits":
            case 174:
                m.result = 174;
                break;
            case "CantTargetStunnedUnits":
            case 175:
                m.result = 175;
                break;
            case "MustTargetSummonedUnits":
            case 176:
                m.result = 176;
                break;
            case "CantTargetSummonedUnits":
            case 177:
                m.result = 177;
                break;
            case "MustTargetUser1":
            case 178:
                m.result = 178;
                break;
            case "CantTargetUser1":
            case 179:
                m.result = 179;
                break;
            case "MustTargetUnstoppableUnits":
            case 180:
                m.result = 180;
                break;
            case "CantTargetUnstoppableUnits":
            case 181:
                m.result = 181;
                break;
            case "MustTargetResistantUnits":
            case 182:
                m.result = 182;
                break;
            case "CantTargetResistantUnits":
            case 183:
                m.result = 183;
                break;
            case "MustTargetDazedUnits":
            case 184:
                m.result = 184;
                break;
            case "CantTargetDazedUnits":
            case 185:
                m.result = 185;
                break;
            case "CantLockdown":
            case 186:
                m.result = 186;
                break;
            case "CantMindControl":
            case 187:
                m.result = 187;
                break;
            case "MustTargetDestructibles":
            case 188:
                m.result = 188;
                break;
            case "CantTargetDestructibles":
            case 189:
                m.result = 189;
                break;
            case "MustTargetItems":
            case 190:
                m.result = 190;
                break;
            case "CantTargetItems":
            case 191:
                m.result = 191;
                break;
            case "NoCalldownAvailable":
            case 192:
                m.result = 192;
                break;
            case "WaypointListFull":
            case 193:
                m.result = 193;
                break;
            case "MustTargetRace":
            case 194:
                m.result = 194;
                break;
            case "CantTargetRace":
            case 195:
                m.result = 195;
                break;
            case "MustTargetSimilarUnits":
            case 196:
                m.result = 196;
                break;
            case "CantTargetSimilarUnits":
            case 197:
                m.result = 197;
                break;
            case "CantFindEnoughTargets":
            case 198:
                m.result = 198;
                break;
            case "AlreadySpawningLarva":
            case 199:
                m.result = 199;
                break;
            case "CantTargetExhaustedResources":
            case 200:
                m.result = 200;
                break;
            case "CantUseMinimap":
            case 201:
                m.result = 201;
                break;
            case "CantUseInfoPanel":
            case 202:
                m.result = 202;
                break;
            case "OrderQueueIsFull":
            case 203:
                m.result = 203;
                break;
            case "CantHarvestThatResource":
            case 204:
                m.result = 204;
                break;
            case "HarvestersNotRequired":
            case 205:
                m.result = 205;
                break;
            case "AlreadyTargeted":
            case 206:
                m.result = 206;
                break;
            case "CantAttackWeaponsDisabled":
            case 207:
                m.result = 207;
                break;
            case "CouldntReachTarget":
            case 208:
                m.result = 208;
                break;
            case "TargetIsOutOfRange":
            case 209:
                m.result = 209;
                break;
            case "TargetIsTooClose":
            case 210:
                m.result = 210;
                break;
            case "TargetIsOutOfArc":
            case 211:
                m.result = 211;
                break;
            case "CantFindTeleportLocation":
            case 212:
                m.result = 212;
                break;
            case "InvalidItemClass":
            case 213:
                m.result = 213;
                break;
            case "CantFindCancelOrder":
            case 214:
                m.result = 214;
                break;
            }
            return m;
        };

        ResponseQueryBuildingPlacement.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.result = o.enums === String ? "Success" : 1;
            }
            if (m.result != null && m.hasOwnProperty("result")) {
                d.result = o.enums === String ? $root.SC2APIProtocol.ActionResult[m.result] : m.result;
            }
            return d;
        };

        ResponseQueryBuildingPlacement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseQueryBuildingPlacement;
    })();

    SC2APIProtocol.Request = (function() {

        function Request(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Request.prototype.createGame = null;
        Request.prototype.joinGame = null;
        Request.prototype.restartGame = null;
        Request.prototype.startReplay = null;
        Request.prototype.leaveGame = null;
        Request.prototype.quickSave = null;
        Request.prototype.quickLoad = null;
        Request.prototype.quit = null;
        Request.prototype.gameInfo = null;
        Request.prototype.observation = null;
        Request.prototype.action = null;
        Request.prototype.obsAction = null;
        Request.prototype.step = null;
        Request.prototype.data = null;
        Request.prototype.query = null;
        Request.prototype.saveReplay = null;
        Request.prototype.mapCommand = null;
        Request.prototype.replayInfo = null;
        Request.prototype.availableMaps = null;
        Request.prototype.saveMap = null;
        Request.prototype.ping = null;
        Request.prototype.debug = null;
        Request.prototype.id = 0;

        var $oneOfFields;

        Object.defineProperty(Request.prototype, "request", {
            get: $util.oneOfGetter($oneOfFields = ["createGame", "joinGame", "restartGame", "startReplay", "leaveGame", "quickSave", "quickLoad", "quit", "gameInfo", "observation", "action", "obsAction", "step", "data", "query", "saveReplay", "mapCommand", "replayInfo", "availableMaps", "saveMap", "ping", "debug"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        Request.create = function create(properties) {
            return new Request(properties);
        };

        Request.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.createGame != null && Object.hasOwnProperty.call(m, "createGame"))
                $root.SC2APIProtocol.RequestCreateGame.encode(m.createGame, w.uint32(10).fork()).ldelim();
            if (m.joinGame != null && Object.hasOwnProperty.call(m, "joinGame"))
                $root.SC2APIProtocol.RequestJoinGame.encode(m.joinGame, w.uint32(18).fork()).ldelim();
            if (m.restartGame != null && Object.hasOwnProperty.call(m, "restartGame"))
                $root.SC2APIProtocol.RequestRestartGame.encode(m.restartGame, w.uint32(26).fork()).ldelim();
            if (m.startReplay != null && Object.hasOwnProperty.call(m, "startReplay"))
                $root.SC2APIProtocol.RequestStartReplay.encode(m.startReplay, w.uint32(34).fork()).ldelim();
            if (m.leaveGame != null && Object.hasOwnProperty.call(m, "leaveGame"))
                $root.SC2APIProtocol.RequestLeaveGame.encode(m.leaveGame, w.uint32(42).fork()).ldelim();
            if (m.quickSave != null && Object.hasOwnProperty.call(m, "quickSave"))
                $root.SC2APIProtocol.RequestQuickSave.encode(m.quickSave, w.uint32(50).fork()).ldelim();
            if (m.quickLoad != null && Object.hasOwnProperty.call(m, "quickLoad"))
                $root.SC2APIProtocol.RequestQuickLoad.encode(m.quickLoad, w.uint32(58).fork()).ldelim();
            if (m.quit != null && Object.hasOwnProperty.call(m, "quit"))
                $root.SC2APIProtocol.RequestQuit.encode(m.quit, w.uint32(66).fork()).ldelim();
            if (m.gameInfo != null && Object.hasOwnProperty.call(m, "gameInfo"))
                $root.SC2APIProtocol.RequestGameInfo.encode(m.gameInfo, w.uint32(74).fork()).ldelim();
            if (m.observation != null && Object.hasOwnProperty.call(m, "observation"))
                $root.SC2APIProtocol.RequestObservation.encode(m.observation, w.uint32(82).fork()).ldelim();
            if (m.action != null && Object.hasOwnProperty.call(m, "action"))
                $root.SC2APIProtocol.RequestAction.encode(m.action, w.uint32(90).fork()).ldelim();
            if (m.step != null && Object.hasOwnProperty.call(m, "step"))
                $root.SC2APIProtocol.RequestStep.encode(m.step, w.uint32(98).fork()).ldelim();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                $root.SC2APIProtocol.RequestData.encode(m.data, w.uint32(106).fork()).ldelim();
            if (m.query != null && Object.hasOwnProperty.call(m, "query"))
                $root.SC2APIProtocol.RequestQuery.encode(m.query, w.uint32(114).fork()).ldelim();
            if (m.saveReplay != null && Object.hasOwnProperty.call(m, "saveReplay"))
                $root.SC2APIProtocol.RequestSaveReplay.encode(m.saveReplay, w.uint32(122).fork()).ldelim();
            if (m.replayInfo != null && Object.hasOwnProperty.call(m, "replayInfo"))
                $root.SC2APIProtocol.RequestReplayInfo.encode(m.replayInfo, w.uint32(130).fork()).ldelim();
            if (m.availableMaps != null && Object.hasOwnProperty.call(m, "availableMaps"))
                $root.SC2APIProtocol.RequestAvailableMaps.encode(m.availableMaps, w.uint32(138).fork()).ldelim();
            if (m.saveMap != null && Object.hasOwnProperty.call(m, "saveMap"))
                $root.SC2APIProtocol.RequestSaveMap.encode(m.saveMap, w.uint32(146).fork()).ldelim();
            if (m.ping != null && Object.hasOwnProperty.call(m, "ping"))
                $root.SC2APIProtocol.RequestPing.encode(m.ping, w.uint32(154).fork()).ldelim();
            if (m.debug != null && Object.hasOwnProperty.call(m, "debug"))
                $root.SC2APIProtocol.RequestDebug.encode(m.debug, w.uint32(162).fork()).ldelim();
            if (m.obsAction != null && Object.hasOwnProperty.call(m, "obsAction"))
                $root.SC2APIProtocol.RequestObserverAction.encode(m.obsAction, w.uint32(170).fork()).ldelim();
            if (m.mapCommand != null && Object.hasOwnProperty.call(m, "mapCommand"))
                $root.SC2APIProtocol.RequestMapCommand.encode(m.mapCommand, w.uint32(178).fork()).ldelim();
            if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                w.uint32(776).uint32(m.id);
            return w;
        };

        Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Request.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Request();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.createGame = $root.SC2APIProtocol.RequestCreateGame.decode(r, r.uint32());
                    break;
                case 2:
                    m.joinGame = $root.SC2APIProtocol.RequestJoinGame.decode(r, r.uint32());
                    break;
                case 3:
                    m.restartGame = $root.SC2APIProtocol.RequestRestartGame.decode(r, r.uint32());
                    break;
                case 4:
                    m.startReplay = $root.SC2APIProtocol.RequestStartReplay.decode(r, r.uint32());
                    break;
                case 5:
                    m.leaveGame = $root.SC2APIProtocol.RequestLeaveGame.decode(r, r.uint32());
                    break;
                case 6:
                    m.quickSave = $root.SC2APIProtocol.RequestQuickSave.decode(r, r.uint32());
                    break;
                case 7:
                    m.quickLoad = $root.SC2APIProtocol.RequestQuickLoad.decode(r, r.uint32());
                    break;
                case 8:
                    m.quit = $root.SC2APIProtocol.RequestQuit.decode(r, r.uint32());
                    break;
                case 9:
                    m.gameInfo = $root.SC2APIProtocol.RequestGameInfo.decode(r, r.uint32());
                    break;
                case 10:
                    m.observation = $root.SC2APIProtocol.RequestObservation.decode(r, r.uint32());
                    break;
                case 11:
                    m.action = $root.SC2APIProtocol.RequestAction.decode(r, r.uint32());
                    break;
                case 21:
                    m.obsAction = $root.SC2APIProtocol.RequestObserverAction.decode(r, r.uint32());
                    break;
                case 12:
                    m.step = $root.SC2APIProtocol.RequestStep.decode(r, r.uint32());
                    break;
                case 13:
                    m.data = $root.SC2APIProtocol.RequestData.decode(r, r.uint32());
                    break;
                case 14:
                    m.query = $root.SC2APIProtocol.RequestQuery.decode(r, r.uint32());
                    break;
                case 15:
                    m.saveReplay = $root.SC2APIProtocol.RequestSaveReplay.decode(r, r.uint32());
                    break;
                case 22:
                    m.mapCommand = $root.SC2APIProtocol.RequestMapCommand.decode(r, r.uint32());
                    break;
                case 16:
                    m.replayInfo = $root.SC2APIProtocol.RequestReplayInfo.decode(r, r.uint32());
                    break;
                case 17:
                    m.availableMaps = $root.SC2APIProtocol.RequestAvailableMaps.decode(r, r.uint32());
                    break;
                case 18:
                    m.saveMap = $root.SC2APIProtocol.RequestSaveMap.decode(r, r.uint32());
                    break;
                case 19:
                    m.ping = $root.SC2APIProtocol.RequestPing.decode(r, r.uint32());
                    break;
                case 20:
                    m.debug = $root.SC2APIProtocol.RequestDebug.decode(r, r.uint32());
                    break;
                case 97:
                    m.id = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Request.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.createGame != null && m.hasOwnProperty("createGame")) {
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestCreateGame.verify(m.createGame);
                    if (e)
                        return "createGame." + e;
                }
            }
            if (m.joinGame != null && m.hasOwnProperty("joinGame")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestJoinGame.verify(m.joinGame);
                    if (e)
                        return "joinGame." + e;
                }
            }
            if (m.restartGame != null && m.hasOwnProperty("restartGame")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestRestartGame.verify(m.restartGame);
                    if (e)
                        return "restartGame." + e;
                }
            }
            if (m.startReplay != null && m.hasOwnProperty("startReplay")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestStartReplay.verify(m.startReplay);
                    if (e)
                        return "startReplay." + e;
                }
            }
            if (m.leaveGame != null && m.hasOwnProperty("leaveGame")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestLeaveGame.verify(m.leaveGame);
                    if (e)
                        return "leaveGame." + e;
                }
            }
            if (m.quickSave != null && m.hasOwnProperty("quickSave")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestQuickSave.verify(m.quickSave);
                    if (e)
                        return "quickSave." + e;
                }
            }
            if (m.quickLoad != null && m.hasOwnProperty("quickLoad")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestQuickLoad.verify(m.quickLoad);
                    if (e)
                        return "quickLoad." + e;
                }
            }
            if (m.quit != null && m.hasOwnProperty("quit")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestQuit.verify(m.quit);
                    if (e)
                        return "quit." + e;
                }
            }
            if (m.gameInfo != null && m.hasOwnProperty("gameInfo")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestGameInfo.verify(m.gameInfo);
                    if (e)
                        return "gameInfo." + e;
                }
            }
            if (m.observation != null && m.hasOwnProperty("observation")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestObservation.verify(m.observation);
                    if (e)
                        return "observation." + e;
                }
            }
            if (m.action != null && m.hasOwnProperty("action")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestAction.verify(m.action);
                    if (e)
                        return "action." + e;
                }
            }
            if (m.obsAction != null && m.hasOwnProperty("obsAction")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestObserverAction.verify(m.obsAction);
                    if (e)
                        return "obsAction." + e;
                }
            }
            if (m.step != null && m.hasOwnProperty("step")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestStep.verify(m.step);
                    if (e)
                        return "step." + e;
                }
            }
            if (m.data != null && m.hasOwnProperty("data")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestData.verify(m.data);
                    if (e)
                        return "data." + e;
                }
            }
            if (m.query != null && m.hasOwnProperty("query")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestQuery.verify(m.query);
                    if (e)
                        return "query." + e;
                }
            }
            if (m.saveReplay != null && m.hasOwnProperty("saveReplay")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestSaveReplay.verify(m.saveReplay);
                    if (e)
                        return "saveReplay." + e;
                }
            }
            if (m.mapCommand != null && m.hasOwnProperty("mapCommand")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestMapCommand.verify(m.mapCommand);
                    if (e)
                        return "mapCommand." + e;
                }
            }
            if (m.replayInfo != null && m.hasOwnProperty("replayInfo")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestReplayInfo.verify(m.replayInfo);
                    if (e)
                        return "replayInfo." + e;
                }
            }
            if (m.availableMaps != null && m.hasOwnProperty("availableMaps")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestAvailableMaps.verify(m.availableMaps);
                    if (e)
                        return "availableMaps." + e;
                }
            }
            if (m.saveMap != null && m.hasOwnProperty("saveMap")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestSaveMap.verify(m.saveMap);
                    if (e)
                        return "saveMap." + e;
                }
            }
            if (m.ping != null && m.hasOwnProperty("ping")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestPing.verify(m.ping);
                    if (e)
                        return "ping." + e;
                }
            }
            if (m.debug != null && m.hasOwnProperty("debug")) {
                if (p.request === 1)
                    return "request: multiple values";
                p.request = 1;
                {
                    var e = $root.SC2APIProtocol.RequestDebug.verify(m.debug);
                    if (e)
                        return "debug." + e;
                }
            }
            if (m.id != null && m.hasOwnProperty("id")) {
                if (!$util.isInteger(m.id))
                    return "id: integer expected";
            }
            return null;
        };

        Request.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Request)
                return d;
            var m = new $root.SC2APIProtocol.Request();
            if (d.createGame != null) {
                if (typeof d.createGame !== "object")
                    throw TypeError(".SC2APIProtocol.Request.createGame: object expected");
                m.createGame = $root.SC2APIProtocol.RequestCreateGame.fromObject(d.createGame);
            }
            if (d.joinGame != null) {
                if (typeof d.joinGame !== "object")
                    throw TypeError(".SC2APIProtocol.Request.joinGame: object expected");
                m.joinGame = $root.SC2APIProtocol.RequestJoinGame.fromObject(d.joinGame);
            }
            if (d.restartGame != null) {
                if (typeof d.restartGame !== "object")
                    throw TypeError(".SC2APIProtocol.Request.restartGame: object expected");
                m.restartGame = $root.SC2APIProtocol.RequestRestartGame.fromObject(d.restartGame);
            }
            if (d.startReplay != null) {
                if (typeof d.startReplay !== "object")
                    throw TypeError(".SC2APIProtocol.Request.startReplay: object expected");
                m.startReplay = $root.SC2APIProtocol.RequestStartReplay.fromObject(d.startReplay);
            }
            if (d.leaveGame != null) {
                if (typeof d.leaveGame !== "object")
                    throw TypeError(".SC2APIProtocol.Request.leaveGame: object expected");
                m.leaveGame = $root.SC2APIProtocol.RequestLeaveGame.fromObject(d.leaveGame);
            }
            if (d.quickSave != null) {
                if (typeof d.quickSave !== "object")
                    throw TypeError(".SC2APIProtocol.Request.quickSave: object expected");
                m.quickSave = $root.SC2APIProtocol.RequestQuickSave.fromObject(d.quickSave);
            }
            if (d.quickLoad != null) {
                if (typeof d.quickLoad !== "object")
                    throw TypeError(".SC2APIProtocol.Request.quickLoad: object expected");
                m.quickLoad = $root.SC2APIProtocol.RequestQuickLoad.fromObject(d.quickLoad);
            }
            if (d.quit != null) {
                if (typeof d.quit !== "object")
                    throw TypeError(".SC2APIProtocol.Request.quit: object expected");
                m.quit = $root.SC2APIProtocol.RequestQuit.fromObject(d.quit);
            }
            if (d.gameInfo != null) {
                if (typeof d.gameInfo !== "object")
                    throw TypeError(".SC2APIProtocol.Request.gameInfo: object expected");
                m.gameInfo = $root.SC2APIProtocol.RequestGameInfo.fromObject(d.gameInfo);
            }
            if (d.observation != null) {
                if (typeof d.observation !== "object")
                    throw TypeError(".SC2APIProtocol.Request.observation: object expected");
                m.observation = $root.SC2APIProtocol.RequestObservation.fromObject(d.observation);
            }
            if (d.action != null) {
                if (typeof d.action !== "object")
                    throw TypeError(".SC2APIProtocol.Request.action: object expected");
                m.action = $root.SC2APIProtocol.RequestAction.fromObject(d.action);
            }
            if (d.obsAction != null) {
                if (typeof d.obsAction !== "object")
                    throw TypeError(".SC2APIProtocol.Request.obsAction: object expected");
                m.obsAction = $root.SC2APIProtocol.RequestObserverAction.fromObject(d.obsAction);
            }
            if (d.step != null) {
                if (typeof d.step !== "object")
                    throw TypeError(".SC2APIProtocol.Request.step: object expected");
                m.step = $root.SC2APIProtocol.RequestStep.fromObject(d.step);
            }
            if (d.data != null) {
                if (typeof d.data !== "object")
                    throw TypeError(".SC2APIProtocol.Request.data: object expected");
                m.data = $root.SC2APIProtocol.RequestData.fromObject(d.data);
            }
            if (d.query != null) {
                if (typeof d.query !== "object")
                    throw TypeError(".SC2APIProtocol.Request.query: object expected");
                m.query = $root.SC2APIProtocol.RequestQuery.fromObject(d.query);
            }
            if (d.saveReplay != null) {
                if (typeof d.saveReplay !== "object")
                    throw TypeError(".SC2APIProtocol.Request.saveReplay: object expected");
                m.saveReplay = $root.SC2APIProtocol.RequestSaveReplay.fromObject(d.saveReplay);
            }
            if (d.mapCommand != null) {
                if (typeof d.mapCommand !== "object")
                    throw TypeError(".SC2APIProtocol.Request.mapCommand: object expected");
                m.mapCommand = $root.SC2APIProtocol.RequestMapCommand.fromObject(d.mapCommand);
            }
            if (d.replayInfo != null) {
                if (typeof d.replayInfo !== "object")
                    throw TypeError(".SC2APIProtocol.Request.replayInfo: object expected");
                m.replayInfo = $root.SC2APIProtocol.RequestReplayInfo.fromObject(d.replayInfo);
            }
            if (d.availableMaps != null) {
                if (typeof d.availableMaps !== "object")
                    throw TypeError(".SC2APIProtocol.Request.availableMaps: object expected");
                m.availableMaps = $root.SC2APIProtocol.RequestAvailableMaps.fromObject(d.availableMaps);
            }
            if (d.saveMap != null) {
                if (typeof d.saveMap !== "object")
                    throw TypeError(".SC2APIProtocol.Request.saveMap: object expected");
                m.saveMap = $root.SC2APIProtocol.RequestSaveMap.fromObject(d.saveMap);
            }
            if (d.ping != null) {
                if (typeof d.ping !== "object")
                    throw TypeError(".SC2APIProtocol.Request.ping: object expected");
                m.ping = $root.SC2APIProtocol.RequestPing.fromObject(d.ping);
            }
            if (d.debug != null) {
                if (typeof d.debug !== "object")
                    throw TypeError(".SC2APIProtocol.Request.debug: object expected");
                m.debug = $root.SC2APIProtocol.RequestDebug.fromObject(d.debug);
            }
            if (d.id != null) {
                m.id = d.id >>> 0;
            }
            return m;
        };

        Request.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.id = 0;
            }
            if (m.createGame != null && m.hasOwnProperty("createGame")) {
                d.createGame = $root.SC2APIProtocol.RequestCreateGame.toObject(m.createGame, o);
                if (o.oneofs)
                    d.request = "createGame";
            }
            if (m.joinGame != null && m.hasOwnProperty("joinGame")) {
                d.joinGame = $root.SC2APIProtocol.RequestJoinGame.toObject(m.joinGame, o);
                if (o.oneofs)
                    d.request = "joinGame";
            }
            if (m.restartGame != null && m.hasOwnProperty("restartGame")) {
                d.restartGame = $root.SC2APIProtocol.RequestRestartGame.toObject(m.restartGame, o);
                if (o.oneofs)
                    d.request = "restartGame";
            }
            if (m.startReplay != null && m.hasOwnProperty("startReplay")) {
                d.startReplay = $root.SC2APIProtocol.RequestStartReplay.toObject(m.startReplay, o);
                if (o.oneofs)
                    d.request = "startReplay";
            }
            if (m.leaveGame != null && m.hasOwnProperty("leaveGame")) {
                d.leaveGame = $root.SC2APIProtocol.RequestLeaveGame.toObject(m.leaveGame, o);
                if (o.oneofs)
                    d.request = "leaveGame";
            }
            if (m.quickSave != null && m.hasOwnProperty("quickSave")) {
                d.quickSave = $root.SC2APIProtocol.RequestQuickSave.toObject(m.quickSave, o);
                if (o.oneofs)
                    d.request = "quickSave";
            }
            if (m.quickLoad != null && m.hasOwnProperty("quickLoad")) {
                d.quickLoad = $root.SC2APIProtocol.RequestQuickLoad.toObject(m.quickLoad, o);
                if (o.oneofs)
                    d.request = "quickLoad";
            }
            if (m.quit != null && m.hasOwnProperty("quit")) {
                d.quit = $root.SC2APIProtocol.RequestQuit.toObject(m.quit, o);
                if (o.oneofs)
                    d.request = "quit";
            }
            if (m.gameInfo != null && m.hasOwnProperty("gameInfo")) {
                d.gameInfo = $root.SC2APIProtocol.RequestGameInfo.toObject(m.gameInfo, o);
                if (o.oneofs)
                    d.request = "gameInfo";
            }
            if (m.observation != null && m.hasOwnProperty("observation")) {
                d.observation = $root.SC2APIProtocol.RequestObservation.toObject(m.observation, o);
                if (o.oneofs)
                    d.request = "observation";
            }
            if (m.action != null && m.hasOwnProperty("action")) {
                d.action = $root.SC2APIProtocol.RequestAction.toObject(m.action, o);
                if (o.oneofs)
                    d.request = "action";
            }
            if (m.step != null && m.hasOwnProperty("step")) {
                d.step = $root.SC2APIProtocol.RequestStep.toObject(m.step, o);
                if (o.oneofs)
                    d.request = "step";
            }
            if (m.data != null && m.hasOwnProperty("data")) {
                d.data = $root.SC2APIProtocol.RequestData.toObject(m.data, o);
                if (o.oneofs)
                    d.request = "data";
            }
            if (m.query != null && m.hasOwnProperty("query")) {
                d.query = $root.SC2APIProtocol.RequestQuery.toObject(m.query, o);
                if (o.oneofs)
                    d.request = "query";
            }
            if (m.saveReplay != null && m.hasOwnProperty("saveReplay")) {
                d.saveReplay = $root.SC2APIProtocol.RequestSaveReplay.toObject(m.saveReplay, o);
                if (o.oneofs)
                    d.request = "saveReplay";
            }
            if (m.replayInfo != null && m.hasOwnProperty("replayInfo")) {
                d.replayInfo = $root.SC2APIProtocol.RequestReplayInfo.toObject(m.replayInfo, o);
                if (o.oneofs)
                    d.request = "replayInfo";
            }
            if (m.availableMaps != null && m.hasOwnProperty("availableMaps")) {
                d.availableMaps = $root.SC2APIProtocol.RequestAvailableMaps.toObject(m.availableMaps, o);
                if (o.oneofs)
                    d.request = "availableMaps";
            }
            if (m.saveMap != null && m.hasOwnProperty("saveMap")) {
                d.saveMap = $root.SC2APIProtocol.RequestSaveMap.toObject(m.saveMap, o);
                if (o.oneofs)
                    d.request = "saveMap";
            }
            if (m.ping != null && m.hasOwnProperty("ping")) {
                d.ping = $root.SC2APIProtocol.RequestPing.toObject(m.ping, o);
                if (o.oneofs)
                    d.request = "ping";
            }
            if (m.debug != null && m.hasOwnProperty("debug")) {
                d.debug = $root.SC2APIProtocol.RequestDebug.toObject(m.debug, o);
                if (o.oneofs)
                    d.request = "debug";
            }
            if (m.obsAction != null && m.hasOwnProperty("obsAction")) {
                d.obsAction = $root.SC2APIProtocol.RequestObserverAction.toObject(m.obsAction, o);
                if (o.oneofs)
                    d.request = "obsAction";
            }
            if (m.mapCommand != null && m.hasOwnProperty("mapCommand")) {
                d.mapCommand = $root.SC2APIProtocol.RequestMapCommand.toObject(m.mapCommand, o);
                if (o.oneofs)
                    d.request = "mapCommand";
            }
            if (m.id != null && m.hasOwnProperty("id")) {
                d.id = m.id;
            }
            return d;
        };

        Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Request;
    })();

    SC2APIProtocol.Response = (function() {

        function Response(p) {
            this.error = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Response.prototype.createGame = null;
        Response.prototype.joinGame = null;
        Response.prototype.restartGame = null;
        Response.prototype.startReplay = null;
        Response.prototype.leaveGame = null;
        Response.prototype.quickSave = null;
        Response.prototype.quickLoad = null;
        Response.prototype.quit = null;
        Response.prototype.gameInfo = null;
        Response.prototype.observation = null;
        Response.prototype.action = null;
        Response.prototype.obsAction = null;
        Response.prototype.step = null;
        Response.prototype.data = null;
        Response.prototype.query = null;
        Response.prototype.saveReplay = null;
        Response.prototype.replayInfo = null;
        Response.prototype.availableMaps = null;
        Response.prototype.saveMap = null;
        Response.prototype.mapCommand = null;
        Response.prototype.ping = null;
        Response.prototype.debug = null;
        Response.prototype.id = 0;
        Response.prototype.error = $util.emptyArray;
        Response.prototype.status = 1;

        var $oneOfFields;

        Object.defineProperty(Response.prototype, "response", {
            get: $util.oneOfGetter($oneOfFields = ["createGame", "joinGame", "restartGame", "startReplay", "leaveGame", "quickSave", "quickLoad", "quit", "gameInfo", "observation", "action", "obsAction", "step", "data", "query", "saveReplay", "replayInfo", "availableMaps", "saveMap", "mapCommand", "ping", "debug"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        Response.create = function create(properties) {
            return new Response(properties);
        };

        Response.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.createGame != null && Object.hasOwnProperty.call(m, "createGame"))
                $root.SC2APIProtocol.ResponseCreateGame.encode(m.createGame, w.uint32(10).fork()).ldelim();
            if (m.joinGame != null && Object.hasOwnProperty.call(m, "joinGame"))
                $root.SC2APIProtocol.ResponseJoinGame.encode(m.joinGame, w.uint32(18).fork()).ldelim();
            if (m.restartGame != null && Object.hasOwnProperty.call(m, "restartGame"))
                $root.SC2APIProtocol.ResponseRestartGame.encode(m.restartGame, w.uint32(26).fork()).ldelim();
            if (m.startReplay != null && Object.hasOwnProperty.call(m, "startReplay"))
                $root.SC2APIProtocol.ResponseStartReplay.encode(m.startReplay, w.uint32(34).fork()).ldelim();
            if (m.leaveGame != null && Object.hasOwnProperty.call(m, "leaveGame"))
                $root.SC2APIProtocol.ResponseLeaveGame.encode(m.leaveGame, w.uint32(42).fork()).ldelim();
            if (m.quickSave != null && Object.hasOwnProperty.call(m, "quickSave"))
                $root.SC2APIProtocol.ResponseQuickSave.encode(m.quickSave, w.uint32(50).fork()).ldelim();
            if (m.quickLoad != null && Object.hasOwnProperty.call(m, "quickLoad"))
                $root.SC2APIProtocol.ResponseQuickLoad.encode(m.quickLoad, w.uint32(58).fork()).ldelim();
            if (m.quit != null && Object.hasOwnProperty.call(m, "quit"))
                $root.SC2APIProtocol.ResponseQuit.encode(m.quit, w.uint32(66).fork()).ldelim();
            if (m.gameInfo != null && Object.hasOwnProperty.call(m, "gameInfo"))
                $root.SC2APIProtocol.ResponseGameInfo.encode(m.gameInfo, w.uint32(74).fork()).ldelim();
            if (m.observation != null && Object.hasOwnProperty.call(m, "observation"))
                $root.SC2APIProtocol.ResponseObservation.encode(m.observation, w.uint32(82).fork()).ldelim();
            if (m.action != null && Object.hasOwnProperty.call(m, "action"))
                $root.SC2APIProtocol.ResponseAction.encode(m.action, w.uint32(90).fork()).ldelim();
            if (m.step != null && Object.hasOwnProperty.call(m, "step"))
                $root.SC2APIProtocol.ResponseStep.encode(m.step, w.uint32(98).fork()).ldelim();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                $root.SC2APIProtocol.ResponseData.encode(m.data, w.uint32(106).fork()).ldelim();
            if (m.query != null && Object.hasOwnProperty.call(m, "query"))
                $root.SC2APIProtocol.ResponseQuery.encode(m.query, w.uint32(114).fork()).ldelim();
            if (m.saveReplay != null && Object.hasOwnProperty.call(m, "saveReplay"))
                $root.SC2APIProtocol.ResponseSaveReplay.encode(m.saveReplay, w.uint32(122).fork()).ldelim();
            if (m.replayInfo != null && Object.hasOwnProperty.call(m, "replayInfo"))
                $root.SC2APIProtocol.ResponseReplayInfo.encode(m.replayInfo, w.uint32(130).fork()).ldelim();
            if (m.availableMaps != null && Object.hasOwnProperty.call(m, "availableMaps"))
                $root.SC2APIProtocol.ResponseAvailableMaps.encode(m.availableMaps, w.uint32(138).fork()).ldelim();
            if (m.saveMap != null && Object.hasOwnProperty.call(m, "saveMap"))
                $root.SC2APIProtocol.ResponseSaveMap.encode(m.saveMap, w.uint32(146).fork()).ldelim();
            if (m.ping != null && Object.hasOwnProperty.call(m, "ping"))
                $root.SC2APIProtocol.ResponsePing.encode(m.ping, w.uint32(154).fork()).ldelim();
            if (m.debug != null && Object.hasOwnProperty.call(m, "debug"))
                $root.SC2APIProtocol.ResponseDebug.encode(m.debug, w.uint32(162).fork()).ldelim();
            if (m.obsAction != null && Object.hasOwnProperty.call(m, "obsAction"))
                $root.SC2APIProtocol.ResponseObserverAction.encode(m.obsAction, w.uint32(170).fork()).ldelim();
            if (m.mapCommand != null && Object.hasOwnProperty.call(m, "mapCommand"))
                $root.SC2APIProtocol.ResponseMapCommand.encode(m.mapCommand, w.uint32(178).fork()).ldelim();
            if (m.id != null && Object.hasOwnProperty.call(m, "id"))
                w.uint32(776).uint32(m.id);
            if (m.error != null && m.error.length) {
                for (var i = 0; i < m.error.length; ++i)
                    w.uint32(786).string(m.error[i]);
            }
            if (m.status != null && Object.hasOwnProperty.call(m, "status"))
                w.uint32(792).int32(m.status);
            return w;
        };

        Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Response.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Response();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.createGame = $root.SC2APIProtocol.ResponseCreateGame.decode(r, r.uint32());
                    break;
                case 2:
                    m.joinGame = $root.SC2APIProtocol.ResponseJoinGame.decode(r, r.uint32());
                    break;
                case 3:
                    m.restartGame = $root.SC2APIProtocol.ResponseRestartGame.decode(r, r.uint32());
                    break;
                case 4:
                    m.startReplay = $root.SC2APIProtocol.ResponseStartReplay.decode(r, r.uint32());
                    break;
                case 5:
                    m.leaveGame = $root.SC2APIProtocol.ResponseLeaveGame.decode(r, r.uint32());
                    break;
                case 6:
                    m.quickSave = $root.SC2APIProtocol.ResponseQuickSave.decode(r, r.uint32());
                    break;
                case 7:
                    m.quickLoad = $root.SC2APIProtocol.ResponseQuickLoad.decode(r, r.uint32());
                    break;
                case 8:
                    m.quit = $root.SC2APIProtocol.ResponseQuit.decode(r, r.uint32());
                    break;
                case 9:
                    m.gameInfo = $root.SC2APIProtocol.ResponseGameInfo.decode(r, r.uint32());
                    break;
                case 10:
                    m.observation = $root.SC2APIProtocol.ResponseObservation.decode(r, r.uint32());
                    break;
                case 11:
                    m.action = $root.SC2APIProtocol.ResponseAction.decode(r, r.uint32());
                    break;
                case 21:
                    m.obsAction = $root.SC2APIProtocol.ResponseObserverAction.decode(r, r.uint32());
                    break;
                case 12:
                    m.step = $root.SC2APIProtocol.ResponseStep.decode(r, r.uint32());
                    break;
                case 13:
                    m.data = $root.SC2APIProtocol.ResponseData.decode(r, r.uint32());
                    break;
                case 14:
                    m.query = $root.SC2APIProtocol.ResponseQuery.decode(r, r.uint32());
                    break;
                case 15:
                    m.saveReplay = $root.SC2APIProtocol.ResponseSaveReplay.decode(r, r.uint32());
                    break;
                case 16:
                    m.replayInfo = $root.SC2APIProtocol.ResponseReplayInfo.decode(r, r.uint32());
                    break;
                case 17:
                    m.availableMaps = $root.SC2APIProtocol.ResponseAvailableMaps.decode(r, r.uint32());
                    break;
                case 18:
                    m.saveMap = $root.SC2APIProtocol.ResponseSaveMap.decode(r, r.uint32());
                    break;
                case 22:
                    m.mapCommand = $root.SC2APIProtocol.ResponseMapCommand.decode(r, r.uint32());
                    break;
                case 19:
                    m.ping = $root.SC2APIProtocol.ResponsePing.decode(r, r.uint32());
                    break;
                case 20:
                    m.debug = $root.SC2APIProtocol.ResponseDebug.decode(r, r.uint32());
                    break;
                case 97:
                    m.id = r.uint32();
                    break;
                case 98:
                    if (!(m.error && m.error.length))
                        m.error = [];
                    m.error.push(r.string());
                    break;
                case 99:
                    m.status = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Response.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.createGame != null && m.hasOwnProperty("createGame")) {
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseCreateGame.verify(m.createGame);
                    if (e)
                        return "createGame." + e;
                }
            }
            if (m.joinGame != null && m.hasOwnProperty("joinGame")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseJoinGame.verify(m.joinGame);
                    if (e)
                        return "joinGame." + e;
                }
            }
            if (m.restartGame != null && m.hasOwnProperty("restartGame")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseRestartGame.verify(m.restartGame);
                    if (e)
                        return "restartGame." + e;
                }
            }
            if (m.startReplay != null && m.hasOwnProperty("startReplay")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseStartReplay.verify(m.startReplay);
                    if (e)
                        return "startReplay." + e;
                }
            }
            if (m.leaveGame != null && m.hasOwnProperty("leaveGame")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseLeaveGame.verify(m.leaveGame);
                    if (e)
                        return "leaveGame." + e;
                }
            }
            if (m.quickSave != null && m.hasOwnProperty("quickSave")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseQuickSave.verify(m.quickSave);
                    if (e)
                        return "quickSave." + e;
                }
            }
            if (m.quickLoad != null && m.hasOwnProperty("quickLoad")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseQuickLoad.verify(m.quickLoad);
                    if (e)
                        return "quickLoad." + e;
                }
            }
            if (m.quit != null && m.hasOwnProperty("quit")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseQuit.verify(m.quit);
                    if (e)
                        return "quit." + e;
                }
            }
            if (m.gameInfo != null && m.hasOwnProperty("gameInfo")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseGameInfo.verify(m.gameInfo);
                    if (e)
                        return "gameInfo." + e;
                }
            }
            if (m.observation != null && m.hasOwnProperty("observation")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseObservation.verify(m.observation);
                    if (e)
                        return "observation." + e;
                }
            }
            if (m.action != null && m.hasOwnProperty("action")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseAction.verify(m.action);
                    if (e)
                        return "action." + e;
                }
            }
            if (m.obsAction != null && m.hasOwnProperty("obsAction")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseObserverAction.verify(m.obsAction);
                    if (e)
                        return "obsAction." + e;
                }
            }
            if (m.step != null && m.hasOwnProperty("step")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseStep.verify(m.step);
                    if (e)
                        return "step." + e;
                }
            }
            if (m.data != null && m.hasOwnProperty("data")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseData.verify(m.data);
                    if (e)
                        return "data." + e;
                }
            }
            if (m.query != null && m.hasOwnProperty("query")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseQuery.verify(m.query);
                    if (e)
                        return "query." + e;
                }
            }
            if (m.saveReplay != null && m.hasOwnProperty("saveReplay")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseSaveReplay.verify(m.saveReplay);
                    if (e)
                        return "saveReplay." + e;
                }
            }
            if (m.replayInfo != null && m.hasOwnProperty("replayInfo")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseReplayInfo.verify(m.replayInfo);
                    if (e)
                        return "replayInfo." + e;
                }
            }
            if (m.availableMaps != null && m.hasOwnProperty("availableMaps")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseAvailableMaps.verify(m.availableMaps);
                    if (e)
                        return "availableMaps." + e;
                }
            }
            if (m.saveMap != null && m.hasOwnProperty("saveMap")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseSaveMap.verify(m.saveMap);
                    if (e)
                        return "saveMap." + e;
                }
            }
            if (m.mapCommand != null && m.hasOwnProperty("mapCommand")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseMapCommand.verify(m.mapCommand);
                    if (e)
                        return "mapCommand." + e;
                }
            }
            if (m.ping != null && m.hasOwnProperty("ping")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponsePing.verify(m.ping);
                    if (e)
                        return "ping." + e;
                }
            }
            if (m.debug != null && m.hasOwnProperty("debug")) {
                if (p.response === 1)
                    return "response: multiple values";
                p.response = 1;
                {
                    var e = $root.SC2APIProtocol.ResponseDebug.verify(m.debug);
                    if (e)
                        return "debug." + e;
                }
            }
            if (m.id != null && m.hasOwnProperty("id")) {
                if (!$util.isInteger(m.id))
                    return "id: integer expected";
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                if (!Array.isArray(m.error))
                    return "error: array expected";
                for (var i = 0; i < m.error.length; ++i) {
                    if (!$util.isString(m.error[i]))
                        return "error: string[] expected";
                }
            }
            if (m.status != null && m.hasOwnProperty("status")) {
                switch (m.status) {
                default:
                    return "status: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 99:
                    break;
                }
            }
            return null;
        };

        Response.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Response)
                return d;
            var m = new $root.SC2APIProtocol.Response();
            if (d.createGame != null) {
                if (typeof d.createGame !== "object")
                    throw TypeError(".SC2APIProtocol.Response.createGame: object expected");
                m.createGame = $root.SC2APIProtocol.ResponseCreateGame.fromObject(d.createGame);
            }
            if (d.joinGame != null) {
                if (typeof d.joinGame !== "object")
                    throw TypeError(".SC2APIProtocol.Response.joinGame: object expected");
                m.joinGame = $root.SC2APIProtocol.ResponseJoinGame.fromObject(d.joinGame);
            }
            if (d.restartGame != null) {
                if (typeof d.restartGame !== "object")
                    throw TypeError(".SC2APIProtocol.Response.restartGame: object expected");
                m.restartGame = $root.SC2APIProtocol.ResponseRestartGame.fromObject(d.restartGame);
            }
            if (d.startReplay != null) {
                if (typeof d.startReplay !== "object")
                    throw TypeError(".SC2APIProtocol.Response.startReplay: object expected");
                m.startReplay = $root.SC2APIProtocol.ResponseStartReplay.fromObject(d.startReplay);
            }
            if (d.leaveGame != null) {
                if (typeof d.leaveGame !== "object")
                    throw TypeError(".SC2APIProtocol.Response.leaveGame: object expected");
                m.leaveGame = $root.SC2APIProtocol.ResponseLeaveGame.fromObject(d.leaveGame);
            }
            if (d.quickSave != null) {
                if (typeof d.quickSave !== "object")
                    throw TypeError(".SC2APIProtocol.Response.quickSave: object expected");
                m.quickSave = $root.SC2APIProtocol.ResponseQuickSave.fromObject(d.quickSave);
            }
            if (d.quickLoad != null) {
                if (typeof d.quickLoad !== "object")
                    throw TypeError(".SC2APIProtocol.Response.quickLoad: object expected");
                m.quickLoad = $root.SC2APIProtocol.ResponseQuickLoad.fromObject(d.quickLoad);
            }
            if (d.quit != null) {
                if (typeof d.quit !== "object")
                    throw TypeError(".SC2APIProtocol.Response.quit: object expected");
                m.quit = $root.SC2APIProtocol.ResponseQuit.fromObject(d.quit);
            }
            if (d.gameInfo != null) {
                if (typeof d.gameInfo !== "object")
                    throw TypeError(".SC2APIProtocol.Response.gameInfo: object expected");
                m.gameInfo = $root.SC2APIProtocol.ResponseGameInfo.fromObject(d.gameInfo);
            }
            if (d.observation != null) {
                if (typeof d.observation !== "object")
                    throw TypeError(".SC2APIProtocol.Response.observation: object expected");
                m.observation = $root.SC2APIProtocol.ResponseObservation.fromObject(d.observation);
            }
            if (d.action != null) {
                if (typeof d.action !== "object")
                    throw TypeError(".SC2APIProtocol.Response.action: object expected");
                m.action = $root.SC2APIProtocol.ResponseAction.fromObject(d.action);
            }
            if (d.obsAction != null) {
                if (typeof d.obsAction !== "object")
                    throw TypeError(".SC2APIProtocol.Response.obsAction: object expected");
                m.obsAction = $root.SC2APIProtocol.ResponseObserverAction.fromObject(d.obsAction);
            }
            if (d.step != null) {
                if (typeof d.step !== "object")
                    throw TypeError(".SC2APIProtocol.Response.step: object expected");
                m.step = $root.SC2APIProtocol.ResponseStep.fromObject(d.step);
            }
            if (d.data != null) {
                if (typeof d.data !== "object")
                    throw TypeError(".SC2APIProtocol.Response.data: object expected");
                m.data = $root.SC2APIProtocol.ResponseData.fromObject(d.data);
            }
            if (d.query != null) {
                if (typeof d.query !== "object")
                    throw TypeError(".SC2APIProtocol.Response.query: object expected");
                m.query = $root.SC2APIProtocol.ResponseQuery.fromObject(d.query);
            }
            if (d.saveReplay != null) {
                if (typeof d.saveReplay !== "object")
                    throw TypeError(".SC2APIProtocol.Response.saveReplay: object expected");
                m.saveReplay = $root.SC2APIProtocol.ResponseSaveReplay.fromObject(d.saveReplay);
            }
            if (d.replayInfo != null) {
                if (typeof d.replayInfo !== "object")
                    throw TypeError(".SC2APIProtocol.Response.replayInfo: object expected");
                m.replayInfo = $root.SC2APIProtocol.ResponseReplayInfo.fromObject(d.replayInfo);
            }
            if (d.availableMaps != null) {
                if (typeof d.availableMaps !== "object")
                    throw TypeError(".SC2APIProtocol.Response.availableMaps: object expected");
                m.availableMaps = $root.SC2APIProtocol.ResponseAvailableMaps.fromObject(d.availableMaps);
            }
            if (d.saveMap != null) {
                if (typeof d.saveMap !== "object")
                    throw TypeError(".SC2APIProtocol.Response.saveMap: object expected");
                m.saveMap = $root.SC2APIProtocol.ResponseSaveMap.fromObject(d.saveMap);
            }
            if (d.mapCommand != null) {
                if (typeof d.mapCommand !== "object")
                    throw TypeError(".SC2APIProtocol.Response.mapCommand: object expected");
                m.mapCommand = $root.SC2APIProtocol.ResponseMapCommand.fromObject(d.mapCommand);
            }
            if (d.ping != null) {
                if (typeof d.ping !== "object")
                    throw TypeError(".SC2APIProtocol.Response.ping: object expected");
                m.ping = $root.SC2APIProtocol.ResponsePing.fromObject(d.ping);
            }
            if (d.debug != null) {
                if (typeof d.debug !== "object")
                    throw TypeError(".SC2APIProtocol.Response.debug: object expected");
                m.debug = $root.SC2APIProtocol.ResponseDebug.fromObject(d.debug);
            }
            if (d.id != null) {
                m.id = d.id >>> 0;
            }
            if (d.error) {
                if (!Array.isArray(d.error))
                    throw TypeError(".SC2APIProtocol.Response.error: array expected");
                m.error = [];
                for (var i = 0; i < d.error.length; ++i) {
                    m.error[i] = String(d.error[i]);
                }
            }
            switch (d.status) {
            case "launched":
            case 1:
                m.status = 1;
                break;
            case "init_game":
            case 2:
                m.status = 2;
                break;
            case "in_game":
            case 3:
                m.status = 3;
                break;
            case "in_replay":
            case 4:
                m.status = 4;
                break;
            case "ended":
            case 5:
                m.status = 5;
                break;
            case "quit":
            case 6:
                m.status = 6;
                break;
            case "unknown":
            case 99:
                m.status = 99;
                break;
            }
            return m;
        };

        Response.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.error = [];
            }
            if (o.defaults) {
                d.id = 0;
                d.status = o.enums === String ? "launched" : 1;
            }
            if (m.createGame != null && m.hasOwnProperty("createGame")) {
                d.createGame = $root.SC2APIProtocol.ResponseCreateGame.toObject(m.createGame, o);
                if (o.oneofs)
                    d.response = "createGame";
            }
            if (m.joinGame != null && m.hasOwnProperty("joinGame")) {
                d.joinGame = $root.SC2APIProtocol.ResponseJoinGame.toObject(m.joinGame, o);
                if (o.oneofs)
                    d.response = "joinGame";
            }
            if (m.restartGame != null && m.hasOwnProperty("restartGame")) {
                d.restartGame = $root.SC2APIProtocol.ResponseRestartGame.toObject(m.restartGame, o);
                if (o.oneofs)
                    d.response = "restartGame";
            }
            if (m.startReplay != null && m.hasOwnProperty("startReplay")) {
                d.startReplay = $root.SC2APIProtocol.ResponseStartReplay.toObject(m.startReplay, o);
                if (o.oneofs)
                    d.response = "startReplay";
            }
            if (m.leaveGame != null && m.hasOwnProperty("leaveGame")) {
                d.leaveGame = $root.SC2APIProtocol.ResponseLeaveGame.toObject(m.leaveGame, o);
                if (o.oneofs)
                    d.response = "leaveGame";
            }
            if (m.quickSave != null && m.hasOwnProperty("quickSave")) {
                d.quickSave = $root.SC2APIProtocol.ResponseQuickSave.toObject(m.quickSave, o);
                if (o.oneofs)
                    d.response = "quickSave";
            }
            if (m.quickLoad != null && m.hasOwnProperty("quickLoad")) {
                d.quickLoad = $root.SC2APIProtocol.ResponseQuickLoad.toObject(m.quickLoad, o);
                if (o.oneofs)
                    d.response = "quickLoad";
            }
            if (m.quit != null && m.hasOwnProperty("quit")) {
                d.quit = $root.SC2APIProtocol.ResponseQuit.toObject(m.quit, o);
                if (o.oneofs)
                    d.response = "quit";
            }
            if (m.gameInfo != null && m.hasOwnProperty("gameInfo")) {
                d.gameInfo = $root.SC2APIProtocol.ResponseGameInfo.toObject(m.gameInfo, o);
                if (o.oneofs)
                    d.response = "gameInfo";
            }
            if (m.observation != null && m.hasOwnProperty("observation")) {
                d.observation = $root.SC2APIProtocol.ResponseObservation.toObject(m.observation, o);
                if (o.oneofs)
                    d.response = "observation";
            }
            if (m.action != null && m.hasOwnProperty("action")) {
                d.action = $root.SC2APIProtocol.ResponseAction.toObject(m.action, o);
                if (o.oneofs)
                    d.response = "action";
            }
            if (m.step != null && m.hasOwnProperty("step")) {
                d.step = $root.SC2APIProtocol.ResponseStep.toObject(m.step, o);
                if (o.oneofs)
                    d.response = "step";
            }
            if (m.data != null && m.hasOwnProperty("data")) {
                d.data = $root.SC2APIProtocol.ResponseData.toObject(m.data, o);
                if (o.oneofs)
                    d.response = "data";
            }
            if (m.query != null && m.hasOwnProperty("query")) {
                d.query = $root.SC2APIProtocol.ResponseQuery.toObject(m.query, o);
                if (o.oneofs)
                    d.response = "query";
            }
            if (m.saveReplay != null && m.hasOwnProperty("saveReplay")) {
                d.saveReplay = $root.SC2APIProtocol.ResponseSaveReplay.toObject(m.saveReplay, o);
                if (o.oneofs)
                    d.response = "saveReplay";
            }
            if (m.replayInfo != null && m.hasOwnProperty("replayInfo")) {
                d.replayInfo = $root.SC2APIProtocol.ResponseReplayInfo.toObject(m.replayInfo, o);
                if (o.oneofs)
                    d.response = "replayInfo";
            }
            if (m.availableMaps != null && m.hasOwnProperty("availableMaps")) {
                d.availableMaps = $root.SC2APIProtocol.ResponseAvailableMaps.toObject(m.availableMaps, o);
                if (o.oneofs)
                    d.response = "availableMaps";
            }
            if (m.saveMap != null && m.hasOwnProperty("saveMap")) {
                d.saveMap = $root.SC2APIProtocol.ResponseSaveMap.toObject(m.saveMap, o);
                if (o.oneofs)
                    d.response = "saveMap";
            }
            if (m.ping != null && m.hasOwnProperty("ping")) {
                d.ping = $root.SC2APIProtocol.ResponsePing.toObject(m.ping, o);
                if (o.oneofs)
                    d.response = "ping";
            }
            if (m.debug != null && m.hasOwnProperty("debug")) {
                d.debug = $root.SC2APIProtocol.ResponseDebug.toObject(m.debug, o);
                if (o.oneofs)
                    d.response = "debug";
            }
            if (m.obsAction != null && m.hasOwnProperty("obsAction")) {
                d.obsAction = $root.SC2APIProtocol.ResponseObserverAction.toObject(m.obsAction, o);
                if (o.oneofs)
                    d.response = "obsAction";
            }
            if (m.mapCommand != null && m.hasOwnProperty("mapCommand")) {
                d.mapCommand = $root.SC2APIProtocol.ResponseMapCommand.toObject(m.mapCommand, o);
                if (o.oneofs)
                    d.response = "mapCommand";
            }
            if (m.id != null && m.hasOwnProperty("id")) {
                d.id = m.id;
            }
            if (m.error && m.error.length) {
                d.error = [];
                for (var j = 0; j < m.error.length; ++j) {
                    d.error[j] = m.error[j];
                }
            }
            if (m.status != null && m.hasOwnProperty("status")) {
                d.status = o.enums === String ? $root.SC2APIProtocol.Status[m.status] : m.status;
            }
            return d;
        };

        Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Response;
    })();

    SC2APIProtocol.Status = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "launched"] = 1;
        values[valuesById[2] = "init_game"] = 2;
        values[valuesById[3] = "in_game"] = 3;
        values[valuesById[4] = "in_replay"] = 4;
        values[valuesById[5] = "ended"] = 5;
        values[valuesById[6] = "quit"] = 6;
        values[valuesById[99] = "unknown"] = 99;
        return values;
    })();

    SC2APIProtocol.RequestCreateGame = (function() {

        function RequestCreateGame(p) {
            this.playerSetup = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestCreateGame.prototype.localMap = null;
        RequestCreateGame.prototype.battlenetMapName = "";
        RequestCreateGame.prototype.playerSetup = $util.emptyArray;
        RequestCreateGame.prototype.disableFog = false;
        RequestCreateGame.prototype.randomSeed = 0;
        RequestCreateGame.prototype.realtime = false;

        var $oneOfFields;

        Object.defineProperty(RequestCreateGame.prototype, "Map", {
            get: $util.oneOfGetter($oneOfFields = ["localMap", "battlenetMapName"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        RequestCreateGame.create = function create(properties) {
            return new RequestCreateGame(properties);
        };

        RequestCreateGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.localMap != null && Object.hasOwnProperty.call(m, "localMap"))
                $root.SC2APIProtocol.LocalMap.encode(m.localMap, w.uint32(10).fork()).ldelim();
            if (m.battlenetMapName != null && Object.hasOwnProperty.call(m, "battlenetMapName"))
                w.uint32(18).string(m.battlenetMapName);
            if (m.playerSetup != null && m.playerSetup.length) {
                for (var i = 0; i < m.playerSetup.length; ++i)
                    $root.SC2APIProtocol.PlayerSetup.encode(m.playerSetup[i], w.uint32(26).fork()).ldelim();
            }
            if (m.disableFog != null && Object.hasOwnProperty.call(m, "disableFog"))
                w.uint32(32).bool(m.disableFog);
            if (m.randomSeed != null && Object.hasOwnProperty.call(m, "randomSeed"))
                w.uint32(40).uint32(m.randomSeed);
            if (m.realtime != null && Object.hasOwnProperty.call(m, "realtime"))
                w.uint32(48).bool(m.realtime);
            return w;
        };

        RequestCreateGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestCreateGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestCreateGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.localMap = $root.SC2APIProtocol.LocalMap.decode(r, r.uint32());
                    break;
                case 2:
                    m.battlenetMapName = r.string();
                    break;
                case 3:
                    if (!(m.playerSetup && m.playerSetup.length))
                        m.playerSetup = [];
                    m.playerSetup.push($root.SC2APIProtocol.PlayerSetup.decode(r, r.uint32()));
                    break;
                case 4:
                    m.disableFog = r.bool();
                    break;
                case 5:
                    m.randomSeed = r.uint32();
                    break;
                case 6:
                    m.realtime = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestCreateGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestCreateGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.localMap != null && m.hasOwnProperty("localMap")) {
                p.Map = 1;
                {
                    var e = $root.SC2APIProtocol.LocalMap.verify(m.localMap);
                    if (e)
                        return "localMap." + e;
                }
            }
            if (m.battlenetMapName != null && m.hasOwnProperty("battlenetMapName")) {
                if (p.Map === 1)
                    return "Map: multiple values";
                p.Map = 1;
                if (!$util.isString(m.battlenetMapName))
                    return "battlenetMapName: string expected";
            }
            if (m.playerSetup != null && m.hasOwnProperty("playerSetup")) {
                if (!Array.isArray(m.playerSetup))
                    return "playerSetup: array expected";
                for (var i = 0; i < m.playerSetup.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.PlayerSetup.verify(m.playerSetup[i]);
                        if (e)
                            return "playerSetup." + e;
                    }
                }
            }
            if (m.disableFog != null && m.hasOwnProperty("disableFog")) {
                if (typeof m.disableFog !== "boolean")
                    return "disableFog: boolean expected";
            }
            if (m.randomSeed != null && m.hasOwnProperty("randomSeed")) {
                if (!$util.isInteger(m.randomSeed))
                    return "randomSeed: integer expected";
            }
            if (m.realtime != null && m.hasOwnProperty("realtime")) {
                if (typeof m.realtime !== "boolean")
                    return "realtime: boolean expected";
            }
            return null;
        };

        RequestCreateGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestCreateGame)
                return d;
            var m = new $root.SC2APIProtocol.RequestCreateGame();
            if (d.localMap != null) {
                if (typeof d.localMap !== "object")
                    throw TypeError(".SC2APIProtocol.RequestCreateGame.localMap: object expected");
                m.localMap = $root.SC2APIProtocol.LocalMap.fromObject(d.localMap);
            }
            if (d.battlenetMapName != null) {
                m.battlenetMapName = String(d.battlenetMapName);
            }
            if (d.playerSetup) {
                if (!Array.isArray(d.playerSetup))
                    throw TypeError(".SC2APIProtocol.RequestCreateGame.playerSetup: array expected");
                m.playerSetup = [];
                for (var i = 0; i < d.playerSetup.length; ++i) {
                    if (typeof d.playerSetup[i] !== "object")
                        throw TypeError(".SC2APIProtocol.RequestCreateGame.playerSetup: object expected");
                    m.playerSetup[i] = $root.SC2APIProtocol.PlayerSetup.fromObject(d.playerSetup[i]);
                }
            }
            if (d.disableFog != null) {
                m.disableFog = Boolean(d.disableFog);
            }
            if (d.randomSeed != null) {
                m.randomSeed = d.randomSeed >>> 0;
            }
            if (d.realtime != null) {
                m.realtime = Boolean(d.realtime);
            }
            return m;
        };

        RequestCreateGame.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.playerSetup = [];
            }
            if (o.defaults) {
                d.disableFog = false;
                d.randomSeed = 0;
                d.realtime = false;
            }
            if (m.localMap != null && m.hasOwnProperty("localMap")) {
                d.localMap = $root.SC2APIProtocol.LocalMap.toObject(m.localMap, o);
                if (o.oneofs)
                    d.Map = "localMap";
            }
            if (m.battlenetMapName != null && m.hasOwnProperty("battlenetMapName")) {
                d.battlenetMapName = m.battlenetMapName;
                if (o.oneofs)
                    d.Map = "battlenetMapName";
            }
            if (m.playerSetup && m.playerSetup.length) {
                d.playerSetup = [];
                for (var j = 0; j < m.playerSetup.length; ++j) {
                    d.playerSetup[j] = $root.SC2APIProtocol.PlayerSetup.toObject(m.playerSetup[j], o);
                }
            }
            if (m.disableFog != null && m.hasOwnProperty("disableFog")) {
                d.disableFog = m.disableFog;
            }
            if (m.randomSeed != null && m.hasOwnProperty("randomSeed")) {
                d.randomSeed = m.randomSeed;
            }
            if (m.realtime != null && m.hasOwnProperty("realtime")) {
                d.realtime = m.realtime;
            }
            return d;
        };

        RequestCreateGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestCreateGame;
    })();

    SC2APIProtocol.LocalMap = (function() {

        function LocalMap(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        LocalMap.prototype.mapPath = "";
        LocalMap.prototype.mapData = $util.newBuffer([]);

        LocalMap.create = function create(properties) {
            return new LocalMap(properties);
        };

        LocalMap.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mapPath != null && Object.hasOwnProperty.call(m, "mapPath"))
                w.uint32(10).string(m.mapPath);
            if (m.mapData != null && Object.hasOwnProperty.call(m, "mapData"))
                w.uint32(58).bytes(m.mapData);
            return w;
        };

        LocalMap.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        LocalMap.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.LocalMap();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.mapPath = r.string();
                    break;
                case 7:
                    m.mapData = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        LocalMap.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        LocalMap.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.mapPath != null && m.hasOwnProperty("mapPath")) {
                if (!$util.isString(m.mapPath))
                    return "mapPath: string expected";
            }
            if (m.mapData != null && m.hasOwnProperty("mapData")) {
                if (!(m.mapData && typeof m.mapData.length === "number" || $util.isString(m.mapData)))
                    return "mapData: buffer expected";
            }
            return null;
        };

        LocalMap.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.LocalMap)
                return d;
            var m = new $root.SC2APIProtocol.LocalMap();
            if (d.mapPath != null) {
                m.mapPath = String(d.mapPath);
            }
            if (d.mapData != null) {
                if (typeof d.mapData === "string")
                    $util.base64.decode(d.mapData, m.mapData = $util.newBuffer($util.base64.length(d.mapData)), 0);
                else if (d.mapData.length)
                    m.mapData = d.mapData;
            }
            return m;
        };

        LocalMap.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.mapPath = "";
                if (o.bytes === String)
                    d.mapData = "";
                else {
                    d.mapData = [];
                    if (o.bytes !== Array)
                        d.mapData = $util.newBuffer(d.mapData);
                }
            }
            if (m.mapPath != null && m.hasOwnProperty("mapPath")) {
                d.mapPath = m.mapPath;
            }
            if (m.mapData != null && m.hasOwnProperty("mapData")) {
                d.mapData = o.bytes === String ? $util.base64.encode(m.mapData, 0, m.mapData.length) : o.bytes === Array ? Array.prototype.slice.call(m.mapData) : m.mapData;
            }
            return d;
        };

        LocalMap.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LocalMap;
    })();

    SC2APIProtocol.ResponseCreateGame = (function() {

        function ResponseCreateGame(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseCreateGame.prototype.error = 1;
        ResponseCreateGame.prototype.errorDetails = "";

        ResponseCreateGame.create = function create(properties) {
            return new ResponseCreateGame(properties);
        };

        ResponseCreateGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                w.uint32(8).int32(m.error);
            if (m.errorDetails != null && Object.hasOwnProperty.call(m, "errorDetails"))
                w.uint32(18).string(m.errorDetails);
            return w;
        };

        ResponseCreateGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseCreateGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseCreateGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.error = r.int32();
                    break;
                case 2:
                    m.errorDetails = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseCreateGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseCreateGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.error != null && m.hasOwnProperty("error")) {
                switch (m.error) {
                default:
                    return "error: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                    break;
                }
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                if (!$util.isString(m.errorDetails))
                    return "errorDetails: string expected";
            }
            return null;
        };

        ResponseCreateGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseCreateGame)
                return d;
            var m = new $root.SC2APIProtocol.ResponseCreateGame();
            switch (d.error) {
            case "MissingMap":
            case 1:
                m.error = 1;
                break;
            case "InvalidMapPath":
            case 2:
                m.error = 2;
                break;
            case "InvalidMapData":
            case 3:
                m.error = 3;
                break;
            case "InvalidMapName":
            case 4:
                m.error = 4;
                break;
            case "InvalidMapHandle":
            case 5:
                m.error = 5;
                break;
            case "MissingPlayerSetup":
            case 6:
                m.error = 6;
                break;
            case "InvalidPlayerSetup":
            case 7:
                m.error = 7;
                break;
            case "MultiplayerUnsupported":
            case 8:
                m.error = 8;
                break;
            }
            if (d.errorDetails != null) {
                m.errorDetails = String(d.errorDetails);
            }
            return m;
        };

        ResponseCreateGame.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.error = o.enums === String ? "MissingMap" : 1;
                d.errorDetails = "";
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                d.error = o.enums === String ? $root.SC2APIProtocol.ResponseCreateGame.Error[m.error] : m.error;
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                d.errorDetails = m.errorDetails;
            }
            return d;
        };

        ResponseCreateGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ResponseCreateGame.Error = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "MissingMap"] = 1;
            values[valuesById[2] = "InvalidMapPath"] = 2;
            values[valuesById[3] = "InvalidMapData"] = 3;
            values[valuesById[4] = "InvalidMapName"] = 4;
            values[valuesById[5] = "InvalidMapHandle"] = 5;
            values[valuesById[6] = "MissingPlayerSetup"] = 6;
            values[valuesById[7] = "InvalidPlayerSetup"] = 7;
            values[valuesById[8] = "MultiplayerUnsupported"] = 8;
            return values;
        })();

        return ResponseCreateGame;
    })();

    SC2APIProtocol.RequestJoinGame = (function() {

        function RequestJoinGame(p) {
            this.clientPorts = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestJoinGame.prototype.race = 0;
        RequestJoinGame.prototype.observedPlayerId = 0;
        RequestJoinGame.prototype.options = null;
        RequestJoinGame.prototype.serverPorts = null;
        RequestJoinGame.prototype.clientPorts = $util.emptyArray;
        RequestJoinGame.prototype.sharedPort = 0;
        RequestJoinGame.prototype.playerName = "";
        RequestJoinGame.prototype.hostIp = "";

        var $oneOfFields;

        Object.defineProperty(RequestJoinGame.prototype, "participation", {
            get: $util.oneOfGetter($oneOfFields = ["race", "observedPlayerId"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        RequestJoinGame.create = function create(properties) {
            return new RequestJoinGame(properties);
        };

        RequestJoinGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.race != null && Object.hasOwnProperty.call(m, "race"))
                w.uint32(8).int32(m.race);
            if (m.observedPlayerId != null && Object.hasOwnProperty.call(m, "observedPlayerId"))
                w.uint32(16).uint32(m.observedPlayerId);
            if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                $root.SC2APIProtocol.InterfaceOptions.encode(m.options, w.uint32(26).fork()).ldelim();
            if (m.serverPorts != null && Object.hasOwnProperty.call(m, "serverPorts"))
                $root.SC2APIProtocol.PortSet.encode(m.serverPorts, w.uint32(34).fork()).ldelim();
            if (m.clientPorts != null && m.clientPorts.length) {
                for (var i = 0; i < m.clientPorts.length; ++i)
                    $root.SC2APIProtocol.PortSet.encode(m.clientPorts[i], w.uint32(42).fork()).ldelim();
            }
            if (m.sharedPort != null && Object.hasOwnProperty.call(m, "sharedPort"))
                w.uint32(48).int32(m.sharedPort);
            if (m.playerName != null && Object.hasOwnProperty.call(m, "playerName"))
                w.uint32(58).string(m.playerName);
            if (m.hostIp != null && Object.hasOwnProperty.call(m, "hostIp"))
                w.uint32(66).string(m.hostIp);
            return w;
        };

        RequestJoinGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestJoinGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestJoinGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.race = r.int32();
                    break;
                case 2:
                    m.observedPlayerId = r.uint32();
                    break;
                case 3:
                    m.options = $root.SC2APIProtocol.InterfaceOptions.decode(r, r.uint32());
                    break;
                case 4:
                    m.serverPorts = $root.SC2APIProtocol.PortSet.decode(r, r.uint32());
                    break;
                case 5:
                    if (!(m.clientPorts && m.clientPorts.length))
                        m.clientPorts = [];
                    m.clientPorts.push($root.SC2APIProtocol.PortSet.decode(r, r.uint32()));
                    break;
                case 6:
                    m.sharedPort = r.int32();
                    break;
                case 7:
                    m.playerName = r.string();
                    break;
                case 8:
                    m.hostIp = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestJoinGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestJoinGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.race != null && m.hasOwnProperty("race")) {
                p.participation = 1;
                switch (m.race) {
                default:
                    return "race: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.observedPlayerId != null && m.hasOwnProperty("observedPlayerId")) {
                if (p.participation === 1)
                    return "participation: multiple values";
                p.participation = 1;
                if (!$util.isInteger(m.observedPlayerId))
                    return "observedPlayerId: integer expected";
            }
            if (m.options != null && m.hasOwnProperty("options")) {
                {
                    var e = $root.SC2APIProtocol.InterfaceOptions.verify(m.options);
                    if (e)
                        return "options." + e;
                }
            }
            if (m.serverPorts != null && m.hasOwnProperty("serverPorts")) {
                {
                    var e = $root.SC2APIProtocol.PortSet.verify(m.serverPorts);
                    if (e)
                        return "serverPorts." + e;
                }
            }
            if (m.clientPorts != null && m.hasOwnProperty("clientPorts")) {
                if (!Array.isArray(m.clientPorts))
                    return "clientPorts: array expected";
                for (var i = 0; i < m.clientPorts.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.PortSet.verify(m.clientPorts[i]);
                        if (e)
                            return "clientPorts." + e;
                    }
                }
            }
            if (m.sharedPort != null && m.hasOwnProperty("sharedPort")) {
                if (!$util.isInteger(m.sharedPort))
                    return "sharedPort: integer expected";
            }
            if (m.playerName != null && m.hasOwnProperty("playerName")) {
                if (!$util.isString(m.playerName))
                    return "playerName: string expected";
            }
            if (m.hostIp != null && m.hasOwnProperty("hostIp")) {
                if (!$util.isString(m.hostIp))
                    return "hostIp: string expected";
            }
            return null;
        };

        RequestJoinGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestJoinGame)
                return d;
            var m = new $root.SC2APIProtocol.RequestJoinGame();
            switch (d.race) {
            case "NoRace":
            case 0:
                m.race = 0;
                break;
            case "Terran":
            case 1:
                m.race = 1;
                break;
            case "Zerg":
            case 2:
                m.race = 2;
                break;
            case "Protoss":
            case 3:
                m.race = 3;
                break;
            case "Random":
            case 4:
                m.race = 4;
                break;
            }
            if (d.observedPlayerId != null) {
                m.observedPlayerId = d.observedPlayerId >>> 0;
            }
            if (d.options != null) {
                if (typeof d.options !== "object")
                    throw TypeError(".SC2APIProtocol.RequestJoinGame.options: object expected");
                m.options = $root.SC2APIProtocol.InterfaceOptions.fromObject(d.options);
            }
            if (d.serverPorts != null) {
                if (typeof d.serverPorts !== "object")
                    throw TypeError(".SC2APIProtocol.RequestJoinGame.serverPorts: object expected");
                m.serverPorts = $root.SC2APIProtocol.PortSet.fromObject(d.serverPorts);
            }
            if (d.clientPorts) {
                if (!Array.isArray(d.clientPorts))
                    throw TypeError(".SC2APIProtocol.RequestJoinGame.clientPorts: array expected");
                m.clientPorts = [];
                for (var i = 0; i < d.clientPorts.length; ++i) {
                    if (typeof d.clientPorts[i] !== "object")
                        throw TypeError(".SC2APIProtocol.RequestJoinGame.clientPorts: object expected");
                    m.clientPorts[i] = $root.SC2APIProtocol.PortSet.fromObject(d.clientPorts[i]);
                }
            }
            if (d.sharedPort != null) {
                m.sharedPort = d.sharedPort | 0;
            }
            if (d.playerName != null) {
                m.playerName = String(d.playerName);
            }
            if (d.hostIp != null) {
                m.hostIp = String(d.hostIp);
            }
            return m;
        };

        RequestJoinGame.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.clientPorts = [];
            }
            if (o.defaults) {
                d.options = null;
                d.serverPorts = null;
                d.sharedPort = 0;
                d.playerName = "";
                d.hostIp = "";
            }
            if (m.race != null && m.hasOwnProperty("race")) {
                d.race = o.enums === String ? $root.SC2APIProtocol.Race[m.race] : m.race;
                if (o.oneofs)
                    d.participation = "race";
            }
            if (m.observedPlayerId != null && m.hasOwnProperty("observedPlayerId")) {
                d.observedPlayerId = m.observedPlayerId;
                if (o.oneofs)
                    d.participation = "observedPlayerId";
            }
            if (m.options != null && m.hasOwnProperty("options")) {
                d.options = $root.SC2APIProtocol.InterfaceOptions.toObject(m.options, o);
            }
            if (m.serverPorts != null && m.hasOwnProperty("serverPorts")) {
                d.serverPorts = $root.SC2APIProtocol.PortSet.toObject(m.serverPorts, o);
            }
            if (m.clientPorts && m.clientPorts.length) {
                d.clientPorts = [];
                for (var j = 0; j < m.clientPorts.length; ++j) {
                    d.clientPorts[j] = $root.SC2APIProtocol.PortSet.toObject(m.clientPorts[j], o);
                }
            }
            if (m.sharedPort != null && m.hasOwnProperty("sharedPort")) {
                d.sharedPort = m.sharedPort;
            }
            if (m.playerName != null && m.hasOwnProperty("playerName")) {
                d.playerName = m.playerName;
            }
            if (m.hostIp != null && m.hasOwnProperty("hostIp")) {
                d.hostIp = m.hostIp;
            }
            return d;
        };

        RequestJoinGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestJoinGame;
    })();

    SC2APIProtocol.PortSet = (function() {

        function PortSet(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PortSet.prototype.gamePort = 0;
        PortSet.prototype.basePort = 0;

        PortSet.create = function create(properties) {
            return new PortSet(properties);
        };

        PortSet.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.gamePort != null && Object.hasOwnProperty.call(m, "gamePort"))
                w.uint32(8).int32(m.gamePort);
            if (m.basePort != null && Object.hasOwnProperty.call(m, "basePort"))
                w.uint32(16).int32(m.basePort);
            return w;
        };

        PortSet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PortSet.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PortSet();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.gamePort = r.int32();
                    break;
                case 2:
                    m.basePort = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PortSet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PortSet.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.gamePort != null && m.hasOwnProperty("gamePort")) {
                if (!$util.isInteger(m.gamePort))
                    return "gamePort: integer expected";
            }
            if (m.basePort != null && m.hasOwnProperty("basePort")) {
                if (!$util.isInteger(m.basePort))
                    return "basePort: integer expected";
            }
            return null;
        };

        PortSet.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PortSet)
                return d;
            var m = new $root.SC2APIProtocol.PortSet();
            if (d.gamePort != null) {
                m.gamePort = d.gamePort | 0;
            }
            if (d.basePort != null) {
                m.basePort = d.basePort | 0;
            }
            return m;
        };

        PortSet.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.gamePort = 0;
                d.basePort = 0;
            }
            if (m.gamePort != null && m.hasOwnProperty("gamePort")) {
                d.gamePort = m.gamePort;
            }
            if (m.basePort != null && m.hasOwnProperty("basePort")) {
                d.basePort = m.basePort;
            }
            return d;
        };

        PortSet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PortSet;
    })();

    SC2APIProtocol.ResponseJoinGame = (function() {

        function ResponseJoinGame(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseJoinGame.prototype.playerId = 0;
        ResponseJoinGame.prototype.error = 1;
        ResponseJoinGame.prototype.errorDetails = "";

        ResponseJoinGame.create = function create(properties) {
            return new ResponseJoinGame(properties);
        };

        ResponseJoinGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                w.uint32(8).uint32(m.playerId);
            if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                w.uint32(16).int32(m.error);
            if (m.errorDetails != null && Object.hasOwnProperty.call(m, "errorDetails"))
                w.uint32(26).string(m.errorDetails);
            return w;
        };

        ResponseJoinGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseJoinGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseJoinGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerId = r.uint32();
                    break;
                case 2:
                    m.error = r.int32();
                    break;
                case 3:
                    m.errorDetails = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseJoinGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseJoinGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                if (!$util.isInteger(m.playerId))
                    return "playerId: integer expected";
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                switch (m.error) {
                default:
                    return "error: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                    break;
                }
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                if (!$util.isString(m.errorDetails))
                    return "errorDetails: string expected";
            }
            return null;
        };

        ResponseJoinGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseJoinGame)
                return d;
            var m = new $root.SC2APIProtocol.ResponseJoinGame();
            if (d.playerId != null) {
                m.playerId = d.playerId >>> 0;
            }
            switch (d.error) {
            case "MissingParticipation":
            case 1:
                m.error = 1;
                break;
            case "InvalidObservedPlayerId":
            case 2:
                m.error = 2;
                break;
            case "MissingOptions":
            case 3:
                m.error = 3;
                break;
            case "MissingPorts":
            case 4:
                m.error = 4;
                break;
            case "GameFull":
            case 5:
                m.error = 5;
                break;
            case "LaunchError":
            case 6:
                m.error = 6;
                break;
            case "FeatureUnsupported":
            case 7:
                m.error = 7;
                break;
            case "NoSpaceForUser":
            case 8:
                m.error = 8;
                break;
            case "MapDoesNotExist":
            case 9:
                m.error = 9;
                break;
            case "CannotOpenMap":
            case 10:
                m.error = 10;
                break;
            case "ChecksumError":
            case 11:
                m.error = 11;
                break;
            case "NetworkError":
            case 12:
                m.error = 12;
                break;
            case "OtherError":
            case 13:
                m.error = 13;
                break;
            }
            if (d.errorDetails != null) {
                m.errorDetails = String(d.errorDetails);
            }
            return m;
        };

        ResponseJoinGame.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.playerId = 0;
                d.error = o.enums === String ? "MissingParticipation" : 1;
                d.errorDetails = "";
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = m.playerId;
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                d.error = o.enums === String ? $root.SC2APIProtocol.ResponseJoinGame.Error[m.error] : m.error;
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                d.errorDetails = m.errorDetails;
            }
            return d;
        };

        ResponseJoinGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ResponseJoinGame.Error = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "MissingParticipation"] = 1;
            values[valuesById[2] = "InvalidObservedPlayerId"] = 2;
            values[valuesById[3] = "MissingOptions"] = 3;
            values[valuesById[4] = "MissingPorts"] = 4;
            values[valuesById[5] = "GameFull"] = 5;
            values[valuesById[6] = "LaunchError"] = 6;
            values[valuesById[7] = "FeatureUnsupported"] = 7;
            values[valuesById[8] = "NoSpaceForUser"] = 8;
            values[valuesById[9] = "MapDoesNotExist"] = 9;
            values[valuesById[10] = "CannotOpenMap"] = 10;
            values[valuesById[11] = "ChecksumError"] = 11;
            values[valuesById[12] = "NetworkError"] = 12;
            values[valuesById[13] = "OtherError"] = 13;
            return values;
        })();

        return ResponseJoinGame;
    })();

    SC2APIProtocol.RequestRestartGame = (function() {

        function RequestRestartGame(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestRestartGame.create = function create(properties) {
            return new RequestRestartGame(properties);
        };

        RequestRestartGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestRestartGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestRestartGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestRestartGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestRestartGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestRestartGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestRestartGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestRestartGame)
                return d;
            return new $root.SC2APIProtocol.RequestRestartGame();
        };

        RequestRestartGame.toObject = function toObject() {
            return {};
        };

        RequestRestartGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestRestartGame;
    })();

    SC2APIProtocol.ResponseRestartGame = (function() {

        function ResponseRestartGame(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseRestartGame.prototype.error = 1;
        ResponseRestartGame.prototype.errorDetails = "";
        ResponseRestartGame.prototype.needHardReset = false;

        ResponseRestartGame.create = function create(properties) {
            return new ResponseRestartGame(properties);
        };

        ResponseRestartGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                w.uint32(8).int32(m.error);
            if (m.errorDetails != null && Object.hasOwnProperty.call(m, "errorDetails"))
                w.uint32(18).string(m.errorDetails);
            if (m.needHardReset != null && Object.hasOwnProperty.call(m, "needHardReset"))
                w.uint32(24).bool(m.needHardReset);
            return w;
        };

        ResponseRestartGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseRestartGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseRestartGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.error = r.int32();
                    break;
                case 2:
                    m.errorDetails = r.string();
                    break;
                case 3:
                    m.needHardReset = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseRestartGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseRestartGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.error != null && m.hasOwnProperty("error")) {
                switch (m.error) {
                default:
                    return "error: enum value expected";
                case 1:
                    break;
                }
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                if (!$util.isString(m.errorDetails))
                    return "errorDetails: string expected";
            }
            if (m.needHardReset != null && m.hasOwnProperty("needHardReset")) {
                if (typeof m.needHardReset !== "boolean")
                    return "needHardReset: boolean expected";
            }
            return null;
        };

        ResponseRestartGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseRestartGame)
                return d;
            var m = new $root.SC2APIProtocol.ResponseRestartGame();
            switch (d.error) {
            case "LaunchError":
            case 1:
                m.error = 1;
                break;
            }
            if (d.errorDetails != null) {
                m.errorDetails = String(d.errorDetails);
            }
            if (d.needHardReset != null) {
                m.needHardReset = Boolean(d.needHardReset);
            }
            return m;
        };

        ResponseRestartGame.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.error = o.enums === String ? "LaunchError" : 1;
                d.errorDetails = "";
                d.needHardReset = false;
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                d.error = o.enums === String ? $root.SC2APIProtocol.ResponseRestartGame.Error[m.error] : m.error;
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                d.errorDetails = m.errorDetails;
            }
            if (m.needHardReset != null && m.hasOwnProperty("needHardReset")) {
                d.needHardReset = m.needHardReset;
            }
            return d;
        };

        ResponseRestartGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ResponseRestartGame.Error = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "LaunchError"] = 1;
            return values;
        })();

        return ResponseRestartGame;
    })();

    SC2APIProtocol.RequestStartReplay = (function() {

        function RequestStartReplay(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestStartReplay.prototype.replayPath = "";
        RequestStartReplay.prototype.replayData = $util.newBuffer([]);
        RequestStartReplay.prototype.mapData = $util.newBuffer([]);
        RequestStartReplay.prototype.observedPlayerId = 0;
        RequestStartReplay.prototype.options = null;
        RequestStartReplay.prototype.disableFog = false;
        RequestStartReplay.prototype.realtime = false;
        RequestStartReplay.prototype.recordReplay = false;

        var $oneOfFields;

        Object.defineProperty(RequestStartReplay.prototype, "replay", {
            get: $util.oneOfGetter($oneOfFields = ["replayPath", "replayData"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        RequestStartReplay.create = function create(properties) {
            return new RequestStartReplay(properties);
        };

        RequestStartReplay.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.replayPath != null && Object.hasOwnProperty.call(m, "replayPath"))
                w.uint32(10).string(m.replayPath);
            if (m.observedPlayerId != null && Object.hasOwnProperty.call(m, "observedPlayerId"))
                w.uint32(16).int32(m.observedPlayerId);
            if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                $root.SC2APIProtocol.InterfaceOptions.encode(m.options, w.uint32(26).fork()).ldelim();
            if (m.disableFog != null && Object.hasOwnProperty.call(m, "disableFog"))
                w.uint32(32).bool(m.disableFog);
            if (m.replayData != null && Object.hasOwnProperty.call(m, "replayData"))
                w.uint32(42).bytes(m.replayData);
            if (m.mapData != null && Object.hasOwnProperty.call(m, "mapData"))
                w.uint32(50).bytes(m.mapData);
            if (m.realtime != null && Object.hasOwnProperty.call(m, "realtime"))
                w.uint32(56).bool(m.realtime);
            if (m.recordReplay != null && Object.hasOwnProperty.call(m, "recordReplay"))
                w.uint32(64).bool(m.recordReplay);
            return w;
        };

        RequestStartReplay.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestStartReplay.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestStartReplay();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.replayPath = r.string();
                    break;
                case 5:
                    m.replayData = r.bytes();
                    break;
                case 6:
                    m.mapData = r.bytes();
                    break;
                case 2:
                    m.observedPlayerId = r.int32();
                    break;
                case 3:
                    m.options = $root.SC2APIProtocol.InterfaceOptions.decode(r, r.uint32());
                    break;
                case 4:
                    m.disableFog = r.bool();
                    break;
                case 7:
                    m.realtime = r.bool();
                    break;
                case 8:
                    m.recordReplay = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestStartReplay.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestStartReplay.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.replayPath != null && m.hasOwnProperty("replayPath")) {
                p.replay = 1;
                if (!$util.isString(m.replayPath))
                    return "replayPath: string expected";
            }
            if (m.replayData != null && m.hasOwnProperty("replayData")) {
                if (p.replay === 1)
                    return "replay: multiple values";
                p.replay = 1;
                if (!(m.replayData && typeof m.replayData.length === "number" || $util.isString(m.replayData)))
                    return "replayData: buffer expected";
            }
            if (m.mapData != null && m.hasOwnProperty("mapData")) {
                if (!(m.mapData && typeof m.mapData.length === "number" || $util.isString(m.mapData)))
                    return "mapData: buffer expected";
            }
            if (m.observedPlayerId != null && m.hasOwnProperty("observedPlayerId")) {
                if (!$util.isInteger(m.observedPlayerId))
                    return "observedPlayerId: integer expected";
            }
            if (m.options != null && m.hasOwnProperty("options")) {
                {
                    var e = $root.SC2APIProtocol.InterfaceOptions.verify(m.options);
                    if (e)
                        return "options." + e;
                }
            }
            if (m.disableFog != null && m.hasOwnProperty("disableFog")) {
                if (typeof m.disableFog !== "boolean")
                    return "disableFog: boolean expected";
            }
            if (m.realtime != null && m.hasOwnProperty("realtime")) {
                if (typeof m.realtime !== "boolean")
                    return "realtime: boolean expected";
            }
            if (m.recordReplay != null && m.hasOwnProperty("recordReplay")) {
                if (typeof m.recordReplay !== "boolean")
                    return "recordReplay: boolean expected";
            }
            return null;
        };

        RequestStartReplay.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestStartReplay)
                return d;
            var m = new $root.SC2APIProtocol.RequestStartReplay();
            if (d.replayPath != null) {
                m.replayPath = String(d.replayPath);
            }
            if (d.replayData != null) {
                if (typeof d.replayData === "string")
                    $util.base64.decode(d.replayData, m.replayData = $util.newBuffer($util.base64.length(d.replayData)), 0);
                else if (d.replayData.length)
                    m.replayData = d.replayData;
            }
            if (d.mapData != null) {
                if (typeof d.mapData === "string")
                    $util.base64.decode(d.mapData, m.mapData = $util.newBuffer($util.base64.length(d.mapData)), 0);
                else if (d.mapData.length)
                    m.mapData = d.mapData;
            }
            if (d.observedPlayerId != null) {
                m.observedPlayerId = d.observedPlayerId | 0;
            }
            if (d.options != null) {
                if (typeof d.options !== "object")
                    throw TypeError(".SC2APIProtocol.RequestStartReplay.options: object expected");
                m.options = $root.SC2APIProtocol.InterfaceOptions.fromObject(d.options);
            }
            if (d.disableFog != null) {
                m.disableFog = Boolean(d.disableFog);
            }
            if (d.realtime != null) {
                m.realtime = Boolean(d.realtime);
            }
            if (d.recordReplay != null) {
                m.recordReplay = Boolean(d.recordReplay);
            }
            return m;
        };

        RequestStartReplay.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.observedPlayerId = 0;
                d.options = null;
                d.disableFog = false;
                if (o.bytes === String)
                    d.mapData = "";
                else {
                    d.mapData = [];
                    if (o.bytes !== Array)
                        d.mapData = $util.newBuffer(d.mapData);
                }
                d.realtime = false;
                d.recordReplay = false;
            }
            if (m.replayPath != null && m.hasOwnProperty("replayPath")) {
                d.replayPath = m.replayPath;
                if (o.oneofs)
                    d.replay = "replayPath";
            }
            if (m.observedPlayerId != null && m.hasOwnProperty("observedPlayerId")) {
                d.observedPlayerId = m.observedPlayerId;
            }
            if (m.options != null && m.hasOwnProperty("options")) {
                d.options = $root.SC2APIProtocol.InterfaceOptions.toObject(m.options, o);
            }
            if (m.disableFog != null && m.hasOwnProperty("disableFog")) {
                d.disableFog = m.disableFog;
            }
            if (m.replayData != null && m.hasOwnProperty("replayData")) {
                d.replayData = o.bytes === String ? $util.base64.encode(m.replayData, 0, m.replayData.length) : o.bytes === Array ? Array.prototype.slice.call(m.replayData) : m.replayData;
                if (o.oneofs)
                    d.replay = "replayData";
            }
            if (m.mapData != null && m.hasOwnProperty("mapData")) {
                d.mapData = o.bytes === String ? $util.base64.encode(m.mapData, 0, m.mapData.length) : o.bytes === Array ? Array.prototype.slice.call(m.mapData) : m.mapData;
            }
            if (m.realtime != null && m.hasOwnProperty("realtime")) {
                d.realtime = m.realtime;
            }
            if (m.recordReplay != null && m.hasOwnProperty("recordReplay")) {
                d.recordReplay = m.recordReplay;
            }
            return d;
        };

        RequestStartReplay.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestStartReplay;
    })();

    SC2APIProtocol.ResponseStartReplay = (function() {

        function ResponseStartReplay(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseStartReplay.prototype.error = 1;
        ResponseStartReplay.prototype.errorDetails = "";

        ResponseStartReplay.create = function create(properties) {
            return new ResponseStartReplay(properties);
        };

        ResponseStartReplay.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                w.uint32(8).int32(m.error);
            if (m.errorDetails != null && Object.hasOwnProperty.call(m, "errorDetails"))
                w.uint32(18).string(m.errorDetails);
            return w;
        };

        ResponseStartReplay.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseStartReplay.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseStartReplay();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.error = r.int32();
                    break;
                case 2:
                    m.errorDetails = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseStartReplay.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseStartReplay.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.error != null && m.hasOwnProperty("error")) {
                switch (m.error) {
                default:
                    return "error: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                if (!$util.isString(m.errorDetails))
                    return "errorDetails: string expected";
            }
            return null;
        };

        ResponseStartReplay.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseStartReplay)
                return d;
            var m = new $root.SC2APIProtocol.ResponseStartReplay();
            switch (d.error) {
            case "MissingReplay":
            case 1:
                m.error = 1;
                break;
            case "InvalidReplayPath":
            case 2:
                m.error = 2;
                break;
            case "InvalidReplayData":
            case 3:
                m.error = 3;
                break;
            case "InvalidMapData":
            case 4:
                m.error = 4;
                break;
            case "InvalidObservedPlayerId":
            case 5:
                m.error = 5;
                break;
            case "MissingOptions":
            case 6:
                m.error = 6;
                break;
            case "LaunchError":
            case 7:
                m.error = 7;
                break;
            }
            if (d.errorDetails != null) {
                m.errorDetails = String(d.errorDetails);
            }
            return m;
        };

        ResponseStartReplay.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.error = o.enums === String ? "MissingReplay" : 1;
                d.errorDetails = "";
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                d.error = o.enums === String ? $root.SC2APIProtocol.ResponseStartReplay.Error[m.error] : m.error;
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                d.errorDetails = m.errorDetails;
            }
            return d;
        };

        ResponseStartReplay.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ResponseStartReplay.Error = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "MissingReplay"] = 1;
            values[valuesById[2] = "InvalidReplayPath"] = 2;
            values[valuesById[3] = "InvalidReplayData"] = 3;
            values[valuesById[4] = "InvalidMapData"] = 4;
            values[valuesById[5] = "InvalidObservedPlayerId"] = 5;
            values[valuesById[6] = "MissingOptions"] = 6;
            values[valuesById[7] = "LaunchError"] = 7;
            return values;
        })();

        return ResponseStartReplay;
    })();

    SC2APIProtocol.RequestMapCommand = (function() {

        function RequestMapCommand(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestMapCommand.prototype.triggerCmd = "";

        RequestMapCommand.create = function create(properties) {
            return new RequestMapCommand(properties);
        };

        RequestMapCommand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.triggerCmd != null && Object.hasOwnProperty.call(m, "triggerCmd"))
                w.uint32(10).string(m.triggerCmd);
            return w;
        };

        RequestMapCommand.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestMapCommand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestMapCommand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.triggerCmd = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestMapCommand.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestMapCommand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.triggerCmd != null && m.hasOwnProperty("triggerCmd")) {
                if (!$util.isString(m.triggerCmd))
                    return "triggerCmd: string expected";
            }
            return null;
        };

        RequestMapCommand.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestMapCommand)
                return d;
            var m = new $root.SC2APIProtocol.RequestMapCommand();
            if (d.triggerCmd != null) {
                m.triggerCmd = String(d.triggerCmd);
            }
            return m;
        };

        RequestMapCommand.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.triggerCmd = "";
            }
            if (m.triggerCmd != null && m.hasOwnProperty("triggerCmd")) {
                d.triggerCmd = m.triggerCmd;
            }
            return d;
        };

        RequestMapCommand.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestMapCommand;
    })();

    SC2APIProtocol.ResponseMapCommand = (function() {

        function ResponseMapCommand(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseMapCommand.prototype.error = 1;
        ResponseMapCommand.prototype.errorDetails = "";

        ResponseMapCommand.create = function create(properties) {
            return new ResponseMapCommand(properties);
        };

        ResponseMapCommand.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                w.uint32(8).int32(m.error);
            if (m.errorDetails != null && Object.hasOwnProperty.call(m, "errorDetails"))
                w.uint32(18).string(m.errorDetails);
            return w;
        };

        ResponseMapCommand.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseMapCommand.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseMapCommand();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.error = r.int32();
                    break;
                case 2:
                    m.errorDetails = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseMapCommand.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseMapCommand.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.error != null && m.hasOwnProperty("error")) {
                switch (m.error) {
                default:
                    return "error: enum value expected";
                case 1:
                    break;
                }
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                if (!$util.isString(m.errorDetails))
                    return "errorDetails: string expected";
            }
            return null;
        };

        ResponseMapCommand.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseMapCommand)
                return d;
            var m = new $root.SC2APIProtocol.ResponseMapCommand();
            switch (d.error) {
            case "NoTriggerError":
            case 1:
                m.error = 1;
                break;
            }
            if (d.errorDetails != null) {
                m.errorDetails = String(d.errorDetails);
            }
            return m;
        };

        ResponseMapCommand.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.error = o.enums === String ? "NoTriggerError" : 1;
                d.errorDetails = "";
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                d.error = o.enums === String ? $root.SC2APIProtocol.ResponseMapCommand.Error[m.error] : m.error;
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                d.errorDetails = m.errorDetails;
            }
            return d;
        };

        ResponseMapCommand.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ResponseMapCommand.Error = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "NoTriggerError"] = 1;
            return values;
        })();

        return ResponseMapCommand;
    })();

    SC2APIProtocol.RequestLeaveGame = (function() {

        function RequestLeaveGame(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestLeaveGame.create = function create(properties) {
            return new RequestLeaveGame(properties);
        };

        RequestLeaveGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestLeaveGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestLeaveGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestLeaveGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestLeaveGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestLeaveGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestLeaveGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestLeaveGame)
                return d;
            return new $root.SC2APIProtocol.RequestLeaveGame();
        };

        RequestLeaveGame.toObject = function toObject() {
            return {};
        };

        RequestLeaveGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLeaveGame;
    })();

    SC2APIProtocol.ResponseLeaveGame = (function() {

        function ResponseLeaveGame(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseLeaveGame.create = function create(properties) {
            return new ResponseLeaveGame(properties);
        };

        ResponseLeaveGame.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        ResponseLeaveGame.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseLeaveGame.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseLeaveGame();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseLeaveGame.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseLeaveGame.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        ResponseLeaveGame.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseLeaveGame)
                return d;
            return new $root.SC2APIProtocol.ResponseLeaveGame();
        };

        ResponseLeaveGame.toObject = function toObject() {
            return {};
        };

        ResponseLeaveGame.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseLeaveGame;
    })();

    SC2APIProtocol.RequestQuickSave = (function() {

        function RequestQuickSave(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestQuickSave.create = function create(properties) {
            return new RequestQuickSave(properties);
        };

        RequestQuickSave.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestQuickSave.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestQuickSave.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestQuickSave();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestQuickSave.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestQuickSave.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestQuickSave.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestQuickSave)
                return d;
            return new $root.SC2APIProtocol.RequestQuickSave();
        };

        RequestQuickSave.toObject = function toObject() {
            return {};
        };

        RequestQuickSave.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestQuickSave;
    })();

    SC2APIProtocol.ResponseQuickSave = (function() {

        function ResponseQuickSave(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseQuickSave.create = function create(properties) {
            return new ResponseQuickSave(properties);
        };

        ResponseQuickSave.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        ResponseQuickSave.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseQuickSave.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseQuickSave();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseQuickSave.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseQuickSave.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        ResponseQuickSave.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseQuickSave)
                return d;
            return new $root.SC2APIProtocol.ResponseQuickSave();
        };

        ResponseQuickSave.toObject = function toObject() {
            return {};
        };

        ResponseQuickSave.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseQuickSave;
    })();

    SC2APIProtocol.RequestQuickLoad = (function() {

        function RequestQuickLoad(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestQuickLoad.create = function create(properties) {
            return new RequestQuickLoad(properties);
        };

        RequestQuickLoad.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestQuickLoad.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestQuickLoad.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestQuickLoad();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestQuickLoad.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestQuickLoad.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestQuickLoad.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestQuickLoad)
                return d;
            return new $root.SC2APIProtocol.RequestQuickLoad();
        };

        RequestQuickLoad.toObject = function toObject() {
            return {};
        };

        RequestQuickLoad.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestQuickLoad;
    })();

    SC2APIProtocol.ResponseQuickLoad = (function() {

        function ResponseQuickLoad(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseQuickLoad.create = function create(properties) {
            return new ResponseQuickLoad(properties);
        };

        ResponseQuickLoad.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        ResponseQuickLoad.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseQuickLoad.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseQuickLoad();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseQuickLoad.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseQuickLoad.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        ResponseQuickLoad.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseQuickLoad)
                return d;
            return new $root.SC2APIProtocol.ResponseQuickLoad();
        };

        ResponseQuickLoad.toObject = function toObject() {
            return {};
        };

        ResponseQuickLoad.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseQuickLoad;
    })();

    SC2APIProtocol.RequestQuit = (function() {

        function RequestQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestQuit.create = function create(properties) {
            return new RequestQuit(properties);
        };

        RequestQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestQuit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestQuit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestQuit.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestQuit)
                return d;
            return new $root.SC2APIProtocol.RequestQuit();
        };

        RequestQuit.toObject = function toObject() {
            return {};
        };

        RequestQuit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestQuit;
    })();

    SC2APIProtocol.ResponseQuit = (function() {

        function ResponseQuit(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseQuit.create = function create(properties) {
            return new ResponseQuit(properties);
        };

        ResponseQuit.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        ResponseQuit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseQuit.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseQuit();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseQuit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseQuit.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        ResponseQuit.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseQuit)
                return d;
            return new $root.SC2APIProtocol.ResponseQuit();
        };

        ResponseQuit.toObject = function toObject() {
            return {};
        };

        ResponseQuit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseQuit;
    })();

    SC2APIProtocol.RequestGameInfo = (function() {

        function RequestGameInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestGameInfo.create = function create(properties) {
            return new RequestGameInfo(properties);
        };

        RequestGameInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestGameInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestGameInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestGameInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestGameInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestGameInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestGameInfo.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestGameInfo)
                return d;
            return new $root.SC2APIProtocol.RequestGameInfo();
        };

        RequestGameInfo.toObject = function toObject() {
            return {};
        };

        RequestGameInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGameInfo;
    })();

    SC2APIProtocol.ResponseGameInfo = (function() {

        function ResponseGameInfo(p) {
            this.modNames = [];
            this.playerInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseGameInfo.prototype.mapName = "";
        ResponseGameInfo.prototype.modNames = $util.emptyArray;
        ResponseGameInfo.prototype.localMapPath = "";
        ResponseGameInfo.prototype.playerInfo = $util.emptyArray;
        ResponseGameInfo.prototype.startRaw = null;
        ResponseGameInfo.prototype.options = null;

        ResponseGameInfo.create = function create(properties) {
            return new ResponseGameInfo(properties);
        };

        ResponseGameInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mapName != null && Object.hasOwnProperty.call(m, "mapName"))
                w.uint32(10).string(m.mapName);
            if (m.localMapPath != null && Object.hasOwnProperty.call(m, "localMapPath"))
                w.uint32(18).string(m.localMapPath);
            if (m.playerInfo != null && m.playerInfo.length) {
                for (var i = 0; i < m.playerInfo.length; ++i)
                    $root.SC2APIProtocol.PlayerInfo.encode(m.playerInfo[i], w.uint32(26).fork()).ldelim();
            }
            if (m.startRaw != null && Object.hasOwnProperty.call(m, "startRaw"))
                $root.SC2APIProtocol.StartRaw.encode(m.startRaw, w.uint32(34).fork()).ldelim();
            if (m.options != null && Object.hasOwnProperty.call(m, "options"))
                $root.SC2APIProtocol.InterfaceOptions.encode(m.options, w.uint32(42).fork()).ldelim();
            if (m.modNames != null && m.modNames.length) {
                for (var i = 0; i < m.modNames.length; ++i)
                    w.uint32(50).string(m.modNames[i]);
            }
            return w;
        };

        ResponseGameInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseGameInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseGameInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.mapName = r.string();
                    break;
                case 6:
                    if (!(m.modNames && m.modNames.length))
                        m.modNames = [];
                    m.modNames.push(r.string());
                    break;
                case 2:
                    m.localMapPath = r.string();
                    break;
                case 3:
                    if (!(m.playerInfo && m.playerInfo.length))
                        m.playerInfo = [];
                    m.playerInfo.push($root.SC2APIProtocol.PlayerInfo.decode(r, r.uint32()));
                    break;
                case 4:
                    m.startRaw = $root.SC2APIProtocol.StartRaw.decode(r, r.uint32());
                    break;
                case 5:
                    m.options = $root.SC2APIProtocol.InterfaceOptions.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseGameInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseGameInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.mapName != null && m.hasOwnProperty("mapName")) {
                if (!$util.isString(m.mapName))
                    return "mapName: string expected";
            }
            if (m.modNames != null && m.hasOwnProperty("modNames")) {
                if (!Array.isArray(m.modNames))
                    return "modNames: array expected";
                for (var i = 0; i < m.modNames.length; ++i) {
                    if (!$util.isString(m.modNames[i]))
                        return "modNames: string[] expected";
                }
            }
            if (m.localMapPath != null && m.hasOwnProperty("localMapPath")) {
                if (!$util.isString(m.localMapPath))
                    return "localMapPath: string expected";
            }
            if (m.playerInfo != null && m.hasOwnProperty("playerInfo")) {
                if (!Array.isArray(m.playerInfo))
                    return "playerInfo: array expected";
                for (var i = 0; i < m.playerInfo.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.PlayerInfo.verify(m.playerInfo[i]);
                        if (e)
                            return "playerInfo." + e;
                    }
                }
            }
            if (m.startRaw != null && m.hasOwnProperty("startRaw")) {
                {
                    var e = $root.SC2APIProtocol.StartRaw.verify(m.startRaw);
                    if (e)
                        return "startRaw." + e;
                }
            }
            if (m.options != null && m.hasOwnProperty("options")) {
                {
                    var e = $root.SC2APIProtocol.InterfaceOptions.verify(m.options);
                    if (e)
                        return "options." + e;
                }
            }
            return null;
        };

        ResponseGameInfo.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseGameInfo)
                return d;
            var m = new $root.SC2APIProtocol.ResponseGameInfo();
            if (d.mapName != null) {
                m.mapName = String(d.mapName);
            }
            if (d.modNames) {
                if (!Array.isArray(d.modNames))
                    throw TypeError(".SC2APIProtocol.ResponseGameInfo.modNames: array expected");
                m.modNames = [];
                for (var i = 0; i < d.modNames.length; ++i) {
                    m.modNames[i] = String(d.modNames[i]);
                }
            }
            if (d.localMapPath != null) {
                m.localMapPath = String(d.localMapPath);
            }
            if (d.playerInfo) {
                if (!Array.isArray(d.playerInfo))
                    throw TypeError(".SC2APIProtocol.ResponseGameInfo.playerInfo: array expected");
                m.playerInfo = [];
                for (var i = 0; i < d.playerInfo.length; ++i) {
                    if (typeof d.playerInfo[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseGameInfo.playerInfo: object expected");
                    m.playerInfo[i] = $root.SC2APIProtocol.PlayerInfo.fromObject(d.playerInfo[i]);
                }
            }
            if (d.startRaw != null) {
                if (typeof d.startRaw !== "object")
                    throw TypeError(".SC2APIProtocol.ResponseGameInfo.startRaw: object expected");
                m.startRaw = $root.SC2APIProtocol.StartRaw.fromObject(d.startRaw);
            }
            if (d.options != null) {
                if (typeof d.options !== "object")
                    throw TypeError(".SC2APIProtocol.ResponseGameInfo.options: object expected");
                m.options = $root.SC2APIProtocol.InterfaceOptions.fromObject(d.options);
            }
            return m;
        };

        ResponseGameInfo.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.playerInfo = [];
                d.modNames = [];
            }
            if (o.defaults) {
                d.mapName = "";
                d.localMapPath = "";
                d.startRaw = null;
                d.options = null;
            }
            if (m.mapName != null && m.hasOwnProperty("mapName")) {
                d.mapName = m.mapName;
            }
            if (m.localMapPath != null && m.hasOwnProperty("localMapPath")) {
                d.localMapPath = m.localMapPath;
            }
            if (m.playerInfo && m.playerInfo.length) {
                d.playerInfo = [];
                for (var j = 0; j < m.playerInfo.length; ++j) {
                    d.playerInfo[j] = $root.SC2APIProtocol.PlayerInfo.toObject(m.playerInfo[j], o);
                }
            }
            if (m.startRaw != null && m.hasOwnProperty("startRaw")) {
                d.startRaw = $root.SC2APIProtocol.StartRaw.toObject(m.startRaw, o);
            }
            if (m.options != null && m.hasOwnProperty("options")) {
                d.options = $root.SC2APIProtocol.InterfaceOptions.toObject(m.options, o);
            }
            if (m.modNames && m.modNames.length) {
                d.modNames = [];
                for (var j = 0; j < m.modNames.length; ++j) {
                    d.modNames[j] = m.modNames[j];
                }
            }
            return d;
        };

        ResponseGameInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseGameInfo;
    })();

    SC2APIProtocol.RequestObservation = (function() {

        function RequestObservation(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestObservation.prototype.disableFog = false;
        RequestObservation.prototype.gameLoop = 0;

        RequestObservation.create = function create(properties) {
            return new RequestObservation(properties);
        };

        RequestObservation.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.disableFog != null && Object.hasOwnProperty.call(m, "disableFog"))
                w.uint32(8).bool(m.disableFog);
            if (m.gameLoop != null && Object.hasOwnProperty.call(m, "gameLoop"))
                w.uint32(16).uint32(m.gameLoop);
            return w;
        };

        RequestObservation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestObservation.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestObservation();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.disableFog = r.bool();
                    break;
                case 2:
                    m.gameLoop = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestObservation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestObservation.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.disableFog != null && m.hasOwnProperty("disableFog")) {
                if (typeof m.disableFog !== "boolean")
                    return "disableFog: boolean expected";
            }
            if (m.gameLoop != null && m.hasOwnProperty("gameLoop")) {
                if (!$util.isInteger(m.gameLoop))
                    return "gameLoop: integer expected";
            }
            return null;
        };

        RequestObservation.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestObservation)
                return d;
            var m = new $root.SC2APIProtocol.RequestObservation();
            if (d.disableFog != null) {
                m.disableFog = Boolean(d.disableFog);
            }
            if (d.gameLoop != null) {
                m.gameLoop = d.gameLoop >>> 0;
            }
            return m;
        };

        RequestObservation.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.disableFog = false;
                d.gameLoop = 0;
            }
            if (m.disableFog != null && m.hasOwnProperty("disableFog")) {
                d.disableFog = m.disableFog;
            }
            if (m.gameLoop != null && m.hasOwnProperty("gameLoop")) {
                d.gameLoop = m.gameLoop;
            }
            return d;
        };

        RequestObservation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestObservation;
    })();

    SC2APIProtocol.ResponseObservation = (function() {

        function ResponseObservation(p) {
            this.actions = [];
            this.actionErrors = [];
            this.playerResult = [];
            this.chat = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseObservation.prototype.actions = $util.emptyArray;
        ResponseObservation.prototype.actionErrors = $util.emptyArray;
        ResponseObservation.prototype.observation = null;
        ResponseObservation.prototype.playerResult = $util.emptyArray;
        ResponseObservation.prototype.chat = $util.emptyArray;

        ResponseObservation.create = function create(properties) {
            return new ResponseObservation(properties);
        };

        ResponseObservation.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.actions != null && m.actions.length) {
                for (var i = 0; i < m.actions.length; ++i)
                    $root.SC2APIProtocol.Action.encode(m.actions[i], w.uint32(10).fork()).ldelim();
            }
            if (m.actionErrors != null && m.actionErrors.length) {
                for (var i = 0; i < m.actionErrors.length; ++i)
                    $root.SC2APIProtocol.ActionError.encode(m.actionErrors[i], w.uint32(18).fork()).ldelim();
            }
            if (m.observation != null && Object.hasOwnProperty.call(m, "observation"))
                $root.SC2APIProtocol.Observation.encode(m.observation, w.uint32(26).fork()).ldelim();
            if (m.playerResult != null && m.playerResult.length) {
                for (var i = 0; i < m.playerResult.length; ++i)
                    $root.SC2APIProtocol.PlayerResult.encode(m.playerResult[i], w.uint32(34).fork()).ldelim();
            }
            if (m.chat != null && m.chat.length) {
                for (var i = 0; i < m.chat.length; ++i)
                    $root.SC2APIProtocol.ChatReceived.encode(m.chat[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        ResponseObservation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseObservation.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseObservation();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.actions && m.actions.length))
                        m.actions = [];
                    m.actions.push($root.SC2APIProtocol.Action.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.actionErrors && m.actionErrors.length))
                        m.actionErrors = [];
                    m.actionErrors.push($root.SC2APIProtocol.ActionError.decode(r, r.uint32()));
                    break;
                case 3:
                    m.observation = $root.SC2APIProtocol.Observation.decode(r, r.uint32());
                    break;
                case 4:
                    if (!(m.playerResult && m.playerResult.length))
                        m.playerResult = [];
                    m.playerResult.push($root.SC2APIProtocol.PlayerResult.decode(r, r.uint32()));
                    break;
                case 5:
                    if (!(m.chat && m.chat.length))
                        m.chat = [];
                    m.chat.push($root.SC2APIProtocol.ChatReceived.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseObservation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseObservation.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.actions != null && m.hasOwnProperty("actions")) {
                if (!Array.isArray(m.actions))
                    return "actions: array expected";
                for (var i = 0; i < m.actions.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.Action.verify(m.actions[i]);
                        if (e)
                            return "actions." + e;
                    }
                }
            }
            if (m.actionErrors != null && m.hasOwnProperty("actionErrors")) {
                if (!Array.isArray(m.actionErrors))
                    return "actionErrors: array expected";
                for (var i = 0; i < m.actionErrors.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.ActionError.verify(m.actionErrors[i]);
                        if (e)
                            return "actionErrors." + e;
                    }
                }
            }
            if (m.observation != null && m.hasOwnProperty("observation")) {
                {
                    var e = $root.SC2APIProtocol.Observation.verify(m.observation);
                    if (e)
                        return "observation." + e;
                }
            }
            if (m.playerResult != null && m.hasOwnProperty("playerResult")) {
                if (!Array.isArray(m.playerResult))
                    return "playerResult: array expected";
                for (var i = 0; i < m.playerResult.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.PlayerResult.verify(m.playerResult[i]);
                        if (e)
                            return "playerResult." + e;
                    }
                }
            }
            if (m.chat != null && m.hasOwnProperty("chat")) {
                if (!Array.isArray(m.chat))
                    return "chat: array expected";
                for (var i = 0; i < m.chat.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.ChatReceived.verify(m.chat[i]);
                        if (e)
                            return "chat." + e;
                    }
                }
            }
            return null;
        };

        ResponseObservation.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseObservation)
                return d;
            var m = new $root.SC2APIProtocol.ResponseObservation();
            if (d.actions) {
                if (!Array.isArray(d.actions))
                    throw TypeError(".SC2APIProtocol.ResponseObservation.actions: array expected");
                m.actions = [];
                for (var i = 0; i < d.actions.length; ++i) {
                    if (typeof d.actions[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseObservation.actions: object expected");
                    m.actions[i] = $root.SC2APIProtocol.Action.fromObject(d.actions[i]);
                }
            }
            if (d.actionErrors) {
                if (!Array.isArray(d.actionErrors))
                    throw TypeError(".SC2APIProtocol.ResponseObservation.actionErrors: array expected");
                m.actionErrors = [];
                for (var i = 0; i < d.actionErrors.length; ++i) {
                    if (typeof d.actionErrors[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseObservation.actionErrors: object expected");
                    m.actionErrors[i] = $root.SC2APIProtocol.ActionError.fromObject(d.actionErrors[i]);
                }
            }
            if (d.observation != null) {
                if (typeof d.observation !== "object")
                    throw TypeError(".SC2APIProtocol.ResponseObservation.observation: object expected");
                m.observation = $root.SC2APIProtocol.Observation.fromObject(d.observation);
            }
            if (d.playerResult) {
                if (!Array.isArray(d.playerResult))
                    throw TypeError(".SC2APIProtocol.ResponseObservation.playerResult: array expected");
                m.playerResult = [];
                for (var i = 0; i < d.playerResult.length; ++i) {
                    if (typeof d.playerResult[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseObservation.playerResult: object expected");
                    m.playerResult[i] = $root.SC2APIProtocol.PlayerResult.fromObject(d.playerResult[i]);
                }
            }
            if (d.chat) {
                if (!Array.isArray(d.chat))
                    throw TypeError(".SC2APIProtocol.ResponseObservation.chat: array expected");
                m.chat = [];
                for (var i = 0; i < d.chat.length; ++i) {
                    if (typeof d.chat[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseObservation.chat: object expected");
                    m.chat[i] = $root.SC2APIProtocol.ChatReceived.fromObject(d.chat[i]);
                }
            }
            return m;
        };

        ResponseObservation.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.actions = [];
                d.actionErrors = [];
                d.playerResult = [];
                d.chat = [];
            }
            if (o.defaults) {
                d.observation = null;
            }
            if (m.actions && m.actions.length) {
                d.actions = [];
                for (var j = 0; j < m.actions.length; ++j) {
                    d.actions[j] = $root.SC2APIProtocol.Action.toObject(m.actions[j], o);
                }
            }
            if (m.actionErrors && m.actionErrors.length) {
                d.actionErrors = [];
                for (var j = 0; j < m.actionErrors.length; ++j) {
                    d.actionErrors[j] = $root.SC2APIProtocol.ActionError.toObject(m.actionErrors[j], o);
                }
            }
            if (m.observation != null && m.hasOwnProperty("observation")) {
                d.observation = $root.SC2APIProtocol.Observation.toObject(m.observation, o);
            }
            if (m.playerResult && m.playerResult.length) {
                d.playerResult = [];
                for (var j = 0; j < m.playerResult.length; ++j) {
                    d.playerResult[j] = $root.SC2APIProtocol.PlayerResult.toObject(m.playerResult[j], o);
                }
            }
            if (m.chat && m.chat.length) {
                d.chat = [];
                for (var j = 0; j < m.chat.length; ++j) {
                    d.chat[j] = $root.SC2APIProtocol.ChatReceived.toObject(m.chat[j], o);
                }
            }
            return d;
        };

        ResponseObservation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseObservation;
    })();

    SC2APIProtocol.ChatReceived = (function() {

        function ChatReceived(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ChatReceived.prototype.playerId = 0;
        ChatReceived.prototype.message = "";

        ChatReceived.create = function create(properties) {
            return new ChatReceived(properties);
        };

        ChatReceived.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                w.uint32(8).uint32(m.playerId);
            if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                w.uint32(18).string(m.message);
            return w;
        };

        ChatReceived.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ChatReceived.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ChatReceived();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerId = r.uint32();
                    break;
                case 2:
                    m.message = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ChatReceived.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ChatReceived.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                if (!$util.isInteger(m.playerId))
                    return "playerId: integer expected";
            }
            if (m.message != null && m.hasOwnProperty("message")) {
                if (!$util.isString(m.message))
                    return "message: string expected";
            }
            return null;
        };

        ChatReceived.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ChatReceived)
                return d;
            var m = new $root.SC2APIProtocol.ChatReceived();
            if (d.playerId != null) {
                m.playerId = d.playerId >>> 0;
            }
            if (d.message != null) {
                m.message = String(d.message);
            }
            return m;
        };

        ChatReceived.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.playerId = 0;
                d.message = "";
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = m.playerId;
            }
            if (m.message != null && m.hasOwnProperty("message")) {
                d.message = m.message;
            }
            return d;
        };

        ChatReceived.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ChatReceived;
    })();

    SC2APIProtocol.RequestAction = (function() {

        function RequestAction(p) {
            this.actions = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestAction.prototype.actions = $util.emptyArray;

        RequestAction.create = function create(properties) {
            return new RequestAction(properties);
        };

        RequestAction.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.actions != null && m.actions.length) {
                for (var i = 0; i < m.actions.length; ++i)
                    $root.SC2APIProtocol.Action.encode(m.actions[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        RequestAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestAction.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestAction();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.actions && m.actions.length))
                        m.actions = [];
                    m.actions.push($root.SC2APIProtocol.Action.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestAction.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.actions != null && m.hasOwnProperty("actions")) {
                if (!Array.isArray(m.actions))
                    return "actions: array expected";
                for (var i = 0; i < m.actions.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.Action.verify(m.actions[i]);
                        if (e)
                            return "actions." + e;
                    }
                }
            }
            return null;
        };

        RequestAction.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestAction)
                return d;
            var m = new $root.SC2APIProtocol.RequestAction();
            if (d.actions) {
                if (!Array.isArray(d.actions))
                    throw TypeError(".SC2APIProtocol.RequestAction.actions: array expected");
                m.actions = [];
                for (var i = 0; i < d.actions.length; ++i) {
                    if (typeof d.actions[i] !== "object")
                        throw TypeError(".SC2APIProtocol.RequestAction.actions: object expected");
                    m.actions[i] = $root.SC2APIProtocol.Action.fromObject(d.actions[i]);
                }
            }
            return m;
        };

        RequestAction.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.actions = [];
            }
            if (m.actions && m.actions.length) {
                d.actions = [];
                for (var j = 0; j < m.actions.length; ++j) {
                    d.actions[j] = $root.SC2APIProtocol.Action.toObject(m.actions[j], o);
                }
            }
            return d;
        };

        RequestAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestAction;
    })();

    SC2APIProtocol.ResponseAction = (function() {

        function ResponseAction(p) {
            this.result = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseAction.prototype.result = $util.emptyArray;

        ResponseAction.create = function create(properties) {
            return new ResponseAction(properties);
        };

        ResponseAction.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.result != null && m.result.length) {
                for (var i = 0; i < m.result.length; ++i)
                    w.uint32(8).int32(m.result[i]);
            }
            return w;
        };

        ResponseAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseAction.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseAction();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.result && m.result.length))
                        m.result = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.result.push(r.int32());
                    } else
                        m.result.push(r.int32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseAction.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.result != null && m.hasOwnProperty("result")) {
                if (!Array.isArray(m.result))
                    return "result: array expected";
                for (var i = 0; i < m.result.length; ++i) {
                    switch (m.result[i]) {
                    default:
                        return "result: enum value[] expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                    case 181:
                    case 182:
                    case 183:
                    case 184:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 196:
                    case 197:
                    case 198:
                    case 199:
                    case 200:
                    case 201:
                    case 202:
                    case 203:
                    case 204:
                    case 205:
                    case 206:
                    case 207:
                    case 208:
                    case 209:
                    case 210:
                    case 211:
                    case 212:
                    case 213:
                    case 214:
                        break;
                    }
                }
            }
            return null;
        };

        ResponseAction.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseAction)
                return d;
            var m = new $root.SC2APIProtocol.ResponseAction();
            if (d.result) {
                if (!Array.isArray(d.result))
                    throw TypeError(".SC2APIProtocol.ResponseAction.result: array expected");
                m.result = [];
                for (var i = 0; i < d.result.length; ++i) {
                    switch (d.result[i]) {
                    default:
                    case "Success":
                    case 1:
                        m.result[i] = 1;
                        break;
                    case "NotSupported":
                    case 2:
                        m.result[i] = 2;
                        break;
                    case "Error":
                    case 3:
                        m.result[i] = 3;
                        break;
                    case "CantQueueThatOrder":
                    case 4:
                        m.result[i] = 4;
                        break;
                    case "Retry":
                    case 5:
                        m.result[i] = 5;
                        break;
                    case "Cooldown":
                    case 6:
                        m.result[i] = 6;
                        break;
                    case "QueueIsFull":
                    case 7:
                        m.result[i] = 7;
                        break;
                    case "RallyQueueIsFull":
                    case 8:
                        m.result[i] = 8;
                        break;
                    case "NotEnoughMinerals":
                    case 9:
                        m.result[i] = 9;
                        break;
                    case "NotEnoughVespene":
                    case 10:
                        m.result[i] = 10;
                        break;
                    case "NotEnoughTerrazine":
                    case 11:
                        m.result[i] = 11;
                        break;
                    case "NotEnoughCustom":
                    case 12:
                        m.result[i] = 12;
                        break;
                    case "NotEnoughFood":
                    case 13:
                        m.result[i] = 13;
                        break;
                    case "FoodUsageImpossible":
                    case 14:
                        m.result[i] = 14;
                        break;
                    case "NotEnoughLife":
                    case 15:
                        m.result[i] = 15;
                        break;
                    case "NotEnoughShields":
                    case 16:
                        m.result[i] = 16;
                        break;
                    case "NotEnoughEnergy":
                    case 17:
                        m.result[i] = 17;
                        break;
                    case "LifeSuppressed":
                    case 18:
                        m.result[i] = 18;
                        break;
                    case "ShieldsSuppressed":
                    case 19:
                        m.result[i] = 19;
                        break;
                    case "EnergySuppressed":
                    case 20:
                        m.result[i] = 20;
                        break;
                    case "NotEnoughCharges":
                    case 21:
                        m.result[i] = 21;
                        break;
                    case "CantAddMoreCharges":
                    case 22:
                        m.result[i] = 22;
                        break;
                    case "TooMuchMinerals":
                    case 23:
                        m.result[i] = 23;
                        break;
                    case "TooMuchVespene":
                    case 24:
                        m.result[i] = 24;
                        break;
                    case "TooMuchTerrazine":
                    case 25:
                        m.result[i] = 25;
                        break;
                    case "TooMuchCustom":
                    case 26:
                        m.result[i] = 26;
                        break;
                    case "TooMuchFood":
                    case 27:
                        m.result[i] = 27;
                        break;
                    case "TooMuchLife":
                    case 28:
                        m.result[i] = 28;
                        break;
                    case "TooMuchShields":
                    case 29:
                        m.result[i] = 29;
                        break;
                    case "TooMuchEnergy":
                    case 30:
                        m.result[i] = 30;
                        break;
                    case "MustTargetUnitWithLife":
                    case 31:
                        m.result[i] = 31;
                        break;
                    case "MustTargetUnitWithShields":
                    case 32:
                        m.result[i] = 32;
                        break;
                    case "MustTargetUnitWithEnergy":
                    case 33:
                        m.result[i] = 33;
                        break;
                    case "CantTrade":
                    case 34:
                        m.result[i] = 34;
                        break;
                    case "CantSpend":
                    case 35:
                        m.result[i] = 35;
                        break;
                    case "CantTargetThatUnit":
                    case 36:
                        m.result[i] = 36;
                        break;
                    case "CouldntAllocateUnit":
                    case 37:
                        m.result[i] = 37;
                        break;
                    case "UnitCantMove":
                    case 38:
                        m.result[i] = 38;
                        break;
                    case "TransportIsHoldingPosition":
                    case 39:
                        m.result[i] = 39;
                        break;
                    case "BuildTechRequirementsNotMet":
                    case 40:
                        m.result[i] = 40;
                        break;
                    case "CantFindPlacementLocation":
                    case 41:
                        m.result[i] = 41;
                        break;
                    case "CantBuildOnThat":
                    case 42:
                        m.result[i] = 42;
                        break;
                    case "CantBuildTooCloseToDropOff":
                    case 43:
                        m.result[i] = 43;
                        break;
                    case "CantBuildLocationInvalid":
                    case 44:
                        m.result[i] = 44;
                        break;
                    case "CantSeeBuildLocation":
                    case 45:
                        m.result[i] = 45;
                        break;
                    case "CantBuildTooCloseToCreepSource":
                    case 46:
                        m.result[i] = 46;
                        break;
                    case "CantBuildTooCloseToResources":
                    case 47:
                        m.result[i] = 47;
                        break;
                    case "CantBuildTooFarFromWater":
                    case 48:
                        m.result[i] = 48;
                        break;
                    case "CantBuildTooFarFromCreepSource":
                    case 49:
                        m.result[i] = 49;
                        break;
                    case "CantBuildTooFarFromBuildPowerSource":
                    case 50:
                        m.result[i] = 50;
                        break;
                    case "CantBuildOnDenseTerrain":
                    case 51:
                        m.result[i] = 51;
                        break;
                    case "CantTrainTooFarFromTrainPowerSource":
                    case 52:
                        m.result[i] = 52;
                        break;
                    case "CantLandLocationInvalid":
                    case 53:
                        m.result[i] = 53;
                        break;
                    case "CantSeeLandLocation":
                    case 54:
                        m.result[i] = 54;
                        break;
                    case "CantLandTooCloseToCreepSource":
                    case 55:
                        m.result[i] = 55;
                        break;
                    case "CantLandTooCloseToResources":
                    case 56:
                        m.result[i] = 56;
                        break;
                    case "CantLandTooFarFromWater":
                    case 57:
                        m.result[i] = 57;
                        break;
                    case "CantLandTooFarFromCreepSource":
                    case 58:
                        m.result[i] = 58;
                        break;
                    case "CantLandTooFarFromBuildPowerSource":
                    case 59:
                        m.result[i] = 59;
                        break;
                    case "CantLandTooFarFromTrainPowerSource":
                    case 60:
                        m.result[i] = 60;
                        break;
                    case "CantLandOnDenseTerrain":
                    case 61:
                        m.result[i] = 61;
                        break;
                    case "AddOnTooFarFromBuilding":
                    case 62:
                        m.result[i] = 62;
                        break;
                    case "MustBuildRefineryFirst":
                    case 63:
                        m.result[i] = 63;
                        break;
                    case "BuildingIsUnderConstruction":
                    case 64:
                        m.result[i] = 64;
                        break;
                    case "CantFindDropOff":
                    case 65:
                        m.result[i] = 65;
                        break;
                    case "CantLoadOtherPlayersUnits":
                    case 66:
                        m.result[i] = 66;
                        break;
                    case "NotEnoughRoomToLoadUnit":
                    case 67:
                        m.result[i] = 67;
                        break;
                    case "CantUnloadUnitsThere":
                    case 68:
                        m.result[i] = 68;
                        break;
                    case "CantWarpInUnitsThere":
                    case 69:
                        m.result[i] = 69;
                        break;
                    case "CantLoadImmobileUnits":
                    case 70:
                        m.result[i] = 70;
                        break;
                    case "CantRechargeImmobileUnits":
                    case 71:
                        m.result[i] = 71;
                        break;
                    case "CantRechargeUnderConstructionUnits":
                    case 72:
                        m.result[i] = 72;
                        break;
                    case "CantLoadThatUnit":
                    case 73:
                        m.result[i] = 73;
                        break;
                    case "NoCargoToUnload":
                    case 74:
                        m.result[i] = 74;
                        break;
                    case "LoadAllNoTargetsFound":
                    case 75:
                        m.result[i] = 75;
                        break;
                    case "NotWhileOccupied":
                    case 76:
                        m.result[i] = 76;
                        break;
                    case "CantAttackWithoutAmmo":
                    case 77:
                        m.result[i] = 77;
                        break;
                    case "CantHoldAnyMoreAmmo":
                    case 78:
                        m.result[i] = 78;
                        break;
                    case "TechRequirementsNotMet":
                    case 79:
                        m.result[i] = 79;
                        break;
                    case "MustLockdownUnitFirst":
                    case 80:
                        m.result[i] = 80;
                        break;
                    case "MustTargetUnit":
                    case 81:
                        m.result[i] = 81;
                        break;
                    case "MustTargetInventory":
                    case 82:
                        m.result[i] = 82;
                        break;
                    case "MustTargetVisibleUnit":
                    case 83:
                        m.result[i] = 83;
                        break;
                    case "MustTargetVisibleLocation":
                    case 84:
                        m.result[i] = 84;
                        break;
                    case "MustTargetWalkableLocation":
                    case 85:
                        m.result[i] = 85;
                        break;
                    case "MustTargetPawnableUnit":
                    case 86:
                        m.result[i] = 86;
                        break;
                    case "YouCantControlThatUnit":
                    case 87:
                        m.result[i] = 87;
                        break;
                    case "YouCantIssueCommandsToThatUnit":
                    case 88:
                        m.result[i] = 88;
                        break;
                    case "MustTargetResources":
                    case 89:
                        m.result[i] = 89;
                        break;
                    case "RequiresHealTarget":
                    case 90:
                        m.result[i] = 90;
                        break;
                    case "RequiresRepairTarget":
                    case 91:
                        m.result[i] = 91;
                        break;
                    case "NoItemsToDrop":
                    case 92:
                        m.result[i] = 92;
                        break;
                    case "CantHoldAnyMoreItems":
                    case 93:
                        m.result[i] = 93;
                        break;
                    case "CantHoldThat":
                    case 94:
                        m.result[i] = 94;
                        break;
                    case "TargetHasNoInventory":
                    case 95:
                        m.result[i] = 95;
                        break;
                    case "CantDropThisItem":
                    case 96:
                        m.result[i] = 96;
                        break;
                    case "CantMoveThisItem":
                    case 97:
                        m.result[i] = 97;
                        break;
                    case "CantPawnThisUnit":
                    case 98:
                        m.result[i] = 98;
                        break;
                    case "MustTargetCaster":
                    case 99:
                        m.result[i] = 99;
                        break;
                    case "CantTargetCaster":
                    case 100:
                        m.result[i] = 100;
                        break;
                    case "MustTargetOuter":
                    case 101:
                        m.result[i] = 101;
                        break;
                    case "CantTargetOuter":
                    case 102:
                        m.result[i] = 102;
                        break;
                    case "MustTargetYourOwnUnits":
                    case 103:
                        m.result[i] = 103;
                        break;
                    case "CantTargetYourOwnUnits":
                    case 104:
                        m.result[i] = 104;
                        break;
                    case "MustTargetFriendlyUnits":
                    case 105:
                        m.result[i] = 105;
                        break;
                    case "CantTargetFriendlyUnits":
                    case 106:
                        m.result[i] = 106;
                        break;
                    case "MustTargetNeutralUnits":
                    case 107:
                        m.result[i] = 107;
                        break;
                    case "CantTargetNeutralUnits":
                    case 108:
                        m.result[i] = 108;
                        break;
                    case "MustTargetEnemyUnits":
                    case 109:
                        m.result[i] = 109;
                        break;
                    case "CantTargetEnemyUnits":
                    case 110:
                        m.result[i] = 110;
                        break;
                    case "MustTargetAirUnits":
                    case 111:
                        m.result[i] = 111;
                        break;
                    case "CantTargetAirUnits":
                    case 112:
                        m.result[i] = 112;
                        break;
                    case "MustTargetGroundUnits":
                    case 113:
                        m.result[i] = 113;
                        break;
                    case "CantTargetGroundUnits":
                    case 114:
                        m.result[i] = 114;
                        break;
                    case "MustTargetStructures":
                    case 115:
                        m.result[i] = 115;
                        break;
                    case "CantTargetStructures":
                    case 116:
                        m.result[i] = 116;
                        break;
                    case "MustTargetLightUnits":
                    case 117:
                        m.result[i] = 117;
                        break;
                    case "CantTargetLightUnits":
                    case 118:
                        m.result[i] = 118;
                        break;
                    case "MustTargetArmoredUnits":
                    case 119:
                        m.result[i] = 119;
                        break;
                    case "CantTargetArmoredUnits":
                    case 120:
                        m.result[i] = 120;
                        break;
                    case "MustTargetBiologicalUnits":
                    case 121:
                        m.result[i] = 121;
                        break;
                    case "CantTargetBiologicalUnits":
                    case 122:
                        m.result[i] = 122;
                        break;
                    case "MustTargetHeroicUnits":
                    case 123:
                        m.result[i] = 123;
                        break;
                    case "CantTargetHeroicUnits":
                    case 124:
                        m.result[i] = 124;
                        break;
                    case "MustTargetRoboticUnits":
                    case 125:
                        m.result[i] = 125;
                        break;
                    case "CantTargetRoboticUnits":
                    case 126:
                        m.result[i] = 126;
                        break;
                    case "MustTargetMechanicalUnits":
                    case 127:
                        m.result[i] = 127;
                        break;
                    case "CantTargetMechanicalUnits":
                    case 128:
                        m.result[i] = 128;
                        break;
                    case "MustTargetPsionicUnits":
                    case 129:
                        m.result[i] = 129;
                        break;
                    case "CantTargetPsionicUnits":
                    case 130:
                        m.result[i] = 130;
                        break;
                    case "MustTargetMassiveUnits":
                    case 131:
                        m.result[i] = 131;
                        break;
                    case "CantTargetMassiveUnits":
                    case 132:
                        m.result[i] = 132;
                        break;
                    case "MustTargetMissile":
                    case 133:
                        m.result[i] = 133;
                        break;
                    case "CantTargetMissile":
                    case 134:
                        m.result[i] = 134;
                        break;
                    case "MustTargetWorkerUnits":
                    case 135:
                        m.result[i] = 135;
                        break;
                    case "CantTargetWorkerUnits":
                    case 136:
                        m.result[i] = 136;
                        break;
                    case "MustTargetEnergyCapableUnits":
                    case 137:
                        m.result[i] = 137;
                        break;
                    case "CantTargetEnergyCapableUnits":
                    case 138:
                        m.result[i] = 138;
                        break;
                    case "MustTargetShieldCapableUnits":
                    case 139:
                        m.result[i] = 139;
                        break;
                    case "CantTargetShieldCapableUnits":
                    case 140:
                        m.result[i] = 140;
                        break;
                    case "MustTargetFlyers":
                    case 141:
                        m.result[i] = 141;
                        break;
                    case "CantTargetFlyers":
                    case 142:
                        m.result[i] = 142;
                        break;
                    case "MustTargetBuriedUnits":
                    case 143:
                        m.result[i] = 143;
                        break;
                    case "CantTargetBuriedUnits":
                    case 144:
                        m.result[i] = 144;
                        break;
                    case "MustTargetCloakedUnits":
                    case 145:
                        m.result[i] = 145;
                        break;
                    case "CantTargetCloakedUnits":
                    case 146:
                        m.result[i] = 146;
                        break;
                    case "MustTargetUnitsInAStasisField":
                    case 147:
                        m.result[i] = 147;
                        break;
                    case "CantTargetUnitsInAStasisField":
                    case 148:
                        m.result[i] = 148;
                        break;
                    case "MustTargetUnderConstructionUnits":
                    case 149:
                        m.result[i] = 149;
                        break;
                    case "CantTargetUnderConstructionUnits":
                    case 150:
                        m.result[i] = 150;
                        break;
                    case "MustTargetDeadUnits":
                    case 151:
                        m.result[i] = 151;
                        break;
                    case "CantTargetDeadUnits":
                    case 152:
                        m.result[i] = 152;
                        break;
                    case "MustTargetRevivableUnits":
                    case 153:
                        m.result[i] = 153;
                        break;
                    case "CantTargetRevivableUnits":
                    case 154:
                        m.result[i] = 154;
                        break;
                    case "MustTargetHiddenUnits":
                    case 155:
                        m.result[i] = 155;
                        break;
                    case "CantTargetHiddenUnits":
                    case 156:
                        m.result[i] = 156;
                        break;
                    case "CantRechargeOtherPlayersUnits":
                    case 157:
                        m.result[i] = 157;
                        break;
                    case "MustTargetHallucinations":
                    case 158:
                        m.result[i] = 158;
                        break;
                    case "CantTargetHallucinations":
                    case 159:
                        m.result[i] = 159;
                        break;
                    case "MustTargetInvulnerableUnits":
                    case 160:
                        m.result[i] = 160;
                        break;
                    case "CantTargetInvulnerableUnits":
                    case 161:
                        m.result[i] = 161;
                        break;
                    case "MustTargetDetectedUnits":
                    case 162:
                        m.result[i] = 162;
                        break;
                    case "CantTargetDetectedUnits":
                    case 163:
                        m.result[i] = 163;
                        break;
                    case "CantTargetUnitWithEnergy":
                    case 164:
                        m.result[i] = 164;
                        break;
                    case "CantTargetUnitWithShields":
                    case 165:
                        m.result[i] = 165;
                        break;
                    case "MustTargetUncommandableUnits":
                    case 166:
                        m.result[i] = 166;
                        break;
                    case "CantTargetUncommandableUnits":
                    case 167:
                        m.result[i] = 167;
                        break;
                    case "MustTargetPreventDefeatUnits":
                    case 168:
                        m.result[i] = 168;
                        break;
                    case "CantTargetPreventDefeatUnits":
                    case 169:
                        m.result[i] = 169;
                        break;
                    case "MustTargetPreventRevealUnits":
                    case 170:
                        m.result[i] = 170;
                        break;
                    case "CantTargetPreventRevealUnits":
                    case 171:
                        m.result[i] = 171;
                        break;
                    case "MustTargetPassiveUnits":
                    case 172:
                        m.result[i] = 172;
                        break;
                    case "CantTargetPassiveUnits":
                    case 173:
                        m.result[i] = 173;
                        break;
                    case "MustTargetStunnedUnits":
                    case 174:
                        m.result[i] = 174;
                        break;
                    case "CantTargetStunnedUnits":
                    case 175:
                        m.result[i] = 175;
                        break;
                    case "MustTargetSummonedUnits":
                    case 176:
                        m.result[i] = 176;
                        break;
                    case "CantTargetSummonedUnits":
                    case 177:
                        m.result[i] = 177;
                        break;
                    case "MustTargetUser1":
                    case 178:
                        m.result[i] = 178;
                        break;
                    case "CantTargetUser1":
                    case 179:
                        m.result[i] = 179;
                        break;
                    case "MustTargetUnstoppableUnits":
                    case 180:
                        m.result[i] = 180;
                        break;
                    case "CantTargetUnstoppableUnits":
                    case 181:
                        m.result[i] = 181;
                        break;
                    case "MustTargetResistantUnits":
                    case 182:
                        m.result[i] = 182;
                        break;
                    case "CantTargetResistantUnits":
                    case 183:
                        m.result[i] = 183;
                        break;
                    case "MustTargetDazedUnits":
                    case 184:
                        m.result[i] = 184;
                        break;
                    case "CantTargetDazedUnits":
                    case 185:
                        m.result[i] = 185;
                        break;
                    case "CantLockdown":
                    case 186:
                        m.result[i] = 186;
                        break;
                    case "CantMindControl":
                    case 187:
                        m.result[i] = 187;
                        break;
                    case "MustTargetDestructibles":
                    case 188:
                        m.result[i] = 188;
                        break;
                    case "CantTargetDestructibles":
                    case 189:
                        m.result[i] = 189;
                        break;
                    case "MustTargetItems":
                    case 190:
                        m.result[i] = 190;
                        break;
                    case "CantTargetItems":
                    case 191:
                        m.result[i] = 191;
                        break;
                    case "NoCalldownAvailable":
                    case 192:
                        m.result[i] = 192;
                        break;
                    case "WaypointListFull":
                    case 193:
                        m.result[i] = 193;
                        break;
                    case "MustTargetRace":
                    case 194:
                        m.result[i] = 194;
                        break;
                    case "CantTargetRace":
                    case 195:
                        m.result[i] = 195;
                        break;
                    case "MustTargetSimilarUnits":
                    case 196:
                        m.result[i] = 196;
                        break;
                    case "CantTargetSimilarUnits":
                    case 197:
                        m.result[i] = 197;
                        break;
                    case "CantFindEnoughTargets":
                    case 198:
                        m.result[i] = 198;
                        break;
                    case "AlreadySpawningLarva":
                    case 199:
                        m.result[i] = 199;
                        break;
                    case "CantTargetExhaustedResources":
                    case 200:
                        m.result[i] = 200;
                        break;
                    case "CantUseMinimap":
                    case 201:
                        m.result[i] = 201;
                        break;
                    case "CantUseInfoPanel":
                    case 202:
                        m.result[i] = 202;
                        break;
                    case "OrderQueueIsFull":
                    case 203:
                        m.result[i] = 203;
                        break;
                    case "CantHarvestThatResource":
                    case 204:
                        m.result[i] = 204;
                        break;
                    case "HarvestersNotRequired":
                    case 205:
                        m.result[i] = 205;
                        break;
                    case "AlreadyTargeted":
                    case 206:
                        m.result[i] = 206;
                        break;
                    case "CantAttackWeaponsDisabled":
                    case 207:
                        m.result[i] = 207;
                        break;
                    case "CouldntReachTarget":
                    case 208:
                        m.result[i] = 208;
                        break;
                    case "TargetIsOutOfRange":
                    case 209:
                        m.result[i] = 209;
                        break;
                    case "TargetIsTooClose":
                    case 210:
                        m.result[i] = 210;
                        break;
                    case "TargetIsOutOfArc":
                    case 211:
                        m.result[i] = 211;
                        break;
                    case "CantFindTeleportLocation":
                    case 212:
                        m.result[i] = 212;
                        break;
                    case "InvalidItemClass":
                    case 213:
                        m.result[i] = 213;
                        break;
                    case "CantFindCancelOrder":
                    case 214:
                        m.result[i] = 214;
                        break;
                    }
                }
            }
            return m;
        };

        ResponseAction.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.result = [];
            }
            if (m.result && m.result.length) {
                d.result = [];
                for (var j = 0; j < m.result.length; ++j) {
                    d.result[j] = o.enums === String ? $root.SC2APIProtocol.ActionResult[m.result[j]] : m.result[j];
                }
            }
            return d;
        };

        ResponseAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseAction;
    })();

    SC2APIProtocol.RequestObserverAction = (function() {

        function RequestObserverAction(p) {
            this.actions = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestObserverAction.prototype.actions = $util.emptyArray;

        RequestObserverAction.create = function create(properties) {
            return new RequestObserverAction(properties);
        };

        RequestObserverAction.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.actions != null && m.actions.length) {
                for (var i = 0; i < m.actions.length; ++i)
                    $root.SC2APIProtocol.ObserverAction.encode(m.actions[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        RequestObserverAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestObserverAction.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestObserverAction();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.actions && m.actions.length))
                        m.actions = [];
                    m.actions.push($root.SC2APIProtocol.ObserverAction.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestObserverAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestObserverAction.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.actions != null && m.hasOwnProperty("actions")) {
                if (!Array.isArray(m.actions))
                    return "actions: array expected";
                for (var i = 0; i < m.actions.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.ObserverAction.verify(m.actions[i]);
                        if (e)
                            return "actions." + e;
                    }
                }
            }
            return null;
        };

        RequestObserverAction.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestObserverAction)
                return d;
            var m = new $root.SC2APIProtocol.RequestObserverAction();
            if (d.actions) {
                if (!Array.isArray(d.actions))
                    throw TypeError(".SC2APIProtocol.RequestObserverAction.actions: array expected");
                m.actions = [];
                for (var i = 0; i < d.actions.length; ++i) {
                    if (typeof d.actions[i] !== "object")
                        throw TypeError(".SC2APIProtocol.RequestObserverAction.actions: object expected");
                    m.actions[i] = $root.SC2APIProtocol.ObserverAction.fromObject(d.actions[i]);
                }
            }
            return m;
        };

        RequestObserverAction.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.actions = [];
            }
            if (m.actions && m.actions.length) {
                d.actions = [];
                for (var j = 0; j < m.actions.length; ++j) {
                    d.actions[j] = $root.SC2APIProtocol.ObserverAction.toObject(m.actions[j], o);
                }
            }
            return d;
        };

        RequestObserverAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestObserverAction;
    })();

    SC2APIProtocol.ResponseObserverAction = (function() {

        function ResponseObserverAction(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseObserverAction.create = function create(properties) {
            return new ResponseObserverAction(properties);
        };

        ResponseObserverAction.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        ResponseObserverAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseObserverAction.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseObserverAction();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseObserverAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseObserverAction.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        ResponseObserverAction.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseObserverAction)
                return d;
            return new $root.SC2APIProtocol.ResponseObserverAction();
        };

        ResponseObserverAction.toObject = function toObject() {
            return {};
        };

        ResponseObserverAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseObserverAction;
    })();

    SC2APIProtocol.RequestStep = (function() {

        function RequestStep(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestStep.prototype.count = 0;

        RequestStep.create = function create(properties) {
            return new RequestStep(properties);
        };

        RequestStep.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.count != null && Object.hasOwnProperty.call(m, "count"))
                w.uint32(8).uint32(m.count);
            return w;
        };

        RequestStep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestStep.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestStep();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.count = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestStep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestStep.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.count != null && m.hasOwnProperty("count")) {
                if (!$util.isInteger(m.count))
                    return "count: integer expected";
            }
            return null;
        };

        RequestStep.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestStep)
                return d;
            var m = new $root.SC2APIProtocol.RequestStep();
            if (d.count != null) {
                m.count = d.count >>> 0;
            }
            return m;
        };

        RequestStep.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.count = 0;
            }
            if (m.count != null && m.hasOwnProperty("count")) {
                d.count = m.count;
            }
            return d;
        };

        RequestStep.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestStep;
    })();

    SC2APIProtocol.ResponseStep = (function() {

        function ResponseStep(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseStep.prototype.simulationLoop = 0;

        ResponseStep.create = function create(properties) {
            return new ResponseStep(properties);
        };

        ResponseStep.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.simulationLoop != null && Object.hasOwnProperty.call(m, "simulationLoop"))
                w.uint32(8).uint32(m.simulationLoop);
            return w;
        };

        ResponseStep.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseStep.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseStep();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.simulationLoop = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseStep.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseStep.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.simulationLoop != null && m.hasOwnProperty("simulationLoop")) {
                if (!$util.isInteger(m.simulationLoop))
                    return "simulationLoop: integer expected";
            }
            return null;
        };

        ResponseStep.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseStep)
                return d;
            var m = new $root.SC2APIProtocol.ResponseStep();
            if (d.simulationLoop != null) {
                m.simulationLoop = d.simulationLoop >>> 0;
            }
            return m;
        };

        ResponseStep.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.simulationLoop = 0;
            }
            if (m.simulationLoop != null && m.hasOwnProperty("simulationLoop")) {
                d.simulationLoop = m.simulationLoop;
            }
            return d;
        };

        ResponseStep.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseStep;
    })();

    SC2APIProtocol.RequestData = (function() {

        function RequestData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestData.prototype.abilityId = false;
        RequestData.prototype.unitTypeId = false;
        RequestData.prototype.upgradeId = false;
        RequestData.prototype.buffId = false;
        RequestData.prototype.effectId = false;

        RequestData.create = function create(properties) {
            return new RequestData(properties);
        };

        RequestData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(8).bool(m.abilityId);
            if (m.unitTypeId != null && Object.hasOwnProperty.call(m, "unitTypeId"))
                w.uint32(16).bool(m.unitTypeId);
            if (m.upgradeId != null && Object.hasOwnProperty.call(m, "upgradeId"))
                w.uint32(24).bool(m.upgradeId);
            if (m.buffId != null && Object.hasOwnProperty.call(m, "buffId"))
                w.uint32(32).bool(m.buffId);
            if (m.effectId != null && Object.hasOwnProperty.call(m, "effectId"))
                w.uint32(40).bool(m.effectId);
            return w;
        };

        RequestData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.abilityId = r.bool();
                    break;
                case 2:
                    m.unitTypeId = r.bool();
                    break;
                case 3:
                    m.upgradeId = r.bool();
                    break;
                case 4:
                    m.buffId = r.bool();
                    break;
                case 5:
                    m.effectId = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (typeof m.abilityId !== "boolean")
                    return "abilityId: boolean expected";
            }
            if (m.unitTypeId != null && m.hasOwnProperty("unitTypeId")) {
                if (typeof m.unitTypeId !== "boolean")
                    return "unitTypeId: boolean expected";
            }
            if (m.upgradeId != null && m.hasOwnProperty("upgradeId")) {
                if (typeof m.upgradeId !== "boolean")
                    return "upgradeId: boolean expected";
            }
            if (m.buffId != null && m.hasOwnProperty("buffId")) {
                if (typeof m.buffId !== "boolean")
                    return "buffId: boolean expected";
            }
            if (m.effectId != null && m.hasOwnProperty("effectId")) {
                if (typeof m.effectId !== "boolean")
                    return "effectId: boolean expected";
            }
            return null;
        };

        RequestData.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestData)
                return d;
            var m = new $root.SC2APIProtocol.RequestData();
            if (d.abilityId != null) {
                m.abilityId = Boolean(d.abilityId);
            }
            if (d.unitTypeId != null) {
                m.unitTypeId = Boolean(d.unitTypeId);
            }
            if (d.upgradeId != null) {
                m.upgradeId = Boolean(d.upgradeId);
            }
            if (d.buffId != null) {
                m.buffId = Boolean(d.buffId);
            }
            if (d.effectId != null) {
                m.effectId = Boolean(d.effectId);
            }
            return m;
        };

        RequestData.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.abilityId = false;
                d.unitTypeId = false;
                d.upgradeId = false;
                d.buffId = false;
                d.effectId = false;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                d.abilityId = m.abilityId;
            }
            if (m.unitTypeId != null && m.hasOwnProperty("unitTypeId")) {
                d.unitTypeId = m.unitTypeId;
            }
            if (m.upgradeId != null && m.hasOwnProperty("upgradeId")) {
                d.upgradeId = m.upgradeId;
            }
            if (m.buffId != null && m.hasOwnProperty("buffId")) {
                d.buffId = m.buffId;
            }
            if (m.effectId != null && m.hasOwnProperty("effectId")) {
                d.effectId = m.effectId;
            }
            return d;
        };

        RequestData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestData;
    })();

    SC2APIProtocol.ResponseData = (function() {

        function ResponseData(p) {
            this.abilities = [];
            this.units = [];
            this.upgrades = [];
            this.buffs = [];
            this.effects = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseData.prototype.abilities = $util.emptyArray;
        ResponseData.prototype.units = $util.emptyArray;
        ResponseData.prototype.upgrades = $util.emptyArray;
        ResponseData.prototype.buffs = $util.emptyArray;
        ResponseData.prototype.effects = $util.emptyArray;

        ResponseData.create = function create(properties) {
            return new ResponseData(properties);
        };

        ResponseData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.abilities != null && m.abilities.length) {
                for (var i = 0; i < m.abilities.length; ++i)
                    $root.SC2APIProtocol.AbilityData.encode(m.abilities[i], w.uint32(10).fork()).ldelim();
            }
            if (m.units != null && m.units.length) {
                for (var i = 0; i < m.units.length; ++i)
                    $root.SC2APIProtocol.UnitTypeData.encode(m.units[i], w.uint32(18).fork()).ldelim();
            }
            if (m.upgrades != null && m.upgrades.length) {
                for (var i = 0; i < m.upgrades.length; ++i)
                    $root.SC2APIProtocol.UpgradeData.encode(m.upgrades[i], w.uint32(26).fork()).ldelim();
            }
            if (m.buffs != null && m.buffs.length) {
                for (var i = 0; i < m.buffs.length; ++i)
                    $root.SC2APIProtocol.BuffData.encode(m.buffs[i], w.uint32(34).fork()).ldelim();
            }
            if (m.effects != null && m.effects.length) {
                for (var i = 0; i < m.effects.length; ++i)
                    $root.SC2APIProtocol.EffectData.encode(m.effects[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        ResponseData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.abilities && m.abilities.length))
                        m.abilities = [];
                    m.abilities.push($root.SC2APIProtocol.AbilityData.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.units && m.units.length))
                        m.units = [];
                    m.units.push($root.SC2APIProtocol.UnitTypeData.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.upgrades && m.upgrades.length))
                        m.upgrades = [];
                    m.upgrades.push($root.SC2APIProtocol.UpgradeData.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.buffs && m.buffs.length))
                        m.buffs = [];
                    m.buffs.push($root.SC2APIProtocol.BuffData.decode(r, r.uint32()));
                    break;
                case 5:
                    if (!(m.effects && m.effects.length))
                        m.effects = [];
                    m.effects.push($root.SC2APIProtocol.EffectData.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseData.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.abilities != null && m.hasOwnProperty("abilities")) {
                if (!Array.isArray(m.abilities))
                    return "abilities: array expected";
                for (var i = 0; i < m.abilities.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.AbilityData.verify(m.abilities[i]);
                        if (e)
                            return "abilities." + e;
                    }
                }
            }
            if (m.units != null && m.hasOwnProperty("units")) {
                if (!Array.isArray(m.units))
                    return "units: array expected";
                for (var i = 0; i < m.units.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.UnitTypeData.verify(m.units[i]);
                        if (e)
                            return "units." + e;
                    }
                }
            }
            if (m.upgrades != null && m.hasOwnProperty("upgrades")) {
                if (!Array.isArray(m.upgrades))
                    return "upgrades: array expected";
                for (var i = 0; i < m.upgrades.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.UpgradeData.verify(m.upgrades[i]);
                        if (e)
                            return "upgrades." + e;
                    }
                }
            }
            if (m.buffs != null && m.hasOwnProperty("buffs")) {
                if (!Array.isArray(m.buffs))
                    return "buffs: array expected";
                for (var i = 0; i < m.buffs.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.BuffData.verify(m.buffs[i]);
                        if (e)
                            return "buffs." + e;
                    }
                }
            }
            if (m.effects != null && m.hasOwnProperty("effects")) {
                if (!Array.isArray(m.effects))
                    return "effects: array expected";
                for (var i = 0; i < m.effects.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.EffectData.verify(m.effects[i]);
                        if (e)
                            return "effects." + e;
                    }
                }
            }
            return null;
        };

        ResponseData.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseData)
                return d;
            var m = new $root.SC2APIProtocol.ResponseData();
            if (d.abilities) {
                if (!Array.isArray(d.abilities))
                    throw TypeError(".SC2APIProtocol.ResponseData.abilities: array expected");
                m.abilities = [];
                for (var i = 0; i < d.abilities.length; ++i) {
                    if (typeof d.abilities[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseData.abilities: object expected");
                    m.abilities[i] = $root.SC2APIProtocol.AbilityData.fromObject(d.abilities[i]);
                }
            }
            if (d.units) {
                if (!Array.isArray(d.units))
                    throw TypeError(".SC2APIProtocol.ResponseData.units: array expected");
                m.units = [];
                for (var i = 0; i < d.units.length; ++i) {
                    if (typeof d.units[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseData.units: object expected");
                    m.units[i] = $root.SC2APIProtocol.UnitTypeData.fromObject(d.units[i]);
                }
            }
            if (d.upgrades) {
                if (!Array.isArray(d.upgrades))
                    throw TypeError(".SC2APIProtocol.ResponseData.upgrades: array expected");
                m.upgrades = [];
                for (var i = 0; i < d.upgrades.length; ++i) {
                    if (typeof d.upgrades[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseData.upgrades: object expected");
                    m.upgrades[i] = $root.SC2APIProtocol.UpgradeData.fromObject(d.upgrades[i]);
                }
            }
            if (d.buffs) {
                if (!Array.isArray(d.buffs))
                    throw TypeError(".SC2APIProtocol.ResponseData.buffs: array expected");
                m.buffs = [];
                for (var i = 0; i < d.buffs.length; ++i) {
                    if (typeof d.buffs[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseData.buffs: object expected");
                    m.buffs[i] = $root.SC2APIProtocol.BuffData.fromObject(d.buffs[i]);
                }
            }
            if (d.effects) {
                if (!Array.isArray(d.effects))
                    throw TypeError(".SC2APIProtocol.ResponseData.effects: array expected");
                m.effects = [];
                for (var i = 0; i < d.effects.length; ++i) {
                    if (typeof d.effects[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseData.effects: object expected");
                    m.effects[i] = $root.SC2APIProtocol.EffectData.fromObject(d.effects[i]);
                }
            }
            return m;
        };

        ResponseData.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.abilities = [];
                d.units = [];
                d.upgrades = [];
                d.buffs = [];
                d.effects = [];
            }
            if (m.abilities && m.abilities.length) {
                d.abilities = [];
                for (var j = 0; j < m.abilities.length; ++j) {
                    d.abilities[j] = $root.SC2APIProtocol.AbilityData.toObject(m.abilities[j], o);
                }
            }
            if (m.units && m.units.length) {
                d.units = [];
                for (var j = 0; j < m.units.length; ++j) {
                    d.units[j] = $root.SC2APIProtocol.UnitTypeData.toObject(m.units[j], o);
                }
            }
            if (m.upgrades && m.upgrades.length) {
                d.upgrades = [];
                for (var j = 0; j < m.upgrades.length; ++j) {
                    d.upgrades[j] = $root.SC2APIProtocol.UpgradeData.toObject(m.upgrades[j], o);
                }
            }
            if (m.buffs && m.buffs.length) {
                d.buffs = [];
                for (var j = 0; j < m.buffs.length; ++j) {
                    d.buffs[j] = $root.SC2APIProtocol.BuffData.toObject(m.buffs[j], o);
                }
            }
            if (m.effects && m.effects.length) {
                d.effects = [];
                for (var j = 0; j < m.effects.length; ++j) {
                    d.effects[j] = $root.SC2APIProtocol.EffectData.toObject(m.effects[j], o);
                }
            }
            return d;
        };

        ResponseData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseData;
    })();

    SC2APIProtocol.RequestSaveReplay = (function() {

        function RequestSaveReplay(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestSaveReplay.create = function create(properties) {
            return new RequestSaveReplay(properties);
        };

        RequestSaveReplay.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestSaveReplay.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestSaveReplay.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestSaveReplay();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestSaveReplay.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestSaveReplay.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestSaveReplay.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestSaveReplay)
                return d;
            return new $root.SC2APIProtocol.RequestSaveReplay();
        };

        RequestSaveReplay.toObject = function toObject() {
            return {};
        };

        RequestSaveReplay.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSaveReplay;
    })();

    SC2APIProtocol.ResponseSaveReplay = (function() {

        function ResponseSaveReplay(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseSaveReplay.prototype.data = $util.newBuffer([]);

        ResponseSaveReplay.create = function create(properties) {
            return new ResponseSaveReplay(properties);
        };

        ResponseSaveReplay.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
                w.uint32(10).bytes(m.data);
            return w;
        };

        ResponseSaveReplay.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseSaveReplay.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseSaveReplay();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.data = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseSaveReplay.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseSaveReplay.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.data != null && m.hasOwnProperty("data")) {
                if (!(m.data && typeof m.data.length === "number" || $util.isString(m.data)))
                    return "data: buffer expected";
            }
            return null;
        };

        ResponseSaveReplay.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseSaveReplay)
                return d;
            var m = new $root.SC2APIProtocol.ResponseSaveReplay();
            if (d.data != null) {
                if (typeof d.data === "string")
                    $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);
                else if (d.data.length)
                    m.data = d.data;
            }
            return m;
        };

        ResponseSaveReplay.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                if (o.bytes === String)
                    d.data = "";
                else {
                    d.data = [];
                    if (o.bytes !== Array)
                        d.data = $util.newBuffer(d.data);
                }
            }
            if (m.data != null && m.hasOwnProperty("data")) {
                d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
            }
            return d;
        };

        ResponseSaveReplay.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseSaveReplay;
    })();

    SC2APIProtocol.RequestReplayInfo = (function() {

        function RequestReplayInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestReplayInfo.prototype.replayPath = "";
        RequestReplayInfo.prototype.replayData = $util.newBuffer([]);
        RequestReplayInfo.prototype.downloadData = false;

        var $oneOfFields;

        Object.defineProperty(RequestReplayInfo.prototype, "replay", {
            get: $util.oneOfGetter($oneOfFields = ["replayPath", "replayData"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        RequestReplayInfo.create = function create(properties) {
            return new RequestReplayInfo(properties);
        };

        RequestReplayInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.replayPath != null && Object.hasOwnProperty.call(m, "replayPath"))
                w.uint32(10).string(m.replayPath);
            if (m.replayData != null && Object.hasOwnProperty.call(m, "replayData"))
                w.uint32(18).bytes(m.replayData);
            if (m.downloadData != null && Object.hasOwnProperty.call(m, "downloadData"))
                w.uint32(24).bool(m.downloadData);
            return w;
        };

        RequestReplayInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestReplayInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestReplayInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.replayPath = r.string();
                    break;
                case 2:
                    m.replayData = r.bytes();
                    break;
                case 3:
                    m.downloadData = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestReplayInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestReplayInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.replayPath != null && m.hasOwnProperty("replayPath")) {
                p.replay = 1;
                if (!$util.isString(m.replayPath))
                    return "replayPath: string expected";
            }
            if (m.replayData != null && m.hasOwnProperty("replayData")) {
                if (p.replay === 1)
                    return "replay: multiple values";
                p.replay = 1;
                if (!(m.replayData && typeof m.replayData.length === "number" || $util.isString(m.replayData)))
                    return "replayData: buffer expected";
            }
            if (m.downloadData != null && m.hasOwnProperty("downloadData")) {
                if (typeof m.downloadData !== "boolean")
                    return "downloadData: boolean expected";
            }
            return null;
        };

        RequestReplayInfo.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestReplayInfo)
                return d;
            var m = new $root.SC2APIProtocol.RequestReplayInfo();
            if (d.replayPath != null) {
                m.replayPath = String(d.replayPath);
            }
            if (d.replayData != null) {
                if (typeof d.replayData === "string")
                    $util.base64.decode(d.replayData, m.replayData = $util.newBuffer($util.base64.length(d.replayData)), 0);
                else if (d.replayData.length)
                    m.replayData = d.replayData;
            }
            if (d.downloadData != null) {
                m.downloadData = Boolean(d.downloadData);
            }
            return m;
        };

        RequestReplayInfo.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.downloadData = false;
            }
            if (m.replayPath != null && m.hasOwnProperty("replayPath")) {
                d.replayPath = m.replayPath;
                if (o.oneofs)
                    d.replay = "replayPath";
            }
            if (m.replayData != null && m.hasOwnProperty("replayData")) {
                d.replayData = o.bytes === String ? $util.base64.encode(m.replayData, 0, m.replayData.length) : o.bytes === Array ? Array.prototype.slice.call(m.replayData) : m.replayData;
                if (o.oneofs)
                    d.replay = "replayData";
            }
            if (m.downloadData != null && m.hasOwnProperty("downloadData")) {
                d.downloadData = m.downloadData;
            }
            return d;
        };

        RequestReplayInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestReplayInfo;
    })();

    SC2APIProtocol.PlayerInfoExtra = (function() {

        function PlayerInfoExtra(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PlayerInfoExtra.prototype.playerInfo = null;
        PlayerInfoExtra.prototype.playerResult = null;
        PlayerInfoExtra.prototype.playerMmr = 0;
        PlayerInfoExtra.prototype.playerApm = 0;

        PlayerInfoExtra.create = function create(properties) {
            return new PlayerInfoExtra(properties);
        };

        PlayerInfoExtra.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerInfo != null && Object.hasOwnProperty.call(m, "playerInfo"))
                $root.SC2APIProtocol.PlayerInfo.encode(m.playerInfo, w.uint32(10).fork()).ldelim();
            if (m.playerResult != null && Object.hasOwnProperty.call(m, "playerResult"))
                $root.SC2APIProtocol.PlayerResult.encode(m.playerResult, w.uint32(18).fork()).ldelim();
            if (m.playerMmr != null && Object.hasOwnProperty.call(m, "playerMmr"))
                w.uint32(24).int32(m.playerMmr);
            if (m.playerApm != null && Object.hasOwnProperty.call(m, "playerApm"))
                w.uint32(32).int32(m.playerApm);
            return w;
        };

        PlayerInfoExtra.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PlayerInfoExtra.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PlayerInfoExtra();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerInfo = $root.SC2APIProtocol.PlayerInfo.decode(r, r.uint32());
                    break;
                case 2:
                    m.playerResult = $root.SC2APIProtocol.PlayerResult.decode(r, r.uint32());
                    break;
                case 3:
                    m.playerMmr = r.int32();
                    break;
                case 4:
                    m.playerApm = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PlayerInfoExtra.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PlayerInfoExtra.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.playerInfo != null && m.hasOwnProperty("playerInfo")) {
                {
                    var e = $root.SC2APIProtocol.PlayerInfo.verify(m.playerInfo);
                    if (e)
                        return "playerInfo." + e;
                }
            }
            if (m.playerResult != null && m.hasOwnProperty("playerResult")) {
                {
                    var e = $root.SC2APIProtocol.PlayerResult.verify(m.playerResult);
                    if (e)
                        return "playerResult." + e;
                }
            }
            if (m.playerMmr != null && m.hasOwnProperty("playerMmr")) {
                if (!$util.isInteger(m.playerMmr))
                    return "playerMmr: integer expected";
            }
            if (m.playerApm != null && m.hasOwnProperty("playerApm")) {
                if (!$util.isInteger(m.playerApm))
                    return "playerApm: integer expected";
            }
            return null;
        };

        PlayerInfoExtra.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PlayerInfoExtra)
                return d;
            var m = new $root.SC2APIProtocol.PlayerInfoExtra();
            if (d.playerInfo != null) {
                if (typeof d.playerInfo !== "object")
                    throw TypeError(".SC2APIProtocol.PlayerInfoExtra.playerInfo: object expected");
                m.playerInfo = $root.SC2APIProtocol.PlayerInfo.fromObject(d.playerInfo);
            }
            if (d.playerResult != null) {
                if (typeof d.playerResult !== "object")
                    throw TypeError(".SC2APIProtocol.PlayerInfoExtra.playerResult: object expected");
                m.playerResult = $root.SC2APIProtocol.PlayerResult.fromObject(d.playerResult);
            }
            if (d.playerMmr != null) {
                m.playerMmr = d.playerMmr | 0;
            }
            if (d.playerApm != null) {
                m.playerApm = d.playerApm | 0;
            }
            return m;
        };

        PlayerInfoExtra.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.playerInfo = null;
                d.playerResult = null;
                d.playerMmr = 0;
                d.playerApm = 0;
            }
            if (m.playerInfo != null && m.hasOwnProperty("playerInfo")) {
                d.playerInfo = $root.SC2APIProtocol.PlayerInfo.toObject(m.playerInfo, o);
            }
            if (m.playerResult != null && m.hasOwnProperty("playerResult")) {
                d.playerResult = $root.SC2APIProtocol.PlayerResult.toObject(m.playerResult, o);
            }
            if (m.playerMmr != null && m.hasOwnProperty("playerMmr")) {
                d.playerMmr = m.playerMmr;
            }
            if (m.playerApm != null && m.hasOwnProperty("playerApm")) {
                d.playerApm = m.playerApm;
            }
            return d;
        };

        PlayerInfoExtra.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlayerInfoExtra;
    })();

    SC2APIProtocol.ResponseReplayInfo = (function() {

        function ResponseReplayInfo(p) {
            this.playerInfo = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseReplayInfo.prototype.mapName = "";
        ResponseReplayInfo.prototype.localMapPath = "";
        ResponseReplayInfo.prototype.playerInfo = $util.emptyArray;
        ResponseReplayInfo.prototype.gameDurationLoops = 0;
        ResponseReplayInfo.prototype.gameDurationSeconds = 0;
        ResponseReplayInfo.prototype.gameVersion = "";
        ResponseReplayInfo.prototype.dataVersion = "";
        ResponseReplayInfo.prototype.dataBuild = 0;
        ResponseReplayInfo.prototype.baseBuild = 0;
        ResponseReplayInfo.prototype.error = 1;
        ResponseReplayInfo.prototype.errorDetails = "";

        ResponseReplayInfo.create = function create(properties) {
            return new ResponseReplayInfo(properties);
        };

        ResponseReplayInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mapName != null && Object.hasOwnProperty.call(m, "mapName"))
                w.uint32(10).string(m.mapName);
            if (m.localMapPath != null && Object.hasOwnProperty.call(m, "localMapPath"))
                w.uint32(18).string(m.localMapPath);
            if (m.playerInfo != null && m.playerInfo.length) {
                for (var i = 0; i < m.playerInfo.length; ++i)
                    $root.SC2APIProtocol.PlayerInfoExtra.encode(m.playerInfo[i], w.uint32(26).fork()).ldelim();
            }
            if (m.gameDurationLoops != null && Object.hasOwnProperty.call(m, "gameDurationLoops"))
                w.uint32(32).uint32(m.gameDurationLoops);
            if (m.gameDurationSeconds != null && Object.hasOwnProperty.call(m, "gameDurationSeconds"))
                w.uint32(45).float(m.gameDurationSeconds);
            if (m.gameVersion != null && Object.hasOwnProperty.call(m, "gameVersion"))
                w.uint32(50).string(m.gameVersion);
            if (m.dataBuild != null && Object.hasOwnProperty.call(m, "dataBuild"))
                w.uint32(56).uint32(m.dataBuild);
            if (m.baseBuild != null && Object.hasOwnProperty.call(m, "baseBuild"))
                w.uint32(64).uint32(m.baseBuild);
            if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                w.uint32(72).int32(m.error);
            if (m.errorDetails != null && Object.hasOwnProperty.call(m, "errorDetails"))
                w.uint32(82).string(m.errorDetails);
            if (m.dataVersion != null && Object.hasOwnProperty.call(m, "dataVersion"))
                w.uint32(90).string(m.dataVersion);
            return w;
        };

        ResponseReplayInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseReplayInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseReplayInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.mapName = r.string();
                    break;
                case 2:
                    m.localMapPath = r.string();
                    break;
                case 3:
                    if (!(m.playerInfo && m.playerInfo.length))
                        m.playerInfo = [];
                    m.playerInfo.push($root.SC2APIProtocol.PlayerInfoExtra.decode(r, r.uint32()));
                    break;
                case 4:
                    m.gameDurationLoops = r.uint32();
                    break;
                case 5:
                    m.gameDurationSeconds = r.float();
                    break;
                case 6:
                    m.gameVersion = r.string();
                    break;
                case 11:
                    m.dataVersion = r.string();
                    break;
                case 7:
                    m.dataBuild = r.uint32();
                    break;
                case 8:
                    m.baseBuild = r.uint32();
                    break;
                case 9:
                    m.error = r.int32();
                    break;
                case 10:
                    m.errorDetails = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseReplayInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseReplayInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.mapName != null && m.hasOwnProperty("mapName")) {
                if (!$util.isString(m.mapName))
                    return "mapName: string expected";
            }
            if (m.localMapPath != null && m.hasOwnProperty("localMapPath")) {
                if (!$util.isString(m.localMapPath))
                    return "localMapPath: string expected";
            }
            if (m.playerInfo != null && m.hasOwnProperty("playerInfo")) {
                if (!Array.isArray(m.playerInfo))
                    return "playerInfo: array expected";
                for (var i = 0; i < m.playerInfo.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.PlayerInfoExtra.verify(m.playerInfo[i]);
                        if (e)
                            return "playerInfo." + e;
                    }
                }
            }
            if (m.gameDurationLoops != null && m.hasOwnProperty("gameDurationLoops")) {
                if (!$util.isInteger(m.gameDurationLoops))
                    return "gameDurationLoops: integer expected";
            }
            if (m.gameDurationSeconds != null && m.hasOwnProperty("gameDurationSeconds")) {
                if (typeof m.gameDurationSeconds !== "number")
                    return "gameDurationSeconds: number expected";
            }
            if (m.gameVersion != null && m.hasOwnProperty("gameVersion")) {
                if (!$util.isString(m.gameVersion))
                    return "gameVersion: string expected";
            }
            if (m.dataVersion != null && m.hasOwnProperty("dataVersion")) {
                if (!$util.isString(m.dataVersion))
                    return "dataVersion: string expected";
            }
            if (m.dataBuild != null && m.hasOwnProperty("dataBuild")) {
                if (!$util.isInteger(m.dataBuild))
                    return "dataBuild: integer expected";
            }
            if (m.baseBuild != null && m.hasOwnProperty("baseBuild")) {
                if (!$util.isInteger(m.baseBuild))
                    return "baseBuild: integer expected";
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                switch (m.error) {
                default:
                    return "error: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                if (!$util.isString(m.errorDetails))
                    return "errorDetails: string expected";
            }
            return null;
        };

        ResponseReplayInfo.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseReplayInfo)
                return d;
            var m = new $root.SC2APIProtocol.ResponseReplayInfo();
            if (d.mapName != null) {
                m.mapName = String(d.mapName);
            }
            if (d.localMapPath != null) {
                m.localMapPath = String(d.localMapPath);
            }
            if (d.playerInfo) {
                if (!Array.isArray(d.playerInfo))
                    throw TypeError(".SC2APIProtocol.ResponseReplayInfo.playerInfo: array expected");
                m.playerInfo = [];
                for (var i = 0; i < d.playerInfo.length; ++i) {
                    if (typeof d.playerInfo[i] !== "object")
                        throw TypeError(".SC2APIProtocol.ResponseReplayInfo.playerInfo: object expected");
                    m.playerInfo[i] = $root.SC2APIProtocol.PlayerInfoExtra.fromObject(d.playerInfo[i]);
                }
            }
            if (d.gameDurationLoops != null) {
                m.gameDurationLoops = d.gameDurationLoops >>> 0;
            }
            if (d.gameDurationSeconds != null) {
                m.gameDurationSeconds = Number(d.gameDurationSeconds);
            }
            if (d.gameVersion != null) {
                m.gameVersion = String(d.gameVersion);
            }
            if (d.dataVersion != null) {
                m.dataVersion = String(d.dataVersion);
            }
            if (d.dataBuild != null) {
                m.dataBuild = d.dataBuild >>> 0;
            }
            if (d.baseBuild != null) {
                m.baseBuild = d.baseBuild >>> 0;
            }
            switch (d.error) {
            case "MissingReplay":
            case 1:
                m.error = 1;
                break;
            case "InvalidReplayPath":
            case 2:
                m.error = 2;
                break;
            case "InvalidReplayData":
            case 3:
                m.error = 3;
                break;
            case "ParsingError":
            case 4:
                m.error = 4;
                break;
            case "DownloadError":
            case 5:
                m.error = 5;
                break;
            }
            if (d.errorDetails != null) {
                m.errorDetails = String(d.errorDetails);
            }
            return m;
        };

        ResponseReplayInfo.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.playerInfo = [];
            }
            if (o.defaults) {
                d.mapName = "";
                d.localMapPath = "";
                d.gameDurationLoops = 0;
                d.gameDurationSeconds = 0;
                d.gameVersion = "";
                d.dataBuild = 0;
                d.baseBuild = 0;
                d.error = o.enums === String ? "MissingReplay" : 1;
                d.errorDetails = "";
                d.dataVersion = "";
            }
            if (m.mapName != null && m.hasOwnProperty("mapName")) {
                d.mapName = m.mapName;
            }
            if (m.localMapPath != null && m.hasOwnProperty("localMapPath")) {
                d.localMapPath = m.localMapPath;
            }
            if (m.playerInfo && m.playerInfo.length) {
                d.playerInfo = [];
                for (var j = 0; j < m.playerInfo.length; ++j) {
                    d.playerInfo[j] = $root.SC2APIProtocol.PlayerInfoExtra.toObject(m.playerInfo[j], o);
                }
            }
            if (m.gameDurationLoops != null && m.hasOwnProperty("gameDurationLoops")) {
                d.gameDurationLoops = m.gameDurationLoops;
            }
            if (m.gameDurationSeconds != null && m.hasOwnProperty("gameDurationSeconds")) {
                d.gameDurationSeconds = o.json && !isFinite(m.gameDurationSeconds) ? String(m.gameDurationSeconds) : m.gameDurationSeconds;
            }
            if (m.gameVersion != null && m.hasOwnProperty("gameVersion")) {
                d.gameVersion = m.gameVersion;
            }
            if (m.dataBuild != null && m.hasOwnProperty("dataBuild")) {
                d.dataBuild = m.dataBuild;
            }
            if (m.baseBuild != null && m.hasOwnProperty("baseBuild")) {
                d.baseBuild = m.baseBuild;
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                d.error = o.enums === String ? $root.SC2APIProtocol.ResponseReplayInfo.Error[m.error] : m.error;
            }
            if (m.errorDetails != null && m.hasOwnProperty("errorDetails")) {
                d.errorDetails = m.errorDetails;
            }
            if (m.dataVersion != null && m.hasOwnProperty("dataVersion")) {
                d.dataVersion = m.dataVersion;
            }
            return d;
        };

        ResponseReplayInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ResponseReplayInfo.Error = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "MissingReplay"] = 1;
            values[valuesById[2] = "InvalidReplayPath"] = 2;
            values[valuesById[3] = "InvalidReplayData"] = 3;
            values[valuesById[4] = "ParsingError"] = 4;
            values[valuesById[5] = "DownloadError"] = 5;
            return values;
        })();

        return ResponseReplayInfo;
    })();

    SC2APIProtocol.RequestAvailableMaps = (function() {

        function RequestAvailableMaps(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestAvailableMaps.create = function create(properties) {
            return new RequestAvailableMaps(properties);
        };

        RequestAvailableMaps.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestAvailableMaps.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestAvailableMaps.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestAvailableMaps();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestAvailableMaps.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestAvailableMaps.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestAvailableMaps.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestAvailableMaps)
                return d;
            return new $root.SC2APIProtocol.RequestAvailableMaps();
        };

        RequestAvailableMaps.toObject = function toObject() {
            return {};
        };

        RequestAvailableMaps.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestAvailableMaps;
    })();

    SC2APIProtocol.ResponseAvailableMaps = (function() {

        function ResponseAvailableMaps(p) {
            this.localMapPaths = [];
            this.battlenetMapNames = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseAvailableMaps.prototype.localMapPaths = $util.emptyArray;
        ResponseAvailableMaps.prototype.battlenetMapNames = $util.emptyArray;

        ResponseAvailableMaps.create = function create(properties) {
            return new ResponseAvailableMaps(properties);
        };

        ResponseAvailableMaps.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.localMapPaths != null && m.localMapPaths.length) {
                for (var i = 0; i < m.localMapPaths.length; ++i)
                    w.uint32(10).string(m.localMapPaths[i]);
            }
            if (m.battlenetMapNames != null && m.battlenetMapNames.length) {
                for (var i = 0; i < m.battlenetMapNames.length; ++i)
                    w.uint32(18).string(m.battlenetMapNames[i]);
            }
            return w;
        };

        ResponseAvailableMaps.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseAvailableMaps.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseAvailableMaps();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.localMapPaths && m.localMapPaths.length))
                        m.localMapPaths = [];
                    m.localMapPaths.push(r.string());
                    break;
                case 2:
                    if (!(m.battlenetMapNames && m.battlenetMapNames.length))
                        m.battlenetMapNames = [];
                    m.battlenetMapNames.push(r.string());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseAvailableMaps.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseAvailableMaps.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.localMapPaths != null && m.hasOwnProperty("localMapPaths")) {
                if (!Array.isArray(m.localMapPaths))
                    return "localMapPaths: array expected";
                for (var i = 0; i < m.localMapPaths.length; ++i) {
                    if (!$util.isString(m.localMapPaths[i]))
                        return "localMapPaths: string[] expected";
                }
            }
            if (m.battlenetMapNames != null && m.hasOwnProperty("battlenetMapNames")) {
                if (!Array.isArray(m.battlenetMapNames))
                    return "battlenetMapNames: array expected";
                for (var i = 0; i < m.battlenetMapNames.length; ++i) {
                    if (!$util.isString(m.battlenetMapNames[i]))
                        return "battlenetMapNames: string[] expected";
                }
            }
            return null;
        };

        ResponseAvailableMaps.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseAvailableMaps)
                return d;
            var m = new $root.SC2APIProtocol.ResponseAvailableMaps();
            if (d.localMapPaths) {
                if (!Array.isArray(d.localMapPaths))
                    throw TypeError(".SC2APIProtocol.ResponseAvailableMaps.localMapPaths: array expected");
                m.localMapPaths = [];
                for (var i = 0; i < d.localMapPaths.length; ++i) {
                    m.localMapPaths[i] = String(d.localMapPaths[i]);
                }
            }
            if (d.battlenetMapNames) {
                if (!Array.isArray(d.battlenetMapNames))
                    throw TypeError(".SC2APIProtocol.ResponseAvailableMaps.battlenetMapNames: array expected");
                m.battlenetMapNames = [];
                for (var i = 0; i < d.battlenetMapNames.length; ++i) {
                    m.battlenetMapNames[i] = String(d.battlenetMapNames[i]);
                }
            }
            return m;
        };

        ResponseAvailableMaps.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.localMapPaths = [];
                d.battlenetMapNames = [];
            }
            if (m.localMapPaths && m.localMapPaths.length) {
                d.localMapPaths = [];
                for (var j = 0; j < m.localMapPaths.length; ++j) {
                    d.localMapPaths[j] = m.localMapPaths[j];
                }
            }
            if (m.battlenetMapNames && m.battlenetMapNames.length) {
                d.battlenetMapNames = [];
                for (var j = 0; j < m.battlenetMapNames.length; ++j) {
                    d.battlenetMapNames[j] = m.battlenetMapNames[j];
                }
            }
            return d;
        };

        ResponseAvailableMaps.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseAvailableMaps;
    })();

    SC2APIProtocol.RequestSaveMap = (function() {

        function RequestSaveMap(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestSaveMap.prototype.mapPath = "";
        RequestSaveMap.prototype.mapData = $util.newBuffer([]);

        RequestSaveMap.create = function create(properties) {
            return new RequestSaveMap(properties);
        };

        RequestSaveMap.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.mapPath != null && Object.hasOwnProperty.call(m, "mapPath"))
                w.uint32(10).string(m.mapPath);
            if (m.mapData != null && Object.hasOwnProperty.call(m, "mapData"))
                w.uint32(18).bytes(m.mapData);
            return w;
        };

        RequestSaveMap.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestSaveMap.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestSaveMap();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.mapPath = r.string();
                    break;
                case 2:
                    m.mapData = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestSaveMap.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestSaveMap.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.mapPath != null && m.hasOwnProperty("mapPath")) {
                if (!$util.isString(m.mapPath))
                    return "mapPath: string expected";
            }
            if (m.mapData != null && m.hasOwnProperty("mapData")) {
                if (!(m.mapData && typeof m.mapData.length === "number" || $util.isString(m.mapData)))
                    return "mapData: buffer expected";
            }
            return null;
        };

        RequestSaveMap.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestSaveMap)
                return d;
            var m = new $root.SC2APIProtocol.RequestSaveMap();
            if (d.mapPath != null) {
                m.mapPath = String(d.mapPath);
            }
            if (d.mapData != null) {
                if (typeof d.mapData === "string")
                    $util.base64.decode(d.mapData, m.mapData = $util.newBuffer($util.base64.length(d.mapData)), 0);
                else if (d.mapData.length)
                    m.mapData = d.mapData;
            }
            return m;
        };

        RequestSaveMap.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.mapPath = "";
                if (o.bytes === String)
                    d.mapData = "";
                else {
                    d.mapData = [];
                    if (o.bytes !== Array)
                        d.mapData = $util.newBuffer(d.mapData);
                }
            }
            if (m.mapPath != null && m.hasOwnProperty("mapPath")) {
                d.mapPath = m.mapPath;
            }
            if (m.mapData != null && m.hasOwnProperty("mapData")) {
                d.mapData = o.bytes === String ? $util.base64.encode(m.mapData, 0, m.mapData.length) : o.bytes === Array ? Array.prototype.slice.call(m.mapData) : m.mapData;
            }
            return d;
        };

        RequestSaveMap.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSaveMap;
    })();

    SC2APIProtocol.ResponseSaveMap = (function() {

        function ResponseSaveMap(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseSaveMap.prototype.error = 1;

        ResponseSaveMap.create = function create(properties) {
            return new ResponseSaveMap(properties);
        };

        ResponseSaveMap.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.error != null && Object.hasOwnProperty.call(m, "error"))
                w.uint32(8).int32(m.error);
            return w;
        };

        ResponseSaveMap.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseSaveMap.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseSaveMap();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.error = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseSaveMap.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseSaveMap.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.error != null && m.hasOwnProperty("error")) {
                switch (m.error) {
                default:
                    return "error: enum value expected";
                case 1:
                    break;
                }
            }
            return null;
        };

        ResponseSaveMap.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseSaveMap)
                return d;
            var m = new $root.SC2APIProtocol.ResponseSaveMap();
            switch (d.error) {
            case "InvalidMapData":
            case 1:
                m.error = 1;
                break;
            }
            return m;
        };

        ResponseSaveMap.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.error = o.enums === String ? "InvalidMapData" : 1;
            }
            if (m.error != null && m.hasOwnProperty("error")) {
                d.error = o.enums === String ? $root.SC2APIProtocol.ResponseSaveMap.Error[m.error] : m.error;
            }
            return d;
        };

        ResponseSaveMap.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ResponseSaveMap.Error = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "InvalidMapData"] = 1;
            return values;
        })();

        return ResponseSaveMap;
    })();

    SC2APIProtocol.RequestPing = (function() {

        function RequestPing(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestPing.create = function create(properties) {
            return new RequestPing(properties);
        };

        RequestPing.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        RequestPing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestPing.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestPing();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestPing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestPing.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        RequestPing.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestPing)
                return d;
            return new $root.SC2APIProtocol.RequestPing();
        };

        RequestPing.toObject = function toObject() {
            return {};
        };

        RequestPing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPing;
    })();

    SC2APIProtocol.ResponsePing = (function() {

        function ResponsePing(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponsePing.prototype.gameVersion = "";
        ResponsePing.prototype.dataVersion = "";
        ResponsePing.prototype.dataBuild = 0;
        ResponsePing.prototype.baseBuild = 0;

        ResponsePing.create = function create(properties) {
            return new ResponsePing(properties);
        };

        ResponsePing.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.gameVersion != null && Object.hasOwnProperty.call(m, "gameVersion"))
                w.uint32(10).string(m.gameVersion);
            if (m.dataVersion != null && Object.hasOwnProperty.call(m, "dataVersion"))
                w.uint32(18).string(m.dataVersion);
            if (m.dataBuild != null && Object.hasOwnProperty.call(m, "dataBuild"))
                w.uint32(24).uint32(m.dataBuild);
            if (m.baseBuild != null && Object.hasOwnProperty.call(m, "baseBuild"))
                w.uint32(32).uint32(m.baseBuild);
            return w;
        };

        ResponsePing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponsePing.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponsePing();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.gameVersion = r.string();
                    break;
                case 2:
                    m.dataVersion = r.string();
                    break;
                case 3:
                    m.dataBuild = r.uint32();
                    break;
                case 4:
                    m.baseBuild = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponsePing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponsePing.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.gameVersion != null && m.hasOwnProperty("gameVersion")) {
                if (!$util.isString(m.gameVersion))
                    return "gameVersion: string expected";
            }
            if (m.dataVersion != null && m.hasOwnProperty("dataVersion")) {
                if (!$util.isString(m.dataVersion))
                    return "dataVersion: string expected";
            }
            if (m.dataBuild != null && m.hasOwnProperty("dataBuild")) {
                if (!$util.isInteger(m.dataBuild))
                    return "dataBuild: integer expected";
            }
            if (m.baseBuild != null && m.hasOwnProperty("baseBuild")) {
                if (!$util.isInteger(m.baseBuild))
                    return "baseBuild: integer expected";
            }
            return null;
        };

        ResponsePing.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponsePing)
                return d;
            var m = new $root.SC2APIProtocol.ResponsePing();
            if (d.gameVersion != null) {
                m.gameVersion = String(d.gameVersion);
            }
            if (d.dataVersion != null) {
                m.dataVersion = String(d.dataVersion);
            }
            if (d.dataBuild != null) {
                m.dataBuild = d.dataBuild >>> 0;
            }
            if (d.baseBuild != null) {
                m.baseBuild = d.baseBuild >>> 0;
            }
            return m;
        };

        ResponsePing.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.gameVersion = "";
                d.dataVersion = "";
                d.dataBuild = 0;
                d.baseBuild = 0;
            }
            if (m.gameVersion != null && m.hasOwnProperty("gameVersion")) {
                d.gameVersion = m.gameVersion;
            }
            if (m.dataVersion != null && m.hasOwnProperty("dataVersion")) {
                d.dataVersion = m.dataVersion;
            }
            if (m.dataBuild != null && m.hasOwnProperty("dataBuild")) {
                d.dataBuild = m.dataBuild;
            }
            if (m.baseBuild != null && m.hasOwnProperty("baseBuild")) {
                d.baseBuild = m.baseBuild;
            }
            return d;
        };

        ResponsePing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponsePing;
    })();

    SC2APIProtocol.RequestDebug = (function() {

        function RequestDebug(p) {
            this.debug = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        RequestDebug.prototype.debug = $util.emptyArray;

        RequestDebug.create = function create(properties) {
            return new RequestDebug(properties);
        };

        RequestDebug.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.debug != null && m.debug.length) {
                for (var i = 0; i < m.debug.length; ++i)
                    $root.SC2APIProtocol.DebugCommand.encode(m.debug[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        RequestDebug.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        RequestDebug.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.RequestDebug();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.debug && m.debug.length))
                        m.debug = [];
                    m.debug.push($root.SC2APIProtocol.DebugCommand.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        RequestDebug.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        RequestDebug.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.debug != null && m.hasOwnProperty("debug")) {
                if (!Array.isArray(m.debug))
                    return "debug: array expected";
                for (var i = 0; i < m.debug.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.DebugCommand.verify(m.debug[i]);
                        if (e)
                            return "debug." + e;
                    }
                }
            }
            return null;
        };

        RequestDebug.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.RequestDebug)
                return d;
            var m = new $root.SC2APIProtocol.RequestDebug();
            if (d.debug) {
                if (!Array.isArray(d.debug))
                    throw TypeError(".SC2APIProtocol.RequestDebug.debug: array expected");
                m.debug = [];
                for (var i = 0; i < d.debug.length; ++i) {
                    if (typeof d.debug[i] !== "object")
                        throw TypeError(".SC2APIProtocol.RequestDebug.debug: object expected");
                    m.debug[i] = $root.SC2APIProtocol.DebugCommand.fromObject(d.debug[i]);
                }
            }
            return m;
        };

        RequestDebug.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.debug = [];
            }
            if (m.debug && m.debug.length) {
                d.debug = [];
                for (var j = 0; j < m.debug.length; ++j) {
                    d.debug[j] = $root.SC2APIProtocol.DebugCommand.toObject(m.debug[j], o);
                }
            }
            return d;
        };

        RequestDebug.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDebug;
    })();

    SC2APIProtocol.ResponseDebug = (function() {

        function ResponseDebug(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ResponseDebug.create = function create(properties) {
            return new ResponseDebug(properties);
        };

        ResponseDebug.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            return w;
        };

        ResponseDebug.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ResponseDebug.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ResponseDebug();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ResponseDebug.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ResponseDebug.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            return null;
        };

        ResponseDebug.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ResponseDebug)
                return d;
            return new $root.SC2APIProtocol.ResponseDebug();
        };

        ResponseDebug.toObject = function toObject() {
            return {};
        };

        ResponseDebug.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResponseDebug;
    })();

    SC2APIProtocol.Difficulty = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "VeryEasy"] = 1;
        values[valuesById[2] = "Easy"] = 2;
        values[valuesById[3] = "Medium"] = 3;
        values[valuesById[4] = "MediumHard"] = 4;
        values[valuesById[5] = "Hard"] = 5;
        values[valuesById[6] = "Harder"] = 6;
        values[valuesById[7] = "VeryHard"] = 7;
        values[valuesById[8] = "CheatVision"] = 8;
        values[valuesById[9] = "CheatMoney"] = 9;
        values[valuesById[10] = "CheatInsane"] = 10;
        return values;
    })();

    SC2APIProtocol.PlayerType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Participant"] = 1;
        values[valuesById[2] = "Computer"] = 2;
        values[valuesById[3] = "Observer"] = 3;
        return values;
    })();

    SC2APIProtocol.AIBuild = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "RandomBuild"] = 1;
        values[valuesById[2] = "Rush"] = 2;
        values[valuesById[3] = "Timing"] = 3;
        values[valuesById[4] = "Power"] = 4;
        values[valuesById[5] = "Macro"] = 5;
        values[valuesById[6] = "Air"] = 6;
        return values;
    })();

    SC2APIProtocol.PlayerSetup = (function() {

        function PlayerSetup(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PlayerSetup.prototype.type = 1;
        PlayerSetup.prototype.race = 0;
        PlayerSetup.prototype.difficulty = 1;
        PlayerSetup.prototype.playerName = "";
        PlayerSetup.prototype.aiBuild = 1;

        PlayerSetup.create = function create(properties) {
            return new PlayerSetup(properties);
        };

        PlayerSetup.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(8).int32(m.type);
            if (m.race != null && Object.hasOwnProperty.call(m, "race"))
                w.uint32(16).int32(m.race);
            if (m.difficulty != null && Object.hasOwnProperty.call(m, "difficulty"))
                w.uint32(24).int32(m.difficulty);
            if (m.playerName != null && Object.hasOwnProperty.call(m, "playerName"))
                w.uint32(34).string(m.playerName);
            if (m.aiBuild != null && Object.hasOwnProperty.call(m, "aiBuild"))
                w.uint32(40).int32(m.aiBuild);
            return w;
        };

        PlayerSetup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PlayerSetup.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PlayerSetup();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.type = r.int32();
                    break;
                case 2:
                    m.race = r.int32();
                    break;
                case 3:
                    m.difficulty = r.int32();
                    break;
                case 4:
                    m.playerName = r.string();
                    break;
                case 5:
                    m.aiBuild = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PlayerSetup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PlayerSetup.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.type != null && m.hasOwnProperty("type")) {
                switch (m.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            if (m.race != null && m.hasOwnProperty("race")) {
                switch (m.race) {
                default:
                    return "race: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.difficulty != null && m.hasOwnProperty("difficulty")) {
                switch (m.difficulty) {
                default:
                    return "difficulty: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    break;
                }
            }
            if (m.playerName != null && m.hasOwnProperty("playerName")) {
                if (!$util.isString(m.playerName))
                    return "playerName: string expected";
            }
            if (m.aiBuild != null && m.hasOwnProperty("aiBuild")) {
                switch (m.aiBuild) {
                default:
                    return "aiBuild: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            }
            return null;
        };

        PlayerSetup.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PlayerSetup)
                return d;
            var m = new $root.SC2APIProtocol.PlayerSetup();
            switch (d.type) {
            case "Participant":
            case 1:
                m.type = 1;
                break;
            case "Computer":
            case 2:
                m.type = 2;
                break;
            case "Observer":
            case 3:
                m.type = 3;
                break;
            }
            switch (d.race) {
            case "NoRace":
            case 0:
                m.race = 0;
                break;
            case "Terran":
            case 1:
                m.race = 1;
                break;
            case "Zerg":
            case 2:
                m.race = 2;
                break;
            case "Protoss":
            case 3:
                m.race = 3;
                break;
            case "Random":
            case 4:
                m.race = 4;
                break;
            }
            switch (d.difficulty) {
            case "VeryEasy":
            case 1:
                m.difficulty = 1;
                break;
            case "Easy":
            case 2:
                m.difficulty = 2;
                break;
            case "Medium":
            case 3:
                m.difficulty = 3;
                break;
            case "MediumHard":
            case 4:
                m.difficulty = 4;
                break;
            case "Hard":
            case 5:
                m.difficulty = 5;
                break;
            case "Harder":
            case 6:
                m.difficulty = 6;
                break;
            case "VeryHard":
            case 7:
                m.difficulty = 7;
                break;
            case "CheatVision":
            case 8:
                m.difficulty = 8;
                break;
            case "CheatMoney":
            case 9:
                m.difficulty = 9;
                break;
            case "CheatInsane":
            case 10:
                m.difficulty = 10;
                break;
            }
            if (d.playerName != null) {
                m.playerName = String(d.playerName);
            }
            switch (d.aiBuild) {
            case "RandomBuild":
            case 1:
                m.aiBuild = 1;
                break;
            case "Rush":
            case 2:
                m.aiBuild = 2;
                break;
            case "Timing":
            case 3:
                m.aiBuild = 3;
                break;
            case "Power":
            case 4:
                m.aiBuild = 4;
                break;
            case "Macro":
            case 5:
                m.aiBuild = 5;
                break;
            case "Air":
            case 6:
                m.aiBuild = 6;
                break;
            }
            return m;
        };

        PlayerSetup.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.type = o.enums === String ? "Participant" : 1;
                d.race = o.enums === String ? "NoRace" : 0;
                d.difficulty = o.enums === String ? "VeryEasy" : 1;
                d.playerName = "";
                d.aiBuild = o.enums === String ? "RandomBuild" : 1;
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                d.type = o.enums === String ? $root.SC2APIProtocol.PlayerType[m.type] : m.type;
            }
            if (m.race != null && m.hasOwnProperty("race")) {
                d.race = o.enums === String ? $root.SC2APIProtocol.Race[m.race] : m.race;
            }
            if (m.difficulty != null && m.hasOwnProperty("difficulty")) {
                d.difficulty = o.enums === String ? $root.SC2APIProtocol.Difficulty[m.difficulty] : m.difficulty;
            }
            if (m.playerName != null && m.hasOwnProperty("playerName")) {
                d.playerName = m.playerName;
            }
            if (m.aiBuild != null && m.hasOwnProperty("aiBuild")) {
                d.aiBuild = o.enums === String ? $root.SC2APIProtocol.AIBuild[m.aiBuild] : m.aiBuild;
            }
            return d;
        };

        PlayerSetup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlayerSetup;
    })();

    SC2APIProtocol.SpatialCameraSetup = (function() {

        function SpatialCameraSetup(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        SpatialCameraSetup.prototype.resolution = null;
        SpatialCameraSetup.prototype.minimapResolution = null;
        SpatialCameraSetup.prototype.width = 0;
        SpatialCameraSetup.prototype.cropToPlayableArea = false;
        SpatialCameraSetup.prototype.allowCheatingLayers = false;

        SpatialCameraSetup.create = function create(properties) {
            return new SpatialCameraSetup(properties);
        };

        SpatialCameraSetup.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.width != null && Object.hasOwnProperty.call(m, "width"))
                w.uint32(13).float(m.width);
            if (m.resolution != null && Object.hasOwnProperty.call(m, "resolution"))
                $root.SC2APIProtocol.Size2DI.encode(m.resolution, w.uint32(18).fork()).ldelim();
            if (m.minimapResolution != null && Object.hasOwnProperty.call(m, "minimapResolution"))
                $root.SC2APIProtocol.Size2DI.encode(m.minimapResolution, w.uint32(26).fork()).ldelim();
            if (m.cropToPlayableArea != null && Object.hasOwnProperty.call(m, "cropToPlayableArea"))
                w.uint32(32).bool(m.cropToPlayableArea);
            if (m.allowCheatingLayers != null && Object.hasOwnProperty.call(m, "allowCheatingLayers"))
                w.uint32(40).bool(m.allowCheatingLayers);
            return w;
        };

        SpatialCameraSetup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        SpatialCameraSetup.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.SpatialCameraSetup();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 2:
                    m.resolution = $root.SC2APIProtocol.Size2DI.decode(r, r.uint32());
                    break;
                case 3:
                    m.minimapResolution = $root.SC2APIProtocol.Size2DI.decode(r, r.uint32());
                    break;
                case 1:
                    m.width = r.float();
                    break;
                case 4:
                    m.cropToPlayableArea = r.bool();
                    break;
                case 5:
                    m.allowCheatingLayers = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        SpatialCameraSetup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        SpatialCameraSetup.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.resolution != null && m.hasOwnProperty("resolution")) {
                {
                    var e = $root.SC2APIProtocol.Size2DI.verify(m.resolution);
                    if (e)
                        return "resolution." + e;
                }
            }
            if (m.minimapResolution != null && m.hasOwnProperty("minimapResolution")) {
                {
                    var e = $root.SC2APIProtocol.Size2DI.verify(m.minimapResolution);
                    if (e)
                        return "minimapResolution." + e;
                }
            }
            if (m.width != null && m.hasOwnProperty("width")) {
                if (typeof m.width !== "number")
                    return "width: number expected";
            }
            if (m.cropToPlayableArea != null && m.hasOwnProperty("cropToPlayableArea")) {
                if (typeof m.cropToPlayableArea !== "boolean")
                    return "cropToPlayableArea: boolean expected";
            }
            if (m.allowCheatingLayers != null && m.hasOwnProperty("allowCheatingLayers")) {
                if (typeof m.allowCheatingLayers !== "boolean")
                    return "allowCheatingLayers: boolean expected";
            }
            return null;
        };

        SpatialCameraSetup.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.SpatialCameraSetup)
                return d;
            var m = new $root.SC2APIProtocol.SpatialCameraSetup();
            if (d.resolution != null) {
                if (typeof d.resolution !== "object")
                    throw TypeError(".SC2APIProtocol.SpatialCameraSetup.resolution: object expected");
                m.resolution = $root.SC2APIProtocol.Size2DI.fromObject(d.resolution);
            }
            if (d.minimapResolution != null) {
                if (typeof d.minimapResolution !== "object")
                    throw TypeError(".SC2APIProtocol.SpatialCameraSetup.minimapResolution: object expected");
                m.minimapResolution = $root.SC2APIProtocol.Size2DI.fromObject(d.minimapResolution);
            }
            if (d.width != null) {
                m.width = Number(d.width);
            }
            if (d.cropToPlayableArea != null) {
                m.cropToPlayableArea = Boolean(d.cropToPlayableArea);
            }
            if (d.allowCheatingLayers != null) {
                m.allowCheatingLayers = Boolean(d.allowCheatingLayers);
            }
            return m;
        };

        SpatialCameraSetup.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.width = 0;
                d.resolution = null;
                d.minimapResolution = null;
                d.cropToPlayableArea = false;
                d.allowCheatingLayers = false;
            }
            if (m.width != null && m.hasOwnProperty("width")) {
                d.width = o.json && !isFinite(m.width) ? String(m.width) : m.width;
            }
            if (m.resolution != null && m.hasOwnProperty("resolution")) {
                d.resolution = $root.SC2APIProtocol.Size2DI.toObject(m.resolution, o);
            }
            if (m.minimapResolution != null && m.hasOwnProperty("minimapResolution")) {
                d.minimapResolution = $root.SC2APIProtocol.Size2DI.toObject(m.minimapResolution, o);
            }
            if (m.cropToPlayableArea != null && m.hasOwnProperty("cropToPlayableArea")) {
                d.cropToPlayableArea = m.cropToPlayableArea;
            }
            if (m.allowCheatingLayers != null && m.hasOwnProperty("allowCheatingLayers")) {
                d.allowCheatingLayers = m.allowCheatingLayers;
            }
            return d;
        };

        SpatialCameraSetup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SpatialCameraSetup;
    })();

    SC2APIProtocol.InterfaceOptions = (function() {

        function InterfaceOptions(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        InterfaceOptions.prototype.raw = false;
        InterfaceOptions.prototype.score = false;
        InterfaceOptions.prototype.featureLayer = null;
        InterfaceOptions.prototype.render = null;
        InterfaceOptions.prototype.showCloaked = false;
        InterfaceOptions.prototype.showBurrowedShadows = false;
        InterfaceOptions.prototype.showPlaceholders = false;
        InterfaceOptions.prototype.rawAffectsSelection = false;
        InterfaceOptions.prototype.rawCropToPlayableArea = false;

        InterfaceOptions.create = function create(properties) {
            return new InterfaceOptions(properties);
        };

        InterfaceOptions.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.raw != null && Object.hasOwnProperty.call(m, "raw"))
                w.uint32(8).bool(m.raw);
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                w.uint32(16).bool(m.score);
            if (m.featureLayer != null && Object.hasOwnProperty.call(m, "featureLayer"))
                $root.SC2APIProtocol.SpatialCameraSetup.encode(m.featureLayer, w.uint32(26).fork()).ldelim();
            if (m.render != null && Object.hasOwnProperty.call(m, "render"))
                $root.SC2APIProtocol.SpatialCameraSetup.encode(m.render, w.uint32(34).fork()).ldelim();
            if (m.showCloaked != null && Object.hasOwnProperty.call(m, "showCloaked"))
                w.uint32(40).bool(m.showCloaked);
            if (m.rawAffectsSelection != null && Object.hasOwnProperty.call(m, "rawAffectsSelection"))
                w.uint32(48).bool(m.rawAffectsSelection);
            if (m.rawCropToPlayableArea != null && Object.hasOwnProperty.call(m, "rawCropToPlayableArea"))
                w.uint32(56).bool(m.rawCropToPlayableArea);
            if (m.showPlaceholders != null && Object.hasOwnProperty.call(m, "showPlaceholders"))
                w.uint32(64).bool(m.showPlaceholders);
            if (m.showBurrowedShadows != null && Object.hasOwnProperty.call(m, "showBurrowedShadows"))
                w.uint32(72).bool(m.showBurrowedShadows);
            return w;
        };

        InterfaceOptions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        InterfaceOptions.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.InterfaceOptions();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.raw = r.bool();
                    break;
                case 2:
                    m.score = r.bool();
                    break;
                case 3:
                    m.featureLayer = $root.SC2APIProtocol.SpatialCameraSetup.decode(r, r.uint32());
                    break;
                case 4:
                    m.render = $root.SC2APIProtocol.SpatialCameraSetup.decode(r, r.uint32());
                    break;
                case 5:
                    m.showCloaked = r.bool();
                    break;
                case 9:
                    m.showBurrowedShadows = r.bool();
                    break;
                case 8:
                    m.showPlaceholders = r.bool();
                    break;
                case 6:
                    m.rawAffectsSelection = r.bool();
                    break;
                case 7:
                    m.rawCropToPlayableArea = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        InterfaceOptions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        InterfaceOptions.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.raw != null && m.hasOwnProperty("raw")) {
                if (typeof m.raw !== "boolean")
                    return "raw: boolean expected";
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                if (typeof m.score !== "boolean")
                    return "score: boolean expected";
            }
            if (m.featureLayer != null && m.hasOwnProperty("featureLayer")) {
                {
                    var e = $root.SC2APIProtocol.SpatialCameraSetup.verify(m.featureLayer);
                    if (e)
                        return "featureLayer." + e;
                }
            }
            if (m.render != null && m.hasOwnProperty("render")) {
                {
                    var e = $root.SC2APIProtocol.SpatialCameraSetup.verify(m.render);
                    if (e)
                        return "render." + e;
                }
            }
            if (m.showCloaked != null && m.hasOwnProperty("showCloaked")) {
                if (typeof m.showCloaked !== "boolean")
                    return "showCloaked: boolean expected";
            }
            if (m.showBurrowedShadows != null && m.hasOwnProperty("showBurrowedShadows")) {
                if (typeof m.showBurrowedShadows !== "boolean")
                    return "showBurrowedShadows: boolean expected";
            }
            if (m.showPlaceholders != null && m.hasOwnProperty("showPlaceholders")) {
                if (typeof m.showPlaceholders !== "boolean")
                    return "showPlaceholders: boolean expected";
            }
            if (m.rawAffectsSelection != null && m.hasOwnProperty("rawAffectsSelection")) {
                if (typeof m.rawAffectsSelection !== "boolean")
                    return "rawAffectsSelection: boolean expected";
            }
            if (m.rawCropToPlayableArea != null && m.hasOwnProperty("rawCropToPlayableArea")) {
                if (typeof m.rawCropToPlayableArea !== "boolean")
                    return "rawCropToPlayableArea: boolean expected";
            }
            return null;
        };

        InterfaceOptions.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.InterfaceOptions)
                return d;
            var m = new $root.SC2APIProtocol.InterfaceOptions();
            if (d.raw != null) {
                m.raw = Boolean(d.raw);
            }
            if (d.score != null) {
                m.score = Boolean(d.score);
            }
            if (d.featureLayer != null) {
                if (typeof d.featureLayer !== "object")
                    throw TypeError(".SC2APIProtocol.InterfaceOptions.featureLayer: object expected");
                m.featureLayer = $root.SC2APIProtocol.SpatialCameraSetup.fromObject(d.featureLayer);
            }
            if (d.render != null) {
                if (typeof d.render !== "object")
                    throw TypeError(".SC2APIProtocol.InterfaceOptions.render: object expected");
                m.render = $root.SC2APIProtocol.SpatialCameraSetup.fromObject(d.render);
            }
            if (d.showCloaked != null) {
                m.showCloaked = Boolean(d.showCloaked);
            }
            if (d.showBurrowedShadows != null) {
                m.showBurrowedShadows = Boolean(d.showBurrowedShadows);
            }
            if (d.showPlaceholders != null) {
                m.showPlaceholders = Boolean(d.showPlaceholders);
            }
            if (d.rawAffectsSelection != null) {
                m.rawAffectsSelection = Boolean(d.rawAffectsSelection);
            }
            if (d.rawCropToPlayableArea != null) {
                m.rawCropToPlayableArea = Boolean(d.rawCropToPlayableArea);
            }
            return m;
        };

        InterfaceOptions.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.raw = false;
                d.score = false;
                d.featureLayer = null;
                d.render = null;
                d.showCloaked = false;
                d.rawAffectsSelection = false;
                d.rawCropToPlayableArea = false;
                d.showPlaceholders = false;
                d.showBurrowedShadows = false;
            }
            if (m.raw != null && m.hasOwnProperty("raw")) {
                d.raw = m.raw;
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                d.score = m.score;
            }
            if (m.featureLayer != null && m.hasOwnProperty("featureLayer")) {
                d.featureLayer = $root.SC2APIProtocol.SpatialCameraSetup.toObject(m.featureLayer, o);
            }
            if (m.render != null && m.hasOwnProperty("render")) {
                d.render = $root.SC2APIProtocol.SpatialCameraSetup.toObject(m.render, o);
            }
            if (m.showCloaked != null && m.hasOwnProperty("showCloaked")) {
                d.showCloaked = m.showCloaked;
            }
            if (m.rawAffectsSelection != null && m.hasOwnProperty("rawAffectsSelection")) {
                d.rawAffectsSelection = m.rawAffectsSelection;
            }
            if (m.rawCropToPlayableArea != null && m.hasOwnProperty("rawCropToPlayableArea")) {
                d.rawCropToPlayableArea = m.rawCropToPlayableArea;
            }
            if (m.showPlaceholders != null && m.hasOwnProperty("showPlaceholders")) {
                d.showPlaceholders = m.showPlaceholders;
            }
            if (m.showBurrowedShadows != null && m.hasOwnProperty("showBurrowedShadows")) {
                d.showBurrowedShadows = m.showBurrowedShadows;
            }
            return d;
        };

        InterfaceOptions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InterfaceOptions;
    })();

    SC2APIProtocol.PlayerInfo = (function() {

        function PlayerInfo(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PlayerInfo.prototype.playerId = 0;
        PlayerInfo.prototype.type = 1;
        PlayerInfo.prototype.raceRequested = 0;
        PlayerInfo.prototype.raceActual = 0;
        PlayerInfo.prototype.difficulty = 1;
        PlayerInfo.prototype.aiBuild = 1;
        PlayerInfo.prototype.playerName = "";

        PlayerInfo.create = function create(properties) {
            return new PlayerInfo(properties);
        };

        PlayerInfo.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                w.uint32(8).uint32(m.playerId);
            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
                w.uint32(16).int32(m.type);
            if (m.raceRequested != null && Object.hasOwnProperty.call(m, "raceRequested"))
                w.uint32(24).int32(m.raceRequested);
            if (m.raceActual != null && Object.hasOwnProperty.call(m, "raceActual"))
                w.uint32(32).int32(m.raceActual);
            if (m.difficulty != null && Object.hasOwnProperty.call(m, "difficulty"))
                w.uint32(40).int32(m.difficulty);
            if (m.playerName != null && Object.hasOwnProperty.call(m, "playerName"))
                w.uint32(50).string(m.playerName);
            if (m.aiBuild != null && Object.hasOwnProperty.call(m, "aiBuild"))
                w.uint32(56).int32(m.aiBuild);
            return w;
        };

        PlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PlayerInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PlayerInfo();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerId = r.uint32();
                    break;
                case 2:
                    m.type = r.int32();
                    break;
                case 3:
                    m.raceRequested = r.int32();
                    break;
                case 4:
                    m.raceActual = r.int32();
                    break;
                case 5:
                    m.difficulty = r.int32();
                    break;
                case 7:
                    m.aiBuild = r.int32();
                    break;
                case 6:
                    m.playerName = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PlayerInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PlayerInfo.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                if (!$util.isInteger(m.playerId))
                    return "playerId: integer expected";
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                switch (m.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            }
            if (m.raceRequested != null && m.hasOwnProperty("raceRequested")) {
                switch (m.raceRequested) {
                default:
                    return "raceRequested: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.raceActual != null && m.hasOwnProperty("raceActual")) {
                switch (m.raceActual) {
                default:
                    return "raceActual: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            if (m.difficulty != null && m.hasOwnProperty("difficulty")) {
                switch (m.difficulty) {
                default:
                    return "difficulty: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    break;
                }
            }
            if (m.aiBuild != null && m.hasOwnProperty("aiBuild")) {
                switch (m.aiBuild) {
                default:
                    return "aiBuild: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            }
            if (m.playerName != null && m.hasOwnProperty("playerName")) {
                if (!$util.isString(m.playerName))
                    return "playerName: string expected";
            }
            return null;
        };

        PlayerInfo.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PlayerInfo)
                return d;
            var m = new $root.SC2APIProtocol.PlayerInfo();
            if (d.playerId != null) {
                m.playerId = d.playerId >>> 0;
            }
            switch (d.type) {
            case "Participant":
            case 1:
                m.type = 1;
                break;
            case "Computer":
            case 2:
                m.type = 2;
                break;
            case "Observer":
            case 3:
                m.type = 3;
                break;
            }
            switch (d.raceRequested) {
            case "NoRace":
            case 0:
                m.raceRequested = 0;
                break;
            case "Terran":
            case 1:
                m.raceRequested = 1;
                break;
            case "Zerg":
            case 2:
                m.raceRequested = 2;
                break;
            case "Protoss":
            case 3:
                m.raceRequested = 3;
                break;
            case "Random":
            case 4:
                m.raceRequested = 4;
                break;
            }
            switch (d.raceActual) {
            case "NoRace":
            case 0:
                m.raceActual = 0;
                break;
            case "Terran":
            case 1:
                m.raceActual = 1;
                break;
            case "Zerg":
            case 2:
                m.raceActual = 2;
                break;
            case "Protoss":
            case 3:
                m.raceActual = 3;
                break;
            case "Random":
            case 4:
                m.raceActual = 4;
                break;
            }
            switch (d.difficulty) {
            case "VeryEasy":
            case 1:
                m.difficulty = 1;
                break;
            case "Easy":
            case 2:
                m.difficulty = 2;
                break;
            case "Medium":
            case 3:
                m.difficulty = 3;
                break;
            case "MediumHard":
            case 4:
                m.difficulty = 4;
                break;
            case "Hard":
            case 5:
                m.difficulty = 5;
                break;
            case "Harder":
            case 6:
                m.difficulty = 6;
                break;
            case "VeryHard":
            case 7:
                m.difficulty = 7;
                break;
            case "CheatVision":
            case 8:
                m.difficulty = 8;
                break;
            case "CheatMoney":
            case 9:
                m.difficulty = 9;
                break;
            case "CheatInsane":
            case 10:
                m.difficulty = 10;
                break;
            }
            switch (d.aiBuild) {
            case "RandomBuild":
            case 1:
                m.aiBuild = 1;
                break;
            case "Rush":
            case 2:
                m.aiBuild = 2;
                break;
            case "Timing":
            case 3:
                m.aiBuild = 3;
                break;
            case "Power":
            case 4:
                m.aiBuild = 4;
                break;
            case "Macro":
            case 5:
                m.aiBuild = 5;
                break;
            case "Air":
            case 6:
                m.aiBuild = 6;
                break;
            }
            if (d.playerName != null) {
                m.playerName = String(d.playerName);
            }
            return m;
        };

        PlayerInfo.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.playerId = 0;
                d.type = o.enums === String ? "Participant" : 1;
                d.raceRequested = o.enums === String ? "NoRace" : 0;
                d.raceActual = o.enums === String ? "NoRace" : 0;
                d.difficulty = o.enums === String ? "VeryEasy" : 1;
                d.playerName = "";
                d.aiBuild = o.enums === String ? "RandomBuild" : 1;
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = m.playerId;
            }
            if (m.type != null && m.hasOwnProperty("type")) {
                d.type = o.enums === String ? $root.SC2APIProtocol.PlayerType[m.type] : m.type;
            }
            if (m.raceRequested != null && m.hasOwnProperty("raceRequested")) {
                d.raceRequested = o.enums === String ? $root.SC2APIProtocol.Race[m.raceRequested] : m.raceRequested;
            }
            if (m.raceActual != null && m.hasOwnProperty("raceActual")) {
                d.raceActual = o.enums === String ? $root.SC2APIProtocol.Race[m.raceActual] : m.raceActual;
            }
            if (m.difficulty != null && m.hasOwnProperty("difficulty")) {
                d.difficulty = o.enums === String ? $root.SC2APIProtocol.Difficulty[m.difficulty] : m.difficulty;
            }
            if (m.playerName != null && m.hasOwnProperty("playerName")) {
                d.playerName = m.playerName;
            }
            if (m.aiBuild != null && m.hasOwnProperty("aiBuild")) {
                d.aiBuild = o.enums === String ? $root.SC2APIProtocol.AIBuild[m.aiBuild] : m.aiBuild;
            }
            return d;
        };

        PlayerInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlayerInfo;
    })();

    SC2APIProtocol.PlayerCommon = (function() {

        function PlayerCommon(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PlayerCommon.prototype.playerId = 0;
        PlayerCommon.prototype.minerals = 0;
        PlayerCommon.prototype.vespene = 0;
        PlayerCommon.prototype.foodCap = 0;
        PlayerCommon.prototype.foodUsed = 0;
        PlayerCommon.prototype.foodArmy = 0;
        PlayerCommon.prototype.foodWorkers = 0;
        PlayerCommon.prototype.idleWorkerCount = 0;
        PlayerCommon.prototype.armyCount = 0;
        PlayerCommon.prototype.warpGateCount = 0;
        PlayerCommon.prototype.larvaCount = 0;

        PlayerCommon.create = function create(properties) {
            return new PlayerCommon(properties);
        };

        PlayerCommon.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                w.uint32(8).uint32(m.playerId);
            if (m.minerals != null && Object.hasOwnProperty.call(m, "minerals"))
                w.uint32(16).uint32(m.minerals);
            if (m.vespene != null && Object.hasOwnProperty.call(m, "vespene"))
                w.uint32(24).uint32(m.vespene);
            if (m.foodCap != null && Object.hasOwnProperty.call(m, "foodCap"))
                w.uint32(32).uint32(m.foodCap);
            if (m.foodUsed != null && Object.hasOwnProperty.call(m, "foodUsed"))
                w.uint32(40).uint32(m.foodUsed);
            if (m.foodArmy != null && Object.hasOwnProperty.call(m, "foodArmy"))
                w.uint32(48).uint32(m.foodArmy);
            if (m.foodWorkers != null && Object.hasOwnProperty.call(m, "foodWorkers"))
                w.uint32(56).uint32(m.foodWorkers);
            if (m.idleWorkerCount != null && Object.hasOwnProperty.call(m, "idleWorkerCount"))
                w.uint32(64).uint32(m.idleWorkerCount);
            if (m.armyCount != null && Object.hasOwnProperty.call(m, "armyCount"))
                w.uint32(72).uint32(m.armyCount);
            if (m.warpGateCount != null && Object.hasOwnProperty.call(m, "warpGateCount"))
                w.uint32(80).uint32(m.warpGateCount);
            if (m.larvaCount != null && Object.hasOwnProperty.call(m, "larvaCount"))
                w.uint32(88).uint32(m.larvaCount);
            return w;
        };

        PlayerCommon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PlayerCommon.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PlayerCommon();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerId = r.uint32();
                    break;
                case 2:
                    m.minerals = r.uint32();
                    break;
                case 3:
                    m.vespene = r.uint32();
                    break;
                case 4:
                    m.foodCap = r.uint32();
                    break;
                case 5:
                    m.foodUsed = r.uint32();
                    break;
                case 6:
                    m.foodArmy = r.uint32();
                    break;
                case 7:
                    m.foodWorkers = r.uint32();
                    break;
                case 8:
                    m.idleWorkerCount = r.uint32();
                    break;
                case 9:
                    m.armyCount = r.uint32();
                    break;
                case 10:
                    m.warpGateCount = r.uint32();
                    break;
                case 11:
                    m.larvaCount = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PlayerCommon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PlayerCommon.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                if (!$util.isInteger(m.playerId))
                    return "playerId: integer expected";
            }
            if (m.minerals != null && m.hasOwnProperty("minerals")) {
                if (!$util.isInteger(m.minerals))
                    return "minerals: integer expected";
            }
            if (m.vespene != null && m.hasOwnProperty("vespene")) {
                if (!$util.isInteger(m.vespene))
                    return "vespene: integer expected";
            }
            if (m.foodCap != null && m.hasOwnProperty("foodCap")) {
                if (!$util.isInteger(m.foodCap))
                    return "foodCap: integer expected";
            }
            if (m.foodUsed != null && m.hasOwnProperty("foodUsed")) {
                if (!$util.isInteger(m.foodUsed))
                    return "foodUsed: integer expected";
            }
            if (m.foodArmy != null && m.hasOwnProperty("foodArmy")) {
                if (!$util.isInteger(m.foodArmy))
                    return "foodArmy: integer expected";
            }
            if (m.foodWorkers != null && m.hasOwnProperty("foodWorkers")) {
                if (!$util.isInteger(m.foodWorkers))
                    return "foodWorkers: integer expected";
            }
            if (m.idleWorkerCount != null && m.hasOwnProperty("idleWorkerCount")) {
                if (!$util.isInteger(m.idleWorkerCount))
                    return "idleWorkerCount: integer expected";
            }
            if (m.armyCount != null && m.hasOwnProperty("armyCount")) {
                if (!$util.isInteger(m.armyCount))
                    return "armyCount: integer expected";
            }
            if (m.warpGateCount != null && m.hasOwnProperty("warpGateCount")) {
                if (!$util.isInteger(m.warpGateCount))
                    return "warpGateCount: integer expected";
            }
            if (m.larvaCount != null && m.hasOwnProperty("larvaCount")) {
                if (!$util.isInteger(m.larvaCount))
                    return "larvaCount: integer expected";
            }
            return null;
        };

        PlayerCommon.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PlayerCommon)
                return d;
            var m = new $root.SC2APIProtocol.PlayerCommon();
            if (d.playerId != null) {
                m.playerId = d.playerId >>> 0;
            }
            if (d.minerals != null) {
                m.minerals = d.minerals >>> 0;
            }
            if (d.vespene != null) {
                m.vespene = d.vespene >>> 0;
            }
            if (d.foodCap != null) {
                m.foodCap = d.foodCap >>> 0;
            }
            if (d.foodUsed != null) {
                m.foodUsed = d.foodUsed >>> 0;
            }
            if (d.foodArmy != null) {
                m.foodArmy = d.foodArmy >>> 0;
            }
            if (d.foodWorkers != null) {
                m.foodWorkers = d.foodWorkers >>> 0;
            }
            if (d.idleWorkerCount != null) {
                m.idleWorkerCount = d.idleWorkerCount >>> 0;
            }
            if (d.armyCount != null) {
                m.armyCount = d.armyCount >>> 0;
            }
            if (d.warpGateCount != null) {
                m.warpGateCount = d.warpGateCount >>> 0;
            }
            if (d.larvaCount != null) {
                m.larvaCount = d.larvaCount >>> 0;
            }
            return m;
        };

        PlayerCommon.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.playerId = 0;
                d.minerals = 0;
                d.vespene = 0;
                d.foodCap = 0;
                d.foodUsed = 0;
                d.foodArmy = 0;
                d.foodWorkers = 0;
                d.idleWorkerCount = 0;
                d.armyCount = 0;
                d.warpGateCount = 0;
                d.larvaCount = 0;
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = m.playerId;
            }
            if (m.minerals != null && m.hasOwnProperty("minerals")) {
                d.minerals = m.minerals;
            }
            if (m.vespene != null && m.hasOwnProperty("vespene")) {
                d.vespene = m.vespene;
            }
            if (m.foodCap != null && m.hasOwnProperty("foodCap")) {
                d.foodCap = m.foodCap;
            }
            if (m.foodUsed != null && m.hasOwnProperty("foodUsed")) {
                d.foodUsed = m.foodUsed;
            }
            if (m.foodArmy != null && m.hasOwnProperty("foodArmy")) {
                d.foodArmy = m.foodArmy;
            }
            if (m.foodWorkers != null && m.hasOwnProperty("foodWorkers")) {
                d.foodWorkers = m.foodWorkers;
            }
            if (m.idleWorkerCount != null && m.hasOwnProperty("idleWorkerCount")) {
                d.idleWorkerCount = m.idleWorkerCount;
            }
            if (m.armyCount != null && m.hasOwnProperty("armyCount")) {
                d.armyCount = m.armyCount;
            }
            if (m.warpGateCount != null && m.hasOwnProperty("warpGateCount")) {
                d.warpGateCount = m.warpGateCount;
            }
            if (m.larvaCount != null && m.hasOwnProperty("larvaCount")) {
                d.larvaCount = m.larvaCount;
            }
            return d;
        };

        PlayerCommon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlayerCommon;
    })();

    SC2APIProtocol.Observation = (function() {

        function Observation(p) {
            this.alerts = [];
            this.abilities = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Observation.prototype.gameLoop = 0;
        Observation.prototype.playerCommon = null;
        Observation.prototype.alerts = $util.emptyArray;
        Observation.prototype.abilities = $util.emptyArray;
        Observation.prototype.score = null;
        Observation.prototype.rawData = null;
        Observation.prototype.featureLayerData = null;
        Observation.prototype.renderData = null;
        Observation.prototype.uiData = null;

        Observation.create = function create(properties) {
            return new Observation(properties);
        };

        Observation.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerCommon != null && Object.hasOwnProperty.call(m, "playerCommon"))
                $root.SC2APIProtocol.PlayerCommon.encode(m.playerCommon, w.uint32(10).fork()).ldelim();
            if (m.abilities != null && m.abilities.length) {
                for (var i = 0; i < m.abilities.length; ++i)
                    $root.SC2APIProtocol.AvailableAbility.encode(m.abilities[i], w.uint32(26).fork()).ldelim();
            }
            if (m.score != null && Object.hasOwnProperty.call(m, "score"))
                $root.SC2APIProtocol.Score.encode(m.score, w.uint32(34).fork()).ldelim();
            if (m.rawData != null && Object.hasOwnProperty.call(m, "rawData"))
                $root.SC2APIProtocol.ObservationRaw.encode(m.rawData, w.uint32(42).fork()).ldelim();
            if (m.featureLayerData != null && Object.hasOwnProperty.call(m, "featureLayerData"))
                $root.SC2APIProtocol.ObservationFeatureLayer.encode(m.featureLayerData, w.uint32(50).fork()).ldelim();
            if (m.renderData != null && Object.hasOwnProperty.call(m, "renderData"))
                $root.SC2APIProtocol.ObservationRender.encode(m.renderData, w.uint32(58).fork()).ldelim();
            if (m.uiData != null && Object.hasOwnProperty.call(m, "uiData"))
                $root.SC2APIProtocol.ObservationUI.encode(m.uiData, w.uint32(66).fork()).ldelim();
            if (m.gameLoop != null && Object.hasOwnProperty.call(m, "gameLoop"))
                w.uint32(72).uint32(m.gameLoop);
            if (m.alerts != null && m.alerts.length) {
                for (var i = 0; i < m.alerts.length; ++i)
                    w.uint32(80).int32(m.alerts[i]);
            }
            return w;
        };

        Observation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Observation.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Observation();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 9:
                    m.gameLoop = r.uint32();
                    break;
                case 1:
                    m.playerCommon = $root.SC2APIProtocol.PlayerCommon.decode(r, r.uint32());
                    break;
                case 10:
                    if (!(m.alerts && m.alerts.length))
                        m.alerts = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.alerts.push(r.int32());
                    } else
                        m.alerts.push(r.int32());
                    break;
                case 3:
                    if (!(m.abilities && m.abilities.length))
                        m.abilities = [];
                    m.abilities.push($root.SC2APIProtocol.AvailableAbility.decode(r, r.uint32()));
                    break;
                case 4:
                    m.score = $root.SC2APIProtocol.Score.decode(r, r.uint32());
                    break;
                case 5:
                    m.rawData = $root.SC2APIProtocol.ObservationRaw.decode(r, r.uint32());
                    break;
                case 6:
                    m.featureLayerData = $root.SC2APIProtocol.ObservationFeatureLayer.decode(r, r.uint32());
                    break;
                case 7:
                    m.renderData = $root.SC2APIProtocol.ObservationRender.decode(r, r.uint32());
                    break;
                case 8:
                    m.uiData = $root.SC2APIProtocol.ObservationUI.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Observation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Observation.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.gameLoop != null && m.hasOwnProperty("gameLoop")) {
                if (!$util.isInteger(m.gameLoop))
                    return "gameLoop: integer expected";
            }
            if (m.playerCommon != null && m.hasOwnProperty("playerCommon")) {
                {
                    var e = $root.SC2APIProtocol.PlayerCommon.verify(m.playerCommon);
                    if (e)
                        return "playerCommon." + e;
                }
            }
            if (m.alerts != null && m.hasOwnProperty("alerts")) {
                if (!Array.isArray(m.alerts))
                    return "alerts: array expected";
                for (var i = 0; i < m.alerts.length; ++i) {
                    switch (m.alerts[i]) {
                    default:
                        return "alerts: enum value[] expected";
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 1:
                    case 13:
                    case 2:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                        break;
                    }
                }
            }
            if (m.abilities != null && m.hasOwnProperty("abilities")) {
                if (!Array.isArray(m.abilities))
                    return "abilities: array expected";
                for (var i = 0; i < m.abilities.length; ++i) {
                    {
                        var e = $root.SC2APIProtocol.AvailableAbility.verify(m.abilities[i]);
                        if (e)
                            return "abilities." + e;
                    }
                }
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                {
                    var e = $root.SC2APIProtocol.Score.verify(m.score);
                    if (e)
                        return "score." + e;
                }
            }
            if (m.rawData != null && m.hasOwnProperty("rawData")) {
                {
                    var e = $root.SC2APIProtocol.ObservationRaw.verify(m.rawData);
                    if (e)
                        return "rawData." + e;
                }
            }
            if (m.featureLayerData != null && m.hasOwnProperty("featureLayerData")) {
                {
                    var e = $root.SC2APIProtocol.ObservationFeatureLayer.verify(m.featureLayerData);
                    if (e)
                        return "featureLayerData." + e;
                }
            }
            if (m.renderData != null && m.hasOwnProperty("renderData")) {
                {
                    var e = $root.SC2APIProtocol.ObservationRender.verify(m.renderData);
                    if (e)
                        return "renderData." + e;
                }
            }
            if (m.uiData != null && m.hasOwnProperty("uiData")) {
                {
                    var e = $root.SC2APIProtocol.ObservationUI.verify(m.uiData);
                    if (e)
                        return "uiData." + e;
                }
            }
            return null;
        };

        Observation.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Observation)
                return d;
            var m = new $root.SC2APIProtocol.Observation();
            if (d.gameLoop != null) {
                m.gameLoop = d.gameLoop >>> 0;
            }
            if (d.playerCommon != null) {
                if (typeof d.playerCommon !== "object")
                    throw TypeError(".SC2APIProtocol.Observation.playerCommon: object expected");
                m.playerCommon = $root.SC2APIProtocol.PlayerCommon.fromObject(d.playerCommon);
            }
            if (d.alerts) {
                if (!Array.isArray(d.alerts))
                    throw TypeError(".SC2APIProtocol.Observation.alerts: array expected");
                m.alerts = [];
                for (var i = 0; i < d.alerts.length; ++i) {
                    switch (d.alerts[i]) {
                    default:
                    case "AlertError":
                    case 3:
                        m.alerts[i] = 3;
                        break;
                    case "AddOnComplete":
                    case 4:
                        m.alerts[i] = 4;
                        break;
                    case "BuildingComplete":
                    case 5:
                        m.alerts[i] = 5;
                        break;
                    case "BuildingUnderAttack":
                    case 6:
                        m.alerts[i] = 6;
                        break;
                    case "LarvaHatched":
                    case 7:
                        m.alerts[i] = 7;
                        break;
                    case "MergeComplete":
                    case 8:
                        m.alerts[i] = 8;
                        break;
                    case "MineralsExhausted":
                    case 9:
                        m.alerts[i] = 9;
                        break;
                    case "MorphComplete":
                    case 10:
                        m.alerts[i] = 10;
                        break;
                    case "MothershipComplete":
                    case 11:
                        m.alerts[i] = 11;
                        break;
                    case "MULEExpired":
                    case 12:
                        m.alerts[i] = 12;
                        break;
                    case "NuclearLaunchDetected":
                    case 1:
                        m.alerts[i] = 1;
                        break;
                    case "NukeComplete":
                    case 13:
                        m.alerts[i] = 13;
                        break;
                    case "NydusWormDetected":
                    case 2:
                        m.alerts[i] = 2;
                        break;
                    case "ResearchComplete":
                    case 14:
                        m.alerts[i] = 14;
                        break;
                    case "TrainError":
                    case 15:
                        m.alerts[i] = 15;
                        break;
                    case "TrainUnitComplete":
                    case 16:
                        m.alerts[i] = 16;
                        break;
                    case "TrainWorkerComplete":
                    case 17:
                        m.alerts[i] = 17;
                        break;
                    case "TransformationComplete":
                    case 18:
                        m.alerts[i] = 18;
                        break;
                    case "UnitUnderAttack":
                    case 19:
                        m.alerts[i] = 19;
                        break;
                    case "UpgradeComplete":
                    case 20:
                        m.alerts[i] = 20;
                        break;
                    case "VespeneExhausted":
                    case 21:
                        m.alerts[i] = 21;
                        break;
                    case "WarpInComplete":
                    case 22:
                        m.alerts[i] = 22;
                        break;
                    }
                }
            }
            if (d.abilities) {
                if (!Array.isArray(d.abilities))
                    throw TypeError(".SC2APIProtocol.Observation.abilities: array expected");
                m.abilities = [];
                for (var i = 0; i < d.abilities.length; ++i) {
                    if (typeof d.abilities[i] !== "object")
                        throw TypeError(".SC2APIProtocol.Observation.abilities: object expected");
                    m.abilities[i] = $root.SC2APIProtocol.AvailableAbility.fromObject(d.abilities[i]);
                }
            }
            if (d.score != null) {
                if (typeof d.score !== "object")
                    throw TypeError(".SC2APIProtocol.Observation.score: object expected");
                m.score = $root.SC2APIProtocol.Score.fromObject(d.score);
            }
            if (d.rawData != null) {
                if (typeof d.rawData !== "object")
                    throw TypeError(".SC2APIProtocol.Observation.rawData: object expected");
                m.rawData = $root.SC2APIProtocol.ObservationRaw.fromObject(d.rawData);
            }
            if (d.featureLayerData != null) {
                if (typeof d.featureLayerData !== "object")
                    throw TypeError(".SC2APIProtocol.Observation.featureLayerData: object expected");
                m.featureLayerData = $root.SC2APIProtocol.ObservationFeatureLayer.fromObject(d.featureLayerData);
            }
            if (d.renderData != null) {
                if (typeof d.renderData !== "object")
                    throw TypeError(".SC2APIProtocol.Observation.renderData: object expected");
                m.renderData = $root.SC2APIProtocol.ObservationRender.fromObject(d.renderData);
            }
            if (d.uiData != null) {
                if (typeof d.uiData !== "object")
                    throw TypeError(".SC2APIProtocol.Observation.uiData: object expected");
                m.uiData = $root.SC2APIProtocol.ObservationUI.fromObject(d.uiData);
            }
            return m;
        };

        Observation.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.abilities = [];
                d.alerts = [];
            }
            if (o.defaults) {
                d.playerCommon = null;
                d.score = null;
                d.rawData = null;
                d.featureLayerData = null;
                d.renderData = null;
                d.uiData = null;
                d.gameLoop = 0;
            }
            if (m.playerCommon != null && m.hasOwnProperty("playerCommon")) {
                d.playerCommon = $root.SC2APIProtocol.PlayerCommon.toObject(m.playerCommon, o);
            }
            if (m.abilities && m.abilities.length) {
                d.abilities = [];
                for (var j = 0; j < m.abilities.length; ++j) {
                    d.abilities[j] = $root.SC2APIProtocol.AvailableAbility.toObject(m.abilities[j], o);
                }
            }
            if (m.score != null && m.hasOwnProperty("score")) {
                d.score = $root.SC2APIProtocol.Score.toObject(m.score, o);
            }
            if (m.rawData != null && m.hasOwnProperty("rawData")) {
                d.rawData = $root.SC2APIProtocol.ObservationRaw.toObject(m.rawData, o);
            }
            if (m.featureLayerData != null && m.hasOwnProperty("featureLayerData")) {
                d.featureLayerData = $root.SC2APIProtocol.ObservationFeatureLayer.toObject(m.featureLayerData, o);
            }
            if (m.renderData != null && m.hasOwnProperty("renderData")) {
                d.renderData = $root.SC2APIProtocol.ObservationRender.toObject(m.renderData, o);
            }
            if (m.uiData != null && m.hasOwnProperty("uiData")) {
                d.uiData = $root.SC2APIProtocol.ObservationUI.toObject(m.uiData, o);
            }
            if (m.gameLoop != null && m.hasOwnProperty("gameLoop")) {
                d.gameLoop = m.gameLoop;
            }
            if (m.alerts && m.alerts.length) {
                d.alerts = [];
                for (var j = 0; j < m.alerts.length; ++j) {
                    d.alerts[j] = o.enums === String ? $root.SC2APIProtocol.Alert[m.alerts[j]] : m.alerts[j];
                }
            }
            return d;
        };

        Observation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Observation;
    })();

    SC2APIProtocol.Action = (function() {

        function Action(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Action.prototype.actionRaw = null;
        Action.prototype.actionFeatureLayer = null;
        Action.prototype.actionRender = null;
        Action.prototype.actionUi = null;
        Action.prototype.actionChat = null;
        Action.prototype.gameLoop = 0;

        Action.create = function create(properties) {
            return new Action(properties);
        };

        Action.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.actionRaw != null && Object.hasOwnProperty.call(m, "actionRaw"))
                $root.SC2APIProtocol.ActionRaw.encode(m.actionRaw, w.uint32(10).fork()).ldelim();
            if (m.actionFeatureLayer != null && Object.hasOwnProperty.call(m, "actionFeatureLayer"))
                $root.SC2APIProtocol.ActionSpatial.encode(m.actionFeatureLayer, w.uint32(18).fork()).ldelim();
            if (m.actionRender != null && Object.hasOwnProperty.call(m, "actionRender"))
                $root.SC2APIProtocol.ActionSpatial.encode(m.actionRender, w.uint32(26).fork()).ldelim();
            if (m.actionUi != null && Object.hasOwnProperty.call(m, "actionUi"))
                $root.SC2APIProtocol.ActionUI.encode(m.actionUi, w.uint32(34).fork()).ldelim();
            if (m.actionChat != null && Object.hasOwnProperty.call(m, "actionChat"))
                $root.SC2APIProtocol.ActionChat.encode(m.actionChat, w.uint32(50).fork()).ldelim();
            if (m.gameLoop != null && Object.hasOwnProperty.call(m, "gameLoop"))
                w.uint32(56).uint32(m.gameLoop);
            return w;
        };

        Action.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        Action.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.Action();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.actionRaw = $root.SC2APIProtocol.ActionRaw.decode(r, r.uint32());
                    break;
                case 2:
                    m.actionFeatureLayer = $root.SC2APIProtocol.ActionSpatial.decode(r, r.uint32());
                    break;
                case 3:
                    m.actionRender = $root.SC2APIProtocol.ActionSpatial.decode(r, r.uint32());
                    break;
                case 4:
                    m.actionUi = $root.SC2APIProtocol.ActionUI.decode(r, r.uint32());
                    break;
                case 6:
                    m.actionChat = $root.SC2APIProtocol.ActionChat.decode(r, r.uint32());
                    break;
                case 7:
                    m.gameLoop = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Action.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        Action.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.actionRaw != null && m.hasOwnProperty("actionRaw")) {
                {
                    var e = $root.SC2APIProtocol.ActionRaw.verify(m.actionRaw);
                    if (e)
                        return "actionRaw." + e;
                }
            }
            if (m.actionFeatureLayer != null && m.hasOwnProperty("actionFeatureLayer")) {
                {
                    var e = $root.SC2APIProtocol.ActionSpatial.verify(m.actionFeatureLayer);
                    if (e)
                        return "actionFeatureLayer." + e;
                }
            }
            if (m.actionRender != null && m.hasOwnProperty("actionRender")) {
                {
                    var e = $root.SC2APIProtocol.ActionSpatial.verify(m.actionRender);
                    if (e)
                        return "actionRender." + e;
                }
            }
            if (m.actionUi != null && m.hasOwnProperty("actionUi")) {
                {
                    var e = $root.SC2APIProtocol.ActionUI.verify(m.actionUi);
                    if (e)
                        return "actionUi." + e;
                }
            }
            if (m.actionChat != null && m.hasOwnProperty("actionChat")) {
                {
                    var e = $root.SC2APIProtocol.ActionChat.verify(m.actionChat);
                    if (e)
                        return "actionChat." + e;
                }
            }
            if (m.gameLoop != null && m.hasOwnProperty("gameLoop")) {
                if (!$util.isInteger(m.gameLoop))
                    return "gameLoop: integer expected";
            }
            return null;
        };

        Action.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.Action)
                return d;
            var m = new $root.SC2APIProtocol.Action();
            if (d.actionRaw != null) {
                if (typeof d.actionRaw !== "object")
                    throw TypeError(".SC2APIProtocol.Action.actionRaw: object expected");
                m.actionRaw = $root.SC2APIProtocol.ActionRaw.fromObject(d.actionRaw);
            }
            if (d.actionFeatureLayer != null) {
                if (typeof d.actionFeatureLayer !== "object")
                    throw TypeError(".SC2APIProtocol.Action.actionFeatureLayer: object expected");
                m.actionFeatureLayer = $root.SC2APIProtocol.ActionSpatial.fromObject(d.actionFeatureLayer);
            }
            if (d.actionRender != null) {
                if (typeof d.actionRender !== "object")
                    throw TypeError(".SC2APIProtocol.Action.actionRender: object expected");
                m.actionRender = $root.SC2APIProtocol.ActionSpatial.fromObject(d.actionRender);
            }
            if (d.actionUi != null) {
                if (typeof d.actionUi !== "object")
                    throw TypeError(".SC2APIProtocol.Action.actionUi: object expected");
                m.actionUi = $root.SC2APIProtocol.ActionUI.fromObject(d.actionUi);
            }
            if (d.actionChat != null) {
                if (typeof d.actionChat !== "object")
                    throw TypeError(".SC2APIProtocol.Action.actionChat: object expected");
                m.actionChat = $root.SC2APIProtocol.ActionChat.fromObject(d.actionChat);
            }
            if (d.gameLoop != null) {
                m.gameLoop = d.gameLoop >>> 0;
            }
            return m;
        };

        Action.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.actionRaw = null;
                d.actionFeatureLayer = null;
                d.actionRender = null;
                d.actionUi = null;
                d.actionChat = null;
                d.gameLoop = 0;
            }
            if (m.actionRaw != null && m.hasOwnProperty("actionRaw")) {
                d.actionRaw = $root.SC2APIProtocol.ActionRaw.toObject(m.actionRaw, o);
            }
            if (m.actionFeatureLayer != null && m.hasOwnProperty("actionFeatureLayer")) {
                d.actionFeatureLayer = $root.SC2APIProtocol.ActionSpatial.toObject(m.actionFeatureLayer, o);
            }
            if (m.actionRender != null && m.hasOwnProperty("actionRender")) {
                d.actionRender = $root.SC2APIProtocol.ActionSpatial.toObject(m.actionRender, o);
            }
            if (m.actionUi != null && m.hasOwnProperty("actionUi")) {
                d.actionUi = $root.SC2APIProtocol.ActionUI.toObject(m.actionUi, o);
            }
            if (m.actionChat != null && m.hasOwnProperty("actionChat")) {
                d.actionChat = $root.SC2APIProtocol.ActionChat.toObject(m.actionChat, o);
            }
            if (m.gameLoop != null && m.hasOwnProperty("gameLoop")) {
                d.gameLoop = m.gameLoop;
            }
            return d;
        };

        Action.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Action;
    })();

    SC2APIProtocol.ActionChat = (function() {

        function ActionChat(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionChat.prototype.channel = 1;
        ActionChat.prototype.message = "";

        ActionChat.create = function create(properties) {
            return new ActionChat(properties);
        };

        ActionChat.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.channel != null && Object.hasOwnProperty.call(m, "channel"))
                w.uint32(8).int32(m.channel);
            if (m.message != null && Object.hasOwnProperty.call(m, "message"))
                w.uint32(18).string(m.message);
            return w;
        };

        ActionChat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionChat.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionChat();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.channel = r.int32();
                    break;
                case 2:
                    m.message = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionChat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionChat.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.channel != null && m.hasOwnProperty("channel")) {
                switch (m.channel) {
                default:
                    return "channel: enum value expected";
                case 1:
                case 2:
                    break;
                }
            }
            if (m.message != null && m.hasOwnProperty("message")) {
                if (!$util.isString(m.message))
                    return "message: string expected";
            }
            return null;
        };

        ActionChat.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionChat)
                return d;
            var m = new $root.SC2APIProtocol.ActionChat();
            switch (d.channel) {
            case "Broadcast":
            case 1:
                m.channel = 1;
                break;
            case "Team":
            case 2:
                m.channel = 2;
                break;
            }
            if (d.message != null) {
                m.message = String(d.message);
            }
            return m;
        };

        ActionChat.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.channel = o.enums === String ? "Broadcast" : 1;
                d.message = "";
            }
            if (m.channel != null && m.hasOwnProperty("channel")) {
                d.channel = o.enums === String ? $root.SC2APIProtocol.ActionChat.Channel[m.channel] : m.channel;
            }
            if (m.message != null && m.hasOwnProperty("message")) {
                d.message = m.message;
            }
            return d;
        };

        ActionChat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ActionChat.Channel = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "Broadcast"] = 1;
            values[valuesById[2] = "Team"] = 2;
            return values;
        })();

        return ActionChat;
    })();

    SC2APIProtocol.ActionError = (function() {

        function ActionError(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionError.prototype.unitTag = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        ActionError.prototype.abilityId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
        ActionError.prototype.result = 1;

        ActionError.create = function create(properties) {
            return new ActionError(properties);
        };

        ActionError.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitTag != null && Object.hasOwnProperty.call(m, "unitTag"))
                w.uint32(8).uint64(m.unitTag);
            if (m.abilityId != null && Object.hasOwnProperty.call(m, "abilityId"))
                w.uint32(16).uint64(m.abilityId);
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(24).int32(m.result);
            return w;
        };

        ActionError.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionError.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionError();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.unitTag = r.uint64();
                    break;
                case 2:
                    m.abilityId = r.uint64();
                    break;
                case 3:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionError.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionError.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (!$util.isInteger(m.unitTag) && !(m.unitTag && $util.isInteger(m.unitTag.low) && $util.isInteger(m.unitTag.high)))
                    return "unitTag: integer|Long expected";
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (!$util.isInteger(m.abilityId) && !(m.abilityId && $util.isInteger(m.abilityId.low) && $util.isInteger(m.abilityId.high)))
                    return "abilityId: integer|Long expected";
            }
            if (m.result != null && m.hasOwnProperty("result")) {
                switch (m.result) {
                default:
                    return "result: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                case 181:
                case 182:
                case 183:
                case 184:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                case 198:
                case 199:
                case 200:
                case 201:
                case 202:
                case 203:
                case 204:
                case 205:
                case 206:
                case 207:
                case 208:
                case 209:
                case 210:
                case 211:
                case 212:
                case 213:
                case 214:
                    break;
                }
            }
            return null;
        };

        ActionError.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionError)
                return d;
            var m = new $root.SC2APIProtocol.ActionError();
            if (d.unitTag != null) {
                if ($util.Long)
                    (m.unitTag = $util.Long.fromValue(d.unitTag)).unsigned = true;
                else if (typeof d.unitTag === "string")
                    m.unitTag = parseInt(d.unitTag, 10);
                else if (typeof d.unitTag === "number")
                    m.unitTag = d.unitTag;
                else if (typeof d.unitTag === "object")
                    m.unitTag = new $util.LongBits(d.unitTag.low >>> 0, d.unitTag.high >>> 0).toNumber(true);
            }
            if (d.abilityId != null) {
                if ($util.Long)
                    (m.abilityId = $util.Long.fromValue(d.abilityId)).unsigned = true;
                else if (typeof d.abilityId === "string")
                    m.abilityId = parseInt(d.abilityId, 10);
                else if (typeof d.abilityId === "number")
                    m.abilityId = d.abilityId;
                else if (typeof d.abilityId === "object")
                    m.abilityId = new $util.LongBits(d.abilityId.low >>> 0, d.abilityId.high >>> 0).toNumber(true);
            }
            switch (d.result) {
            case "Success":
            case 1:
                m.result = 1;
                break;
            case "NotSupported":
            case 2:
                m.result = 2;
                break;
            case "Error":
            case 3:
                m.result = 3;
                break;
            case "CantQueueThatOrder":
            case 4:
                m.result = 4;
                break;
            case "Retry":
            case 5:
                m.result = 5;
                break;
            case "Cooldown":
            case 6:
                m.result = 6;
                break;
            case "QueueIsFull":
            case 7:
                m.result = 7;
                break;
            case "RallyQueueIsFull":
            case 8:
                m.result = 8;
                break;
            case "NotEnoughMinerals":
            case 9:
                m.result = 9;
                break;
            case "NotEnoughVespene":
            case 10:
                m.result = 10;
                break;
            case "NotEnoughTerrazine":
            case 11:
                m.result = 11;
                break;
            case "NotEnoughCustom":
            case 12:
                m.result = 12;
                break;
            case "NotEnoughFood":
            case 13:
                m.result = 13;
                break;
            case "FoodUsageImpossible":
            case 14:
                m.result = 14;
                break;
            case "NotEnoughLife":
            case 15:
                m.result = 15;
                break;
            case "NotEnoughShields":
            case 16:
                m.result = 16;
                break;
            case "NotEnoughEnergy":
            case 17:
                m.result = 17;
                break;
            case "LifeSuppressed":
            case 18:
                m.result = 18;
                break;
            case "ShieldsSuppressed":
            case 19:
                m.result = 19;
                break;
            case "EnergySuppressed":
            case 20:
                m.result = 20;
                break;
            case "NotEnoughCharges":
            case 21:
                m.result = 21;
                break;
            case "CantAddMoreCharges":
            case 22:
                m.result = 22;
                break;
            case "TooMuchMinerals":
            case 23:
                m.result = 23;
                break;
            case "TooMuchVespene":
            case 24:
                m.result = 24;
                break;
            case "TooMuchTerrazine":
            case 25:
                m.result = 25;
                break;
            case "TooMuchCustom":
            case 26:
                m.result = 26;
                break;
            case "TooMuchFood":
            case 27:
                m.result = 27;
                break;
            case "TooMuchLife":
            case 28:
                m.result = 28;
                break;
            case "TooMuchShields":
            case 29:
                m.result = 29;
                break;
            case "TooMuchEnergy":
            case 30:
                m.result = 30;
                break;
            case "MustTargetUnitWithLife":
            case 31:
                m.result = 31;
                break;
            case "MustTargetUnitWithShields":
            case 32:
                m.result = 32;
                break;
            case "MustTargetUnitWithEnergy":
            case 33:
                m.result = 33;
                break;
            case "CantTrade":
            case 34:
                m.result = 34;
                break;
            case "CantSpend":
            case 35:
                m.result = 35;
                break;
            case "CantTargetThatUnit":
            case 36:
                m.result = 36;
                break;
            case "CouldntAllocateUnit":
            case 37:
                m.result = 37;
                break;
            case "UnitCantMove":
            case 38:
                m.result = 38;
                break;
            case "TransportIsHoldingPosition":
            case 39:
                m.result = 39;
                break;
            case "BuildTechRequirementsNotMet":
            case 40:
                m.result = 40;
                break;
            case "CantFindPlacementLocation":
            case 41:
                m.result = 41;
                break;
            case "CantBuildOnThat":
            case 42:
                m.result = 42;
                break;
            case "CantBuildTooCloseToDropOff":
            case 43:
                m.result = 43;
                break;
            case "CantBuildLocationInvalid":
            case 44:
                m.result = 44;
                break;
            case "CantSeeBuildLocation":
            case 45:
                m.result = 45;
                break;
            case "CantBuildTooCloseToCreepSource":
            case 46:
                m.result = 46;
                break;
            case "CantBuildTooCloseToResources":
            case 47:
                m.result = 47;
                break;
            case "CantBuildTooFarFromWater":
            case 48:
                m.result = 48;
                break;
            case "CantBuildTooFarFromCreepSource":
            case 49:
                m.result = 49;
                break;
            case "CantBuildTooFarFromBuildPowerSource":
            case 50:
                m.result = 50;
                break;
            case "CantBuildOnDenseTerrain":
            case 51:
                m.result = 51;
                break;
            case "CantTrainTooFarFromTrainPowerSource":
            case 52:
                m.result = 52;
                break;
            case "CantLandLocationInvalid":
            case 53:
                m.result = 53;
                break;
            case "CantSeeLandLocation":
            case 54:
                m.result = 54;
                break;
            case "CantLandTooCloseToCreepSource":
            case 55:
                m.result = 55;
                break;
            case "CantLandTooCloseToResources":
            case 56:
                m.result = 56;
                break;
            case "CantLandTooFarFromWater":
            case 57:
                m.result = 57;
                break;
            case "CantLandTooFarFromCreepSource":
            case 58:
                m.result = 58;
                break;
            case "CantLandTooFarFromBuildPowerSource":
            case 59:
                m.result = 59;
                break;
            case "CantLandTooFarFromTrainPowerSource":
            case 60:
                m.result = 60;
                break;
            case "CantLandOnDenseTerrain":
            case 61:
                m.result = 61;
                break;
            case "AddOnTooFarFromBuilding":
            case 62:
                m.result = 62;
                break;
            case "MustBuildRefineryFirst":
            case 63:
                m.result = 63;
                break;
            case "BuildingIsUnderConstruction":
            case 64:
                m.result = 64;
                break;
            case "CantFindDropOff":
            case 65:
                m.result = 65;
                break;
            case "CantLoadOtherPlayersUnits":
            case 66:
                m.result = 66;
                break;
            case "NotEnoughRoomToLoadUnit":
            case 67:
                m.result = 67;
                break;
            case "CantUnloadUnitsThere":
            case 68:
                m.result = 68;
                break;
            case "CantWarpInUnitsThere":
            case 69:
                m.result = 69;
                break;
            case "CantLoadImmobileUnits":
            case 70:
                m.result = 70;
                break;
            case "CantRechargeImmobileUnits":
            case 71:
                m.result = 71;
                break;
            case "CantRechargeUnderConstructionUnits":
            case 72:
                m.result = 72;
                break;
            case "CantLoadThatUnit":
            case 73:
                m.result = 73;
                break;
            case "NoCargoToUnload":
            case 74:
                m.result = 74;
                break;
            case "LoadAllNoTargetsFound":
            case 75:
                m.result = 75;
                break;
            case "NotWhileOccupied":
            case 76:
                m.result = 76;
                break;
            case "CantAttackWithoutAmmo":
            case 77:
                m.result = 77;
                break;
            case "CantHoldAnyMoreAmmo":
            case 78:
                m.result = 78;
                break;
            case "TechRequirementsNotMet":
            case 79:
                m.result = 79;
                break;
            case "MustLockdownUnitFirst":
            case 80:
                m.result = 80;
                break;
            case "MustTargetUnit":
            case 81:
                m.result = 81;
                break;
            case "MustTargetInventory":
            case 82:
                m.result = 82;
                break;
            case "MustTargetVisibleUnit":
            case 83:
                m.result = 83;
                break;
            case "MustTargetVisibleLocation":
            case 84:
                m.result = 84;
                break;
            case "MustTargetWalkableLocation":
            case 85:
                m.result = 85;
                break;
            case "MustTargetPawnableUnit":
            case 86:
                m.result = 86;
                break;
            case "YouCantControlThatUnit":
            case 87:
                m.result = 87;
                break;
            case "YouCantIssueCommandsToThatUnit":
            case 88:
                m.result = 88;
                break;
            case "MustTargetResources":
            case 89:
                m.result = 89;
                break;
            case "RequiresHealTarget":
            case 90:
                m.result = 90;
                break;
            case "RequiresRepairTarget":
            case 91:
                m.result = 91;
                break;
            case "NoItemsToDrop":
            case 92:
                m.result = 92;
                break;
            case "CantHoldAnyMoreItems":
            case 93:
                m.result = 93;
                break;
            case "CantHoldThat":
            case 94:
                m.result = 94;
                break;
            case "TargetHasNoInventory":
            case 95:
                m.result = 95;
                break;
            case "CantDropThisItem":
            case 96:
                m.result = 96;
                break;
            case "CantMoveThisItem":
            case 97:
                m.result = 97;
                break;
            case "CantPawnThisUnit":
            case 98:
                m.result = 98;
                break;
            case "MustTargetCaster":
            case 99:
                m.result = 99;
                break;
            case "CantTargetCaster":
            case 100:
                m.result = 100;
                break;
            case "MustTargetOuter":
            case 101:
                m.result = 101;
                break;
            case "CantTargetOuter":
            case 102:
                m.result = 102;
                break;
            case "MustTargetYourOwnUnits":
            case 103:
                m.result = 103;
                break;
            case "CantTargetYourOwnUnits":
            case 104:
                m.result = 104;
                break;
            case "MustTargetFriendlyUnits":
            case 105:
                m.result = 105;
                break;
            case "CantTargetFriendlyUnits":
            case 106:
                m.result = 106;
                break;
            case "MustTargetNeutralUnits":
            case 107:
                m.result = 107;
                break;
            case "CantTargetNeutralUnits":
            case 108:
                m.result = 108;
                break;
            case "MustTargetEnemyUnits":
            case 109:
                m.result = 109;
                break;
            case "CantTargetEnemyUnits":
            case 110:
                m.result = 110;
                break;
            case "MustTargetAirUnits":
            case 111:
                m.result = 111;
                break;
            case "CantTargetAirUnits":
            case 112:
                m.result = 112;
                break;
            case "MustTargetGroundUnits":
            case 113:
                m.result = 113;
                break;
            case "CantTargetGroundUnits":
            case 114:
                m.result = 114;
                break;
            case "MustTargetStructures":
            case 115:
                m.result = 115;
                break;
            case "CantTargetStructures":
            case 116:
                m.result = 116;
                break;
            case "MustTargetLightUnits":
            case 117:
                m.result = 117;
                break;
            case "CantTargetLightUnits":
            case 118:
                m.result = 118;
                break;
            case "MustTargetArmoredUnits":
            case 119:
                m.result = 119;
                break;
            case "CantTargetArmoredUnits":
            case 120:
                m.result = 120;
                break;
            case "MustTargetBiologicalUnits":
            case 121:
                m.result = 121;
                break;
            case "CantTargetBiologicalUnits":
            case 122:
                m.result = 122;
                break;
            case "MustTargetHeroicUnits":
            case 123:
                m.result = 123;
                break;
            case "CantTargetHeroicUnits":
            case 124:
                m.result = 124;
                break;
            case "MustTargetRoboticUnits":
            case 125:
                m.result = 125;
                break;
            case "CantTargetRoboticUnits":
            case 126:
                m.result = 126;
                break;
            case "MustTargetMechanicalUnits":
            case 127:
                m.result = 127;
                break;
            case "CantTargetMechanicalUnits":
            case 128:
                m.result = 128;
                break;
            case "MustTargetPsionicUnits":
            case 129:
                m.result = 129;
                break;
            case "CantTargetPsionicUnits":
            case 130:
                m.result = 130;
                break;
            case "MustTargetMassiveUnits":
            case 131:
                m.result = 131;
                break;
            case "CantTargetMassiveUnits":
            case 132:
                m.result = 132;
                break;
            case "MustTargetMissile":
            case 133:
                m.result = 133;
                break;
            case "CantTargetMissile":
            case 134:
                m.result = 134;
                break;
            case "MustTargetWorkerUnits":
            case 135:
                m.result = 135;
                break;
            case "CantTargetWorkerUnits":
            case 136:
                m.result = 136;
                break;
            case "MustTargetEnergyCapableUnits":
            case 137:
                m.result = 137;
                break;
            case "CantTargetEnergyCapableUnits":
            case 138:
                m.result = 138;
                break;
            case "MustTargetShieldCapableUnits":
            case 139:
                m.result = 139;
                break;
            case "CantTargetShieldCapableUnits":
            case 140:
                m.result = 140;
                break;
            case "MustTargetFlyers":
            case 141:
                m.result = 141;
                break;
            case "CantTargetFlyers":
            case 142:
                m.result = 142;
                break;
            case "MustTargetBuriedUnits":
            case 143:
                m.result = 143;
                break;
            case "CantTargetBuriedUnits":
            case 144:
                m.result = 144;
                break;
            case "MustTargetCloakedUnits":
            case 145:
                m.result = 145;
                break;
            case "CantTargetCloakedUnits":
            case 146:
                m.result = 146;
                break;
            case "MustTargetUnitsInAStasisField":
            case 147:
                m.result = 147;
                break;
            case "CantTargetUnitsInAStasisField":
            case 148:
                m.result = 148;
                break;
            case "MustTargetUnderConstructionUnits":
            case 149:
                m.result = 149;
                break;
            case "CantTargetUnderConstructionUnits":
            case 150:
                m.result = 150;
                break;
            case "MustTargetDeadUnits":
            case 151:
                m.result = 151;
                break;
            case "CantTargetDeadUnits":
            case 152:
                m.result = 152;
                break;
            case "MustTargetRevivableUnits":
            case 153:
                m.result = 153;
                break;
            case "CantTargetRevivableUnits":
            case 154:
                m.result = 154;
                break;
            case "MustTargetHiddenUnits":
            case 155:
                m.result = 155;
                break;
            case "CantTargetHiddenUnits":
            case 156:
                m.result = 156;
                break;
            case "CantRechargeOtherPlayersUnits":
            case 157:
                m.result = 157;
                break;
            case "MustTargetHallucinations":
            case 158:
                m.result = 158;
                break;
            case "CantTargetHallucinations":
            case 159:
                m.result = 159;
                break;
            case "MustTargetInvulnerableUnits":
            case 160:
                m.result = 160;
                break;
            case "CantTargetInvulnerableUnits":
            case 161:
                m.result = 161;
                break;
            case "MustTargetDetectedUnits":
            case 162:
                m.result = 162;
                break;
            case "CantTargetDetectedUnits":
            case 163:
                m.result = 163;
                break;
            case "CantTargetUnitWithEnergy":
            case 164:
                m.result = 164;
                break;
            case "CantTargetUnitWithShields":
            case 165:
                m.result = 165;
                break;
            case "MustTargetUncommandableUnits":
            case 166:
                m.result = 166;
                break;
            case "CantTargetUncommandableUnits":
            case 167:
                m.result = 167;
                break;
            case "MustTargetPreventDefeatUnits":
            case 168:
                m.result = 168;
                break;
            case "CantTargetPreventDefeatUnits":
            case 169:
                m.result = 169;
                break;
            case "MustTargetPreventRevealUnits":
            case 170:
                m.result = 170;
                break;
            case "CantTargetPreventRevealUnits":
            case 171:
                m.result = 171;
                break;
            case "MustTargetPassiveUnits":
            case 172:
                m.result = 172;
                break;
            case "CantTargetPassiveUnits":
            case 173:
                m.result = 173;
                break;
            case "MustTargetStunnedUnits":
            case 174:
                m.result = 174;
                break;
            case "CantTargetStunnedUnits":
            case 175:
                m.result = 175;
                break;
            case "MustTargetSummonedUnits":
            case 176:
                m.result = 176;
                break;
            case "CantTargetSummonedUnits":
            case 177:
                m.result = 177;
                break;
            case "MustTargetUser1":
            case 178:
                m.result = 178;
                break;
            case "CantTargetUser1":
            case 179:
                m.result = 179;
                break;
            case "MustTargetUnstoppableUnits":
            case 180:
                m.result = 180;
                break;
            case "CantTargetUnstoppableUnits":
            case 181:
                m.result = 181;
                break;
            case "MustTargetResistantUnits":
            case 182:
                m.result = 182;
                break;
            case "CantTargetResistantUnits":
            case 183:
                m.result = 183;
                break;
            case "MustTargetDazedUnits":
            case 184:
                m.result = 184;
                break;
            case "CantTargetDazedUnits":
            case 185:
                m.result = 185;
                break;
            case "CantLockdown":
            case 186:
                m.result = 186;
                break;
            case "CantMindControl":
            case 187:
                m.result = 187;
                break;
            case "MustTargetDestructibles":
            case 188:
                m.result = 188;
                break;
            case "CantTargetDestructibles":
            case 189:
                m.result = 189;
                break;
            case "MustTargetItems":
            case 190:
                m.result = 190;
                break;
            case "CantTargetItems":
            case 191:
                m.result = 191;
                break;
            case "NoCalldownAvailable":
            case 192:
                m.result = 192;
                break;
            case "WaypointListFull":
            case 193:
                m.result = 193;
                break;
            case "MustTargetRace":
            case 194:
                m.result = 194;
                break;
            case "CantTargetRace":
            case 195:
                m.result = 195;
                break;
            case "MustTargetSimilarUnits":
            case 196:
                m.result = 196;
                break;
            case "CantTargetSimilarUnits":
            case 197:
                m.result = 197;
                break;
            case "CantFindEnoughTargets":
            case 198:
                m.result = 198;
                break;
            case "AlreadySpawningLarva":
            case 199:
                m.result = 199;
                break;
            case "CantTargetExhaustedResources":
            case 200:
                m.result = 200;
                break;
            case "CantUseMinimap":
            case 201:
                m.result = 201;
                break;
            case "CantUseInfoPanel":
            case 202:
                m.result = 202;
                break;
            case "OrderQueueIsFull":
            case 203:
                m.result = 203;
                break;
            case "CantHarvestThatResource":
            case 204:
                m.result = 204;
                break;
            case "HarvestersNotRequired":
            case 205:
                m.result = 205;
                break;
            case "AlreadyTargeted":
            case 206:
                m.result = 206;
                break;
            case "CantAttackWeaponsDisabled":
            case 207:
                m.result = 207;
                break;
            case "CouldntReachTarget":
            case 208:
                m.result = 208;
                break;
            case "TargetIsOutOfRange":
            case 209:
                m.result = 209;
                break;
            case "TargetIsTooClose":
            case 210:
                m.result = 210;
                break;
            case "TargetIsOutOfArc":
            case 211:
                m.result = 211;
                break;
            case "CantFindTeleportLocation":
            case 212:
                m.result = 212;
                break;
            case "InvalidItemClass":
            case 213:
                m.result = 213;
                break;
            case "CantFindCancelOrder":
            case 214:
                m.result = 214;
                break;
            }
            return m;
        };

        ActionError.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.unitTag = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.unitTag = o.longs === String ? "0" : 0;
                if ($util.Long) {
                    var n = new $util.Long(0, 0, true);
                    d.abilityId = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
                } else
                    d.abilityId = o.longs === String ? "0" : 0;
                d.result = o.enums === String ? "Success" : 1;
            }
            if (m.unitTag != null && m.hasOwnProperty("unitTag")) {
                if (typeof m.unitTag === "number")
                    d.unitTag = o.longs === String ? String(m.unitTag) : m.unitTag;
                else
                    d.unitTag = o.longs === String ? $util.Long.prototype.toString.call(m.unitTag) : o.longs === Number ? new $util.LongBits(m.unitTag.low >>> 0, m.unitTag.high >>> 0).toNumber(true) : m.unitTag;
            }
            if (m.abilityId != null && m.hasOwnProperty("abilityId")) {
                if (typeof m.abilityId === "number")
                    d.abilityId = o.longs === String ? String(m.abilityId) : m.abilityId;
                else
                    d.abilityId = o.longs === String ? $util.Long.prototype.toString.call(m.abilityId) : o.longs === Number ? new $util.LongBits(m.abilityId.low >>> 0, m.abilityId.high >>> 0).toNumber(true) : m.abilityId;
            }
            if (m.result != null && m.hasOwnProperty("result")) {
                d.result = o.enums === String ? $root.SC2APIProtocol.ActionResult[m.result] : m.result;
            }
            return d;
        };

        ActionError.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionError;
    })();

    SC2APIProtocol.ObserverAction = (function() {

        function ObserverAction(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ObserverAction.prototype.playerPerspective = null;
        ObserverAction.prototype.cameraMove = null;
        ObserverAction.prototype.cameraFollowPlayer = null;
        ObserverAction.prototype.cameraFollowUnits = null;

        var $oneOfFields;

        Object.defineProperty(ObserverAction.prototype, "action", {
            get: $util.oneOfGetter($oneOfFields = ["playerPerspective", "cameraMove", "cameraFollowPlayer", "cameraFollowUnits"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        ObserverAction.create = function create(properties) {
            return new ObserverAction(properties);
        };

        ObserverAction.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerPerspective != null && Object.hasOwnProperty.call(m, "playerPerspective"))
                $root.SC2APIProtocol.ActionObserverPlayerPerspective.encode(m.playerPerspective, w.uint32(10).fork()).ldelim();
            if (m.cameraMove != null && Object.hasOwnProperty.call(m, "cameraMove"))
                $root.SC2APIProtocol.ActionObserverCameraMove.encode(m.cameraMove, w.uint32(18).fork()).ldelim();
            if (m.cameraFollowPlayer != null && Object.hasOwnProperty.call(m, "cameraFollowPlayer"))
                $root.SC2APIProtocol.ActionObserverCameraFollowPlayer.encode(m.cameraFollowPlayer, w.uint32(26).fork()).ldelim();
            if (m.cameraFollowUnits != null && Object.hasOwnProperty.call(m, "cameraFollowUnits"))
                $root.SC2APIProtocol.ActionObserverCameraFollowUnits.encode(m.cameraFollowUnits, w.uint32(34).fork()).ldelim();
            return w;
        };

        ObserverAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ObserverAction.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ObserverAction();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerPerspective = $root.SC2APIProtocol.ActionObserverPlayerPerspective.decode(r, r.uint32());
                    break;
                case 2:
                    m.cameraMove = $root.SC2APIProtocol.ActionObserverCameraMove.decode(r, r.uint32());
                    break;
                case 3:
                    m.cameraFollowPlayer = $root.SC2APIProtocol.ActionObserverCameraFollowPlayer.decode(r, r.uint32());
                    break;
                case 4:
                    m.cameraFollowUnits = $root.SC2APIProtocol.ActionObserverCameraFollowUnits.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ObserverAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ObserverAction.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            var p = {};
            if (m.playerPerspective != null && m.hasOwnProperty("playerPerspective")) {
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionObserverPlayerPerspective.verify(m.playerPerspective);
                    if (e)
                        return "playerPerspective." + e;
                }
            }
            if (m.cameraMove != null && m.hasOwnProperty("cameraMove")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionObserverCameraMove.verify(m.cameraMove);
                    if (e)
                        return "cameraMove." + e;
                }
            }
            if (m.cameraFollowPlayer != null && m.hasOwnProperty("cameraFollowPlayer")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionObserverCameraFollowPlayer.verify(m.cameraFollowPlayer);
                    if (e)
                        return "cameraFollowPlayer." + e;
                }
            }
            if (m.cameraFollowUnits != null && m.hasOwnProperty("cameraFollowUnits")) {
                if (p.action === 1)
                    return "action: multiple values";
                p.action = 1;
                {
                    var e = $root.SC2APIProtocol.ActionObserverCameraFollowUnits.verify(m.cameraFollowUnits);
                    if (e)
                        return "cameraFollowUnits." + e;
                }
            }
            return null;
        };

        ObserverAction.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ObserverAction)
                return d;
            var m = new $root.SC2APIProtocol.ObserverAction();
            if (d.playerPerspective != null) {
                if (typeof d.playerPerspective !== "object")
                    throw TypeError(".SC2APIProtocol.ObserverAction.playerPerspective: object expected");
                m.playerPerspective = $root.SC2APIProtocol.ActionObserverPlayerPerspective.fromObject(d.playerPerspective);
            }
            if (d.cameraMove != null) {
                if (typeof d.cameraMove !== "object")
                    throw TypeError(".SC2APIProtocol.ObserverAction.cameraMove: object expected");
                m.cameraMove = $root.SC2APIProtocol.ActionObserverCameraMove.fromObject(d.cameraMove);
            }
            if (d.cameraFollowPlayer != null) {
                if (typeof d.cameraFollowPlayer !== "object")
                    throw TypeError(".SC2APIProtocol.ObserverAction.cameraFollowPlayer: object expected");
                m.cameraFollowPlayer = $root.SC2APIProtocol.ActionObserverCameraFollowPlayer.fromObject(d.cameraFollowPlayer);
            }
            if (d.cameraFollowUnits != null) {
                if (typeof d.cameraFollowUnits !== "object")
                    throw TypeError(".SC2APIProtocol.ObserverAction.cameraFollowUnits: object expected");
                m.cameraFollowUnits = $root.SC2APIProtocol.ActionObserverCameraFollowUnits.fromObject(d.cameraFollowUnits);
            }
            return m;
        };

        ObserverAction.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (m.playerPerspective != null && m.hasOwnProperty("playerPerspective")) {
                d.playerPerspective = $root.SC2APIProtocol.ActionObserverPlayerPerspective.toObject(m.playerPerspective, o);
                if (o.oneofs)
                    d.action = "playerPerspective";
            }
            if (m.cameraMove != null && m.hasOwnProperty("cameraMove")) {
                d.cameraMove = $root.SC2APIProtocol.ActionObserverCameraMove.toObject(m.cameraMove, o);
                if (o.oneofs)
                    d.action = "cameraMove";
            }
            if (m.cameraFollowPlayer != null && m.hasOwnProperty("cameraFollowPlayer")) {
                d.cameraFollowPlayer = $root.SC2APIProtocol.ActionObserverCameraFollowPlayer.toObject(m.cameraFollowPlayer, o);
                if (o.oneofs)
                    d.action = "cameraFollowPlayer";
            }
            if (m.cameraFollowUnits != null && m.hasOwnProperty("cameraFollowUnits")) {
                d.cameraFollowUnits = $root.SC2APIProtocol.ActionObserverCameraFollowUnits.toObject(m.cameraFollowUnits, o);
                if (o.oneofs)
                    d.action = "cameraFollowUnits";
            }
            return d;
        };

        ObserverAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ObserverAction;
    })();

    SC2APIProtocol.ActionObserverPlayerPerspective = (function() {

        function ActionObserverPlayerPerspective(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionObserverPlayerPerspective.prototype.playerId = 0;

        ActionObserverPlayerPerspective.create = function create(properties) {
            return new ActionObserverPlayerPerspective(properties);
        };

        ActionObserverPlayerPerspective.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                w.uint32(8).uint32(m.playerId);
            return w;
        };

        ActionObserverPlayerPerspective.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionObserverPlayerPerspective.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionObserverPlayerPerspective();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerId = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionObserverPlayerPerspective.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionObserverPlayerPerspective.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                if (!$util.isInteger(m.playerId))
                    return "playerId: integer expected";
            }
            return null;
        };

        ActionObserverPlayerPerspective.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionObserverPlayerPerspective)
                return d;
            var m = new $root.SC2APIProtocol.ActionObserverPlayerPerspective();
            if (d.playerId != null) {
                m.playerId = d.playerId >>> 0;
            }
            return m;
        };

        ActionObserverPlayerPerspective.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.playerId = 0;
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = m.playerId;
            }
            return d;
        };

        ActionObserverPlayerPerspective.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionObserverPlayerPerspective;
    })();

    SC2APIProtocol.ActionObserverCameraMove = (function() {

        function ActionObserverCameraMove(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionObserverCameraMove.prototype.worldPos = null;
        ActionObserverCameraMove.prototype.distance = 0;

        ActionObserverCameraMove.create = function create(properties) {
            return new ActionObserverCameraMove(properties);
        };

        ActionObserverCameraMove.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.worldPos != null && Object.hasOwnProperty.call(m, "worldPos"))
                $root.SC2APIProtocol.Point2D.encode(m.worldPos, w.uint32(10).fork()).ldelim();
            if (m.distance != null && Object.hasOwnProperty.call(m, "distance"))
                w.uint32(21).float(m.distance);
            return w;
        };

        ActionObserverCameraMove.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionObserverCameraMove.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionObserverCameraMove();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.worldPos = $root.SC2APIProtocol.Point2D.decode(r, r.uint32());
                    break;
                case 2:
                    m.distance = r.float();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionObserverCameraMove.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionObserverCameraMove.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.worldPos != null && m.hasOwnProperty("worldPos")) {
                {
                    var e = $root.SC2APIProtocol.Point2D.verify(m.worldPos);
                    if (e)
                        return "worldPos." + e;
                }
            }
            if (m.distance != null && m.hasOwnProperty("distance")) {
                if (typeof m.distance !== "number")
                    return "distance: number expected";
            }
            return null;
        };

        ActionObserverCameraMove.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionObserverCameraMove)
                return d;
            var m = new $root.SC2APIProtocol.ActionObserverCameraMove();
            if (d.worldPos != null) {
                if (typeof d.worldPos !== "object")
                    throw TypeError(".SC2APIProtocol.ActionObserverCameraMove.worldPos: object expected");
                m.worldPos = $root.SC2APIProtocol.Point2D.fromObject(d.worldPos);
            }
            if (d.distance != null) {
                m.distance = Number(d.distance);
            }
            return m;
        };

        ActionObserverCameraMove.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.worldPos = null;
                d.distance = 0;
            }
            if (m.worldPos != null && m.hasOwnProperty("worldPos")) {
                d.worldPos = $root.SC2APIProtocol.Point2D.toObject(m.worldPos, o);
            }
            if (m.distance != null && m.hasOwnProperty("distance")) {
                d.distance = o.json && !isFinite(m.distance) ? String(m.distance) : m.distance;
            }
            return d;
        };

        ActionObserverCameraMove.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionObserverCameraMove;
    })();

    SC2APIProtocol.ActionObserverCameraFollowPlayer = (function() {

        function ActionObserverCameraFollowPlayer(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionObserverCameraFollowPlayer.prototype.playerId = 0;

        ActionObserverCameraFollowPlayer.create = function create(properties) {
            return new ActionObserverCameraFollowPlayer(properties);
        };

        ActionObserverCameraFollowPlayer.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                w.uint32(8).uint32(m.playerId);
            return w;
        };

        ActionObserverCameraFollowPlayer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionObserverCameraFollowPlayer.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionObserverCameraFollowPlayer();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerId = r.uint32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionObserverCameraFollowPlayer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionObserverCameraFollowPlayer.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                if (!$util.isInteger(m.playerId))
                    return "playerId: integer expected";
            }
            return null;
        };

        ActionObserverCameraFollowPlayer.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionObserverCameraFollowPlayer)
                return d;
            var m = new $root.SC2APIProtocol.ActionObserverCameraFollowPlayer();
            if (d.playerId != null) {
                m.playerId = d.playerId >>> 0;
            }
            return m;
        };

        ActionObserverCameraFollowPlayer.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.playerId = 0;
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = m.playerId;
            }
            return d;
        };

        ActionObserverCameraFollowPlayer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionObserverCameraFollowPlayer;
    })();

    SC2APIProtocol.ActionObserverCameraFollowUnits = (function() {

        function ActionObserverCameraFollowUnits(p) {
            this.unitTags = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ActionObserverCameraFollowUnits.prototype.unitTags = $util.emptyArray;

        ActionObserverCameraFollowUnits.create = function create(properties) {
            return new ActionObserverCameraFollowUnits(properties);
        };

        ActionObserverCameraFollowUnits.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.unitTags != null && m.unitTags.length) {
                for (var i = 0; i < m.unitTags.length; ++i)
                    w.uint32(8).uint64(m.unitTags[i]);
            }
            return w;
        };

        ActionObserverCameraFollowUnits.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        ActionObserverCameraFollowUnits.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.ActionObserverCameraFollowUnits();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.unitTags && m.unitTags.length))
                        m.unitTags = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while (r.pos < c2)
                            m.unitTags.push(r.uint64());
                    } else
                        m.unitTags.push(r.uint64());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        ActionObserverCameraFollowUnits.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        ActionObserverCameraFollowUnits.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.unitTags != null && m.hasOwnProperty("unitTags")) {
                if (!Array.isArray(m.unitTags))
                    return "unitTags: array expected";
                for (var i = 0; i < m.unitTags.length; ++i) {
                    if (!$util.isInteger(m.unitTags[i]) && !(m.unitTags[i] && $util.isInteger(m.unitTags[i].low) && $util.isInteger(m.unitTags[i].high)))
                        return "unitTags: integer|Long[] expected";
                }
            }
            return null;
        };

        ActionObserverCameraFollowUnits.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.ActionObserverCameraFollowUnits)
                return d;
            var m = new $root.SC2APIProtocol.ActionObserverCameraFollowUnits();
            if (d.unitTags) {
                if (!Array.isArray(d.unitTags))
                    throw TypeError(".SC2APIProtocol.ActionObserverCameraFollowUnits.unitTags: array expected");
                m.unitTags = [];
                for (var i = 0; i < d.unitTags.length; ++i) {
                    if ($util.Long)
                        (m.unitTags[i] = $util.Long.fromValue(d.unitTags[i])).unsigned = true;
                    else if (typeof d.unitTags[i] === "string")
                        m.unitTags[i] = parseInt(d.unitTags[i], 10);
                    else if (typeof d.unitTags[i] === "number")
                        m.unitTags[i] = d.unitTags[i];
                    else if (typeof d.unitTags[i] === "object")
                        m.unitTags[i] = new $util.LongBits(d.unitTags[i].low >>> 0, d.unitTags[i].high >>> 0).toNumber(true);
                }
            }
            return m;
        };

        ActionObserverCameraFollowUnits.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.arrays || o.defaults) {
                d.unitTags = [];
            }
            if (m.unitTags && m.unitTags.length) {
                d.unitTags = [];
                for (var j = 0; j < m.unitTags.length; ++j) {
                    if (typeof m.unitTags[j] === "number")
                        d.unitTags[j] = o.longs === String ? String(m.unitTags[j]) : m.unitTags[j];
                    else
                        d.unitTags[j] = o.longs === String ? $util.Long.prototype.toString.call(m.unitTags[j]) : o.longs === Number ? new $util.LongBits(m.unitTags[j].low >>> 0, m.unitTags[j].high >>> 0).toNumber(true) : m.unitTags[j];
                }
            }
            return d;
        };

        ActionObserverCameraFollowUnits.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActionObserverCameraFollowUnits;
    })();

    SC2APIProtocol.Alert = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[3] = "AlertError"] = 3;
        values[valuesById[4] = "AddOnComplete"] = 4;
        values[valuesById[5] = "BuildingComplete"] = 5;
        values[valuesById[6] = "BuildingUnderAttack"] = 6;
        values[valuesById[7] = "LarvaHatched"] = 7;
        values[valuesById[8] = "MergeComplete"] = 8;
        values[valuesById[9] = "MineralsExhausted"] = 9;
        values[valuesById[10] = "MorphComplete"] = 10;
        values[valuesById[11] = "MothershipComplete"] = 11;
        values[valuesById[12] = "MULEExpired"] = 12;
        values[valuesById[1] = "NuclearLaunchDetected"] = 1;
        values[valuesById[13] = "NukeComplete"] = 13;
        values[valuesById[2] = "NydusWormDetected"] = 2;
        values[valuesById[14] = "ResearchComplete"] = 14;
        values[valuesById[15] = "TrainError"] = 15;
        values[valuesById[16] = "TrainUnitComplete"] = 16;
        values[valuesById[17] = "TrainWorkerComplete"] = 17;
        values[valuesById[18] = "TransformationComplete"] = 18;
        values[valuesById[19] = "UnitUnderAttack"] = 19;
        values[valuesById[20] = "UpgradeComplete"] = 20;
        values[valuesById[21] = "VespeneExhausted"] = 21;
        values[valuesById[22] = "WarpInComplete"] = 22;
        return values;
    })();

    SC2APIProtocol.Result = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "Victory"] = 1;
        values[valuesById[2] = "Defeat"] = 2;
        values[valuesById[3] = "Tie"] = 3;
        values[valuesById[4] = "Undecided"] = 4;
        return values;
    })();

    SC2APIProtocol.PlayerResult = (function() {

        function PlayerResult(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PlayerResult.prototype.playerId = 0;
        PlayerResult.prototype.result = 1;

        PlayerResult.create = function create(properties) {
            return new PlayerResult(properties);
        };

        PlayerResult.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.playerId != null && Object.hasOwnProperty.call(m, "playerId"))
                w.uint32(8).uint32(m.playerId);
            if (m.result != null && Object.hasOwnProperty.call(m, "result"))
                w.uint32(16).int32(m.result);
            return w;
        };

        PlayerResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        PlayerResult.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.SC2APIProtocol.PlayerResult();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.playerId = r.uint32();
                    break;
                case 2:
                    m.result = r.int32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        PlayerResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        PlayerResult.verify = function verify(m) {
            if (typeof m !== "object" || m === null)
                return "object expected";
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                if (!$util.isInteger(m.playerId))
                    return "playerId: integer expected";
            }
            if (m.result != null && m.hasOwnProperty("result")) {
                switch (m.result) {
                default:
                    return "result: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            }
            return null;
        };

        PlayerResult.fromObject = function fromObject(d) {
            if (d instanceof $root.SC2APIProtocol.PlayerResult)
                return d;
            var m = new $root.SC2APIProtocol.PlayerResult();
            if (d.playerId != null) {
                m.playerId = d.playerId >>> 0;
            }
            switch (d.result) {
            case "Victory":
            case 1:
                m.result = 1;
                break;
            case "Defeat":
            case 2:
                m.result = 2;
                break;
            case "Tie":
            case 3:
                m.result = 3;
                break;
            case "Undecided":
            case 4:
                m.result = 4;
                break;
            }
            return m;
        };

        PlayerResult.toObject = function toObject(m, o) {
            if (!o)
                o = {};
            var d = {};
            if (o.defaults) {
                d.playerId = 0;
                d.result = o.enums === String ? "Victory" : 1;
            }
            if (m.playerId != null && m.hasOwnProperty("playerId")) {
                d.playerId = m.playerId;
            }
            if (m.result != null && m.hasOwnProperty("result")) {
                d.result = o.enums === String ? $root.SC2APIProtocol.Result[m.result] : m.result;
            }
            return d;
        };

        PlayerResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlayerResult;
    })();

    return SC2APIProtocol;
})();

module.exports = $root;
